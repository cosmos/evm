// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/evm/ibc/clients/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClientPrecompileRequest is the request type for the
// Query/ClientPrecompile RPC
type QueryClientPrecompileRequest struct {
	// client can be either the ibc client identifier or the hex contract address
	// of the precompile
	Client string `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *QueryClientPrecompileRequest) Reset()         { *m = QueryClientPrecompileRequest{} }
func (m *QueryClientPrecompileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClientPrecompileRequest) ProtoMessage()    {}
func (*QueryClientPrecompileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{0}
}
func (m *QueryClientPrecompileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientPrecompileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientPrecompileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientPrecompileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientPrecompileRequest.Merge(m, src)
}
func (m *QueryClientPrecompileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientPrecompileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientPrecompileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientPrecompileRequest proto.InternalMessageInfo

func (m *QueryClientPrecompileRequest) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

// QueryClientPrecompileResponse is the response type for the
// Query/ClientPrecompile RPC
type QueryClientPrecompileResponse struct {
	// precompile returns the info about a registered client precompile for the
	// ibc clients module
	Precompile *ClientPrecompile `protobuf:"bytes,1,opt,name=precompile,proto3" json:"precompile,omitempty"`
}

func (m *QueryClientPrecompileResponse) Reset()         { *m = QueryClientPrecompileResponse{} }
func (m *QueryClientPrecompileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClientPrecompileResponse) ProtoMessage()    {}
func (*QueryClientPrecompileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{1}
}
func (m *QueryClientPrecompileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientPrecompileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientPrecompileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientPrecompileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientPrecompileResponse.Merge(m, src)
}
func (m *QueryClientPrecompileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientPrecompileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientPrecompileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientPrecompileResponse proto.InternalMessageInfo

func (m *QueryClientPrecompileResponse) GetPrecompile() *ClientPrecompile {
	if m != nil {
		return m.Precompile
	}
	return nil
}

// QueryClientPrecompilesRequest is the request type for the
// Query/ClientPrecompiles RPC
type QueryClientPrecompilesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClientPrecompilesRequest) Reset()         { *m = QueryClientPrecompilesRequest{} }
func (m *QueryClientPrecompilesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClientPrecompilesRequest) ProtoMessage()    {}
func (*QueryClientPrecompilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{2}
}
func (m *QueryClientPrecompilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientPrecompilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientPrecompilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientPrecompilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientPrecompilesRequest.Merge(m, src)
}
func (m *QueryClientPrecompilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientPrecompilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientPrecompilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientPrecompilesRequest proto.InternalMessageInfo

func (m *QueryClientPrecompilesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClientPrecompilesResponse is the response type for the
// Query/ClientPrecompiles RPC
type QueryClientPrecompilesResponse struct {
	// precompiles is a slice of registered client precompiles for the ibc clients
	// module
	Precompiles []*ClientPrecompile `protobuf:"bytes,1,rep,name=precompiles,proto3" json:"precompiles,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClientPrecompilesResponse) Reset()         { *m = QueryClientPrecompilesResponse{} }
func (m *QueryClientPrecompilesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClientPrecompilesResponse) ProtoMessage()    {}
func (*QueryClientPrecompilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{3}
}
func (m *QueryClientPrecompilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientPrecompilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientPrecompilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientPrecompilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientPrecompilesResponse.Merge(m, src)
}
func (m *QueryClientPrecompilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientPrecompilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientPrecompilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientPrecompilesResponse proto.InternalMessageInfo

func (m *QueryClientPrecompilesResponse) GetPrecompiles() []*ClientPrecompile {
	if m != nil {
		return m.Precompiles
	}
	return nil
}

func (m *QueryClientPrecompilesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb8142ebdfe03aca, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryClientPrecompileRequest)(nil), "cosmos.evm.ibc.clients.v1.QueryClientPrecompileRequest")
	proto.RegisterType((*QueryClientPrecompileResponse)(nil), "cosmos.evm.ibc.clients.v1.QueryClientPrecompileResponse")
	proto.RegisterType((*QueryClientPrecompilesRequest)(nil), "cosmos.evm.ibc.clients.v1.QueryClientPrecompilesRequest")
	proto.RegisterType((*QueryClientPrecompilesResponse)(nil), "cosmos.evm.ibc.clients.v1.QueryClientPrecompilesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmos.evm.ibc.clients.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmos.evm.ibc.clients.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("cosmos/evm/ibc/clients/v1/query.proto", fileDescriptor_cb8142ebdfe03aca)
}

var fileDescriptor_cb8142ebdfe03aca = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x77, 0xaa, 0x2e, 0xf4, 0xed, 0xc5, 0x8e, 0x45, 0x6a, 0xac, 0xb1, 0x8d, 0xf8, 0xa7,
	0x95, 0xce, 0xb0, 0x15, 0xad, 0x7a, 0xdc, 0x8a, 0x1e, 0x44, 0x58, 0xf7, 0xa8, 0x07, 0x99, 0x84,
	0x21, 0x0e, 0x6c, 0x32, 0xe9, 0x4e, 0x36, 0x58, 0xc4, 0x8b, 0x27, 0x8f, 0xa2, 0x5f, 0xc2, 0x9b,
	0x1e, 0xfd, 0x00, 0x1e, 0xea, 0xad, 0xe0, 0xc5, 0x93, 0xc8, 0xae, 0xe0, 0xd7, 0x90, 0x9d, 0x99,
	0xb8, 0x89, 0x25, 0xa9, 0xe9, 0xa5, 0x4c, 0x5f, 0xde, 0xe7, 0x79, 0x7f, 0xcf, 0x3b, 0xb3, 0x81,
	0xcb, 0x81, 0x54, 0x91, 0x54, 0x94, 0x67, 0x11, 0x15, 0x7e, 0x40, 0x83, 0x81, 0xe0, 0x71, 0xaa,
	0x68, 0xd6, 0xa1, 0xbb, 0x23, 0x3e, 0xdc, 0x23, 0xc9, 0x50, 0xa6, 0x12, 0x9f, 0x33, 0x6d, 0x84,
	0x67, 0x11, 0x11, 0x7e, 0x40, 0x6c, 0x1b, 0xc9, 0x3a, 0xce, 0x22, 0x8b, 0x44, 0x2c, 0xa9, 0xfe,
	0x6b, 0xba, 0x9d, 0x0d, 0x6b, 0xea, 0x33, 0xc5, 0x8d, 0x0d, 0xcd, 0x3a, 0x3e, 0x4f, 0x59, 0x87,
	0x26, 0x2c, 0x14, 0x31, 0x4b, 0x85, 0x8c, 0x6d, 0x6f, 0x0d, 0x40, 0xba, 0x97, 0x70, 0x65, 0xdb,
	0xce, 0xdb, 0xb6, 0xdc, 0xad, 0x48, 0xe7, 0x2c, 0x85, 0x32, 0x94, 0xfa, 0x48, 0xa7, 0x27, 0x5b,
	0x5d, 0x09, 0xa5, 0x0c, 0x07, 0x9c, 0xb2, 0x44, 0x50, 0x16, 0xc7, 0x32, 0xd5, 0x63, 0xad, 0xa1,
	0x77, 0x0b, 0x56, 0x1e, 0x4f, 0x2d, 0x76, 0xf4, 0xbc, 0xde, 0x90, 0x07, 0x32, 0x4a, 0xc4, 0x80,
	0xf7, 0xf9, 0xee, 0x88, 0xab, 0x14, 0x9f, 0x85, 0xb6, 0x41, 0x59, 0x46, 0xab, 0xe8, 0xda, 0x7c,
	0xdf, 0xfe, 0xe7, 0x0d, 0xe0, 0x42, 0x85, 0x4e, 0x25, 0x32, 0x56, 0x1c, 0x3f, 0x04, 0x48, 0xfe,
	0x56, 0xb5, 0x78, 0x61, 0xeb, 0x3a, 0xa9, 0xdc, 0x1f, 0x39, 0x64, 0x54, 0x90, 0x7b, 0x61, 0xc5,
	0x34, 0x95, 0x63, 0xde, 0x07, 0x98, 0xad, 0xd4, 0x4e, 0xbb, 0x92, 0x4f, 0x9b, 0xee, 0x9f, 0x98,
	0x45, 0xd9, 0xfd, 0x93, 0x1e, 0x0b, 0xf3, 0x88, 0xfd, 0x82, 0xd2, 0xfb, 0x8c, 0xc0, 0xad, 0x9a,
	0x64, 0x83, 0x3d, 0x82, 0x85, 0x19, 0x99, 0x5a, 0x46, 0xab, 0x27, 0x9a, 0x26, 0x2b, 0xea, 0xf1,
	0x83, 0x12, 0xf9, 0x9c, 0x26, 0xbf, 0x7a, 0x24, 0xb9, 0x61, 0x29, 0xa1, 0x2f, 0x01, 0xd6, 0xe4,
	0x3d, 0x36, 0x64, 0x51, 0xbe, 0x18, 0xef, 0x29, 0x9c, 0x29, 0x55, 0x6d, 0x88, 0x7b, 0xd0, 0x4e,
	0x74, 0xc5, 0xee, 0x6a, 0xad, 0x86, 0xdf, 0x48, 0xbb, 0xf3, 0xfb, 0x3f, 0x2e, 0xb6, 0x3e, 0xfc,
	0xfe, 0xb4, 0x81, 0xfa, 0x56, 0xbb, 0xf5, 0xf1, 0x24, 0x9c, 0xd2, 0xee, 0xf8, 0x2b, 0x82, 0xd3,
	0xff, 0xe6, 0xc4, 0xdb, 0x35, 0xa6, 0x75, 0x8f, 0xce, 0xb9, 0xdd, 0x5c, 0x68, 0x72, 0x79, 0xdd,
	0x37, 0x53, 0xc0, 0xd7, 0xdf, 0x7e, 0xbd, 0x9f, 0xdb, 0xc6, 0x37, 0x69, 0xf5, 0x8f, 0xca, 0x1c,
	0x9f, 0xcd, 0x6e, 0x82, 0xbe, 0x34, 0xa5, 0x57, 0xf8, 0x0b, 0x82, 0xc5, 0x43, 0xd7, 0x8f, 0x1b,
	0x33, 0xe5, 0x57, 0xe0, 0xdc, 0x39, 0x86, 0xd2, 0xc6, 0xb9, 0x3b, 0x8b, 0x43, 0xf1, 0x66, 0x93,
	0x38, 0x0a, 0xbf, 0x43, 0xd0, 0x36, 0x57, 0x87, 0x37, 0x8f, 0x22, 0x28, 0xbd, 0x19, 0x87, 0xfc,
	0x6f, 0xbb, 0xa5, 0x5c, 0xd7, 0x80, 0x97, 0xf0, 0x5a, 0x0d, 0xa0, 0x79, 0x31, 0xdd, 0x9d, 0xfd,
	0xb1, 0x8b, 0x0e, 0xc6, 0x2e, 0xfa, 0x39, 0x76, 0xd1, 0xdb, 0x89, 0xdb, 0x3a, 0x98, 0xb8, 0xad,
	0xef, 0x13, 0xb7, 0xf5, 0x64, 0x3d, 0x14, 0xe9, 0xf3, 0x91, 0x4f, 0x02, 0x19, 0x15, 0x6d, 0x5e,
	0x94, 0x8c, 0xf4, 0xa7, 0xd0, 0x6f, 0xeb, 0x4f, 0xd7, 0x8d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x14, 0xbe, 0x5f, 0xb2, 0xb5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ClientPrecompile returns the registered client precompile for a given
	// client.
	ClientPrecompile(ctx context.Context, in *QueryClientPrecompileRequest, opts ...grpc.CallOption) (*QueryClientPrecompileResponse, error)
	// ClientPrecompiles returns all the ClientPrecompile values.
	ClientPrecompiles(ctx context.Context, in *QueryClientPrecompilesRequest, opts ...grpc.CallOption) (*QueryClientPrecompilesResponse, error)
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ClientPrecompile(ctx context.Context, in *QueryClientPrecompileRequest, opts ...grpc.CallOption) (*QueryClientPrecompileResponse, error) {
	out := new(QueryClientPrecompileResponse)
	err := c.cc.Invoke(ctx, "/cosmos.evm.ibc.clients.v1.Query/ClientPrecompile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClientPrecompiles(ctx context.Context, in *QueryClientPrecompilesRequest, opts ...grpc.CallOption) (*QueryClientPrecompilesResponse, error) {
	out := new(QueryClientPrecompilesResponse)
	err := c.cc.Invoke(ctx, "/cosmos.evm.ibc.clients.v1.Query/ClientPrecompiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.evm.ibc.clients.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ClientPrecompile returns the registered client precompile for a given
	// client.
	ClientPrecompile(context.Context, *QueryClientPrecompileRequest) (*QueryClientPrecompileResponse, error)
	// ClientPrecompiles returns all the ClientPrecompile values.
	ClientPrecompiles(context.Context, *QueryClientPrecompilesRequest) (*QueryClientPrecompilesResponse, error)
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ClientPrecompile(ctx context.Context, req *QueryClientPrecompileRequest) (*QueryClientPrecompileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPrecompile not implemented")
}
func (*UnimplementedQueryServer) ClientPrecompiles(ctx context.Context, req *QueryClientPrecompilesRequest) (*QueryClientPrecompilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPrecompiles not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ClientPrecompile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientPrecompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientPrecompile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.evm.ibc.clients.v1.Query/ClientPrecompile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientPrecompile(ctx, req.(*QueryClientPrecompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClientPrecompiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientPrecompilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientPrecompiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.evm.ibc.clients.v1.Query/ClientPrecompiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientPrecompiles(ctx, req.(*QueryClientPrecompilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.evm.ibc.clients.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.evm.ibc.clients.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientPrecompile",
			Handler:    _Query_ClientPrecompile_Handler,
		},
		{
			MethodName: "ClientPrecompiles",
			Handler:    _Query_ClientPrecompiles_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/evm/ibc/clients/v1/query.proto",
}

func (m *QueryClientPrecompileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientPrecompileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientPrecompileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientPrecompileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientPrecompileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientPrecompileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Precompile != nil {
		{
			size, err := m.Precompile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientPrecompilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientPrecompilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientPrecompilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientPrecompilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientPrecompilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientPrecompilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Precompiles) > 0 {
		for iNdEx := len(m.Precompiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Precompiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClientPrecompileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientPrecompileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Precompile != nil {
		l = m.Precompile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientPrecompilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientPrecompilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Precompiles) > 0 {
		for _, e := range m.Precompiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClientPrecompileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientPrecompileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientPrecompileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientPrecompileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientPrecompileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientPrecompileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precompile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Precompile == nil {
				m.Precompile = &ClientPrecompile{}
			}
			if err := m.Precompile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientPrecompilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientPrecompilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientPrecompilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientPrecompilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientPrecompilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientPrecompilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precompiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Precompiles = append(m.Precompiles, &ClientPrecompile{})
			if err := m.Precompiles[len(m.Precompiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
