// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/bank/types"
)

// MockBankKeeper is an autogenerated mock type for the BankKeeper type
type MockBankKeeper struct {
	mock.Mock
}

type MockBankKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBankKeeper) EXPECT() *MockBankKeeper_Expecter {
	return &MockBankKeeper_Expecter{mock: &_m.Mock}
}

// AllBalances provides a mock function with given fields: ctx, req
func (_m *MockBankKeeper) AllBalances(ctx context.Context, req *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AllBalances")
	}

	var r0 *types.QueryAllBalancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllBalancesRequest) *types.QueryAllBalancesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllBalancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllBalancesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBankKeeper_AllBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllBalances'
type MockBankKeeper_AllBalances_Call struct {
	*mock.Call
}

// AllBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.QueryAllBalancesRequest
func (_e *MockBankKeeper_Expecter) AllBalances(ctx interface{}, req interface{}) *MockBankKeeper_AllBalances_Call {
	return &MockBankKeeper_AllBalances_Call{Call: _e.mock.On("AllBalances", ctx, req)}
}

func (_c *MockBankKeeper_AllBalances_Call) Run(run func(ctx context.Context, req *types.QueryAllBalancesRequest)) *MockBankKeeper_AllBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.QueryAllBalancesRequest))
	})
	return _c
}

func (_c *MockBankKeeper_AllBalances_Call) Return(_a0 *types.QueryAllBalancesResponse, _a1 error) *MockBankKeeper_AllBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBankKeeper_AllBalances_Call) RunAndReturn(run func(context.Context, *types.QueryAllBalancesRequest) (*types.QueryAllBalancesResponse, error)) *MockBankKeeper_AllBalances_Call {
	_c.Call.Return(run)
	return _c
}

// BlockedAddr provides a mock function with given fields: addr
func (_m *MockBankKeeper) BlockedAddr(addr cosmos_sdktypes.AccAddress) bool {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for BlockedAddr")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(cosmos_sdktypes.AccAddress) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBankKeeper_BlockedAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockedAddr'
type MockBankKeeper_BlockedAddr_Call struct {
	*mock.Call
}

// BlockedAddr is a helper method to define mock.On call
//   - addr cosmos_sdktypes.AccAddress
func (_e *MockBankKeeper_Expecter) BlockedAddr(addr interface{}) *MockBankKeeper_BlockedAddr_Call {
	return &MockBankKeeper_BlockedAddr_Call{Call: _e.mock.On("BlockedAddr", addr)}
}

func (_c *MockBankKeeper_BlockedAddr_Call) Run(run func(addr cosmos_sdktypes.AccAddress)) *MockBankKeeper_BlockedAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cosmos_sdktypes.AccAddress))
	})
	return _c
}

func (_c *MockBankKeeper_BlockedAddr_Call) Return(_a0 bool) *MockBankKeeper_BlockedAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_BlockedAddr_Call) RunAndReturn(run func(cosmos_sdktypes.AccAddress) bool) *MockBankKeeper_BlockedAddr_Call {
	_c.Call.Return(run)
	return _c
}

// BurnCoins provides a mock function with given fields: ctx, moduleName, amt
func (_m *MockBankKeeper) BurnCoins(ctx context.Context, moduleName string, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, moduleName, amt)

	if len(ret) == 0 {
		panic("no return value specified for BurnCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, moduleName, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_BurnCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BurnCoins'
type MockBankKeeper_BurnCoins_Call struct {
	*mock.Call
}

// BurnCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - moduleName string
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) BurnCoins(ctx interface{}, moduleName interface{}, amt interface{}) *MockBankKeeper_BurnCoins_Call {
	return &MockBankKeeper_BurnCoins_Call{Call: _e.mock.On("BurnCoins", ctx, moduleName, amt)}
}

func (_c *MockBankKeeper_BurnCoins_Call) Run(run func(ctx context.Context, moduleName string, amt cosmos_sdktypes.Coins)) *MockBankKeeper_BurnCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_BurnCoins_Call) Return(_a0 error) *MockBankKeeper_BurnCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_BurnCoins_Call) RunAndReturn(run func(context.Context, string, cosmos_sdktypes.Coins) error) *MockBankKeeper_BurnCoins_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBalances provides a mock function with given fields: ctx, addr
func (_m *MockBankKeeper) GetAllBalances(ctx context.Context, addr cosmos_sdktypes.AccAddress) cosmos_sdktypes.Coins {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBalances")
	}

	var r0 cosmos_sdktypes.Coins
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.Coins); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.Coins)
		}
	}

	return r0
}

// MockBankKeeper_GetAllBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBalances'
type MockBankKeeper_GetAllBalances_Call struct {
	*mock.Call
}

// GetAllBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - addr cosmos_sdktypes.AccAddress
func (_e *MockBankKeeper_Expecter) GetAllBalances(ctx interface{}, addr interface{}) *MockBankKeeper_GetAllBalances_Call {
	return &MockBankKeeper_GetAllBalances_Call{Call: _e.mock.On("GetAllBalances", ctx, addr)}
}

func (_c *MockBankKeeper_GetAllBalances_Call) Run(run func(ctx context.Context, addr cosmos_sdktypes.AccAddress)) *MockBankKeeper_GetAllBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress))
	})
	return _c
}

func (_c *MockBankKeeper_GetAllBalances_Call) Return(_a0 cosmos_sdktypes.Coins) *MockBankKeeper_GetAllBalances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_GetAllBalances_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.Coins) *MockBankKeeper_GetAllBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, addr, denom
func (_m *MockBankKeeper) GetBalance(ctx context.Context, addr cosmos_sdktypes.AccAddress, denom string) cosmos_sdktypes.Coin {
	ret := _m.Called(ctx, addr, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 cosmos_sdktypes.Coin
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, string) cosmos_sdktypes.Coin); ok {
		r0 = rf(ctx, addr, denom)
	} else {
		r0 = ret.Get(0).(cosmos_sdktypes.Coin)
	}

	return r0
}

// MockBankKeeper_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockBankKeeper_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - addr cosmos_sdktypes.AccAddress
//   - denom string
func (_e *MockBankKeeper_Expecter) GetBalance(ctx interface{}, addr interface{}, denom interface{}) *MockBankKeeper_GetBalance_Call {
	return &MockBankKeeper_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, addr, denom)}
}

func (_c *MockBankKeeper_GetBalance_Call) Run(run func(ctx context.Context, addr cosmos_sdktypes.AccAddress, denom string)) *MockBankKeeper_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(string))
	})
	return _c
}

func (_c *MockBankKeeper_GetBalance_Call) Return(_a0 cosmos_sdktypes.Coin) *MockBankKeeper_GetBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_GetBalance_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, string) cosmos_sdktypes.Coin) *MockBankKeeper_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupply provides a mock function with given fields: ctx, denom
func (_m *MockBankKeeper) GetSupply(ctx context.Context, denom string) cosmos_sdktypes.Coin {
	ret := _m.Called(ctx, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetSupply")
	}

	var r0 cosmos_sdktypes.Coin
	if rf, ok := ret.Get(0).(func(context.Context, string) cosmos_sdktypes.Coin); ok {
		r0 = rf(ctx, denom)
	} else {
		r0 = ret.Get(0).(cosmos_sdktypes.Coin)
	}

	return r0
}

// MockBankKeeper_GetSupply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupply'
type MockBankKeeper_GetSupply_Call struct {
	*mock.Call
}

// GetSupply is a helper method to define mock.On call
//   - ctx context.Context
//   - denom string
func (_e *MockBankKeeper_Expecter) GetSupply(ctx interface{}, denom interface{}) *MockBankKeeper_GetSupply_Call {
	return &MockBankKeeper_GetSupply_Call{Call: _e.mock.On("GetSupply", ctx, denom)}
}

func (_c *MockBankKeeper_GetSupply_Call) Run(run func(ctx context.Context, denom string)) *MockBankKeeper_GetSupply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBankKeeper_GetSupply_Call) Return(_a0 cosmos_sdktypes.Coin) *MockBankKeeper_GetSupply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_GetSupply_Call) RunAndReturn(run func(context.Context, string) cosmos_sdktypes.Coin) *MockBankKeeper_GetSupply_Call {
	_c.Call.Return(run)
	return _c
}

// IsSendEnabledCoins provides a mock function with given fields: ctx, coins
func (_m *MockBankKeeper) IsSendEnabledCoins(ctx context.Context, coins ...cosmos_sdktypes.Coin) error {
	_va := make([]interface{}, len(coins))
	for _i := range coins {
		_va[_i] = coins[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsSendEnabledCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...cosmos_sdktypes.Coin) error); ok {
		r0 = rf(ctx, coins...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_IsSendEnabledCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSendEnabledCoins'
type MockBankKeeper_IsSendEnabledCoins_Call struct {
	*mock.Call
}

// IsSendEnabledCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - coins ...cosmos_sdktypes.Coin
func (_e *MockBankKeeper_Expecter) IsSendEnabledCoins(ctx interface{}, coins ...interface{}) *MockBankKeeper_IsSendEnabledCoins_Call {
	return &MockBankKeeper_IsSendEnabledCoins_Call{Call: _e.mock.On("IsSendEnabledCoins",
		append([]interface{}{ctx}, coins...)...)}
}

func (_c *MockBankKeeper_IsSendEnabledCoins_Call) Run(run func(ctx context.Context, coins ...cosmos_sdktypes.Coin)) *MockBankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cosmos_sdktypes.Coin, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(cosmos_sdktypes.Coin)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockBankKeeper_IsSendEnabledCoins_Call) Return(_a0 error) *MockBankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_IsSendEnabledCoins_Call) RunAndReturn(run func(context.Context, ...cosmos_sdktypes.Coin) error) *MockBankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Return(run)
	return _c
}

// IterateAccountBalances provides a mock function with given fields: ctx, account, cb
func (_m *MockBankKeeper) IterateAccountBalances(ctx context.Context, account cosmos_sdktypes.AccAddress, cb func(cosmos_sdktypes.Coin) bool) {
	_m.Called(ctx, account, cb)
}

// MockBankKeeper_IterateAccountBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateAccountBalances'
type MockBankKeeper_IterateAccountBalances_Call struct {
	*mock.Call
}

// IterateAccountBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - account cosmos_sdktypes.AccAddress
//   - cb func(cosmos_sdktypes.Coin) bool
func (_e *MockBankKeeper_Expecter) IterateAccountBalances(ctx interface{}, account interface{}, cb interface{}) *MockBankKeeper_IterateAccountBalances_Call {
	return &MockBankKeeper_IterateAccountBalances_Call{Call: _e.mock.On("IterateAccountBalances", ctx, account, cb)}
}

func (_c *MockBankKeeper_IterateAccountBalances_Call) Run(run func(ctx context.Context, account cosmos_sdktypes.AccAddress, cb func(cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateAccountBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(func(cosmos_sdktypes.Coin) bool))
	})
	return _c
}

func (_c *MockBankKeeper_IterateAccountBalances_Call) Return() *MockBankKeeper_IterateAccountBalances_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBankKeeper_IterateAccountBalances_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, func(cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateAccountBalances_Call {
	_c.Run(run)
	return _c
}

// IterateAllBalances provides a mock function with given fields: ctx, cb
func (_m *MockBankKeeper) IterateAllBalances(ctx context.Context, cb func(cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coin) bool) {
	_m.Called(ctx, cb)
}

// MockBankKeeper_IterateAllBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateAllBalances'
type MockBankKeeper_IterateAllBalances_Call struct {
	*mock.Call
}

// IterateAllBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(cosmos_sdktypes.AccAddress , cosmos_sdktypes.Coin) bool
func (_e *MockBankKeeper_Expecter) IterateAllBalances(ctx interface{}, cb interface{}) *MockBankKeeper_IterateAllBalances_Call {
	return &MockBankKeeper_IterateAllBalances_Call{Call: _e.mock.On("IterateAllBalances", ctx, cb)}
}

func (_c *MockBankKeeper_IterateAllBalances_Call) Run(run func(ctx context.Context, cb func(cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateAllBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coin) bool))
	})
	return _c
}

func (_c *MockBankKeeper_IterateAllBalances_Call) Return() *MockBankKeeper_IterateAllBalances_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBankKeeper_IterateAllBalances_Call) RunAndReturn(run func(context.Context, func(cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateAllBalances_Call {
	_c.Run(run)
	return _c
}

// IterateTotalSupply provides a mock function with given fields: ctx, cb
func (_m *MockBankKeeper) IterateTotalSupply(ctx context.Context, cb func(cosmos_sdktypes.Coin) bool) {
	_m.Called(ctx, cb)
}

// MockBankKeeper_IterateTotalSupply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateTotalSupply'
type MockBankKeeper_IterateTotalSupply_Call struct {
	*mock.Call
}

// IterateTotalSupply is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(cosmos_sdktypes.Coin) bool
func (_e *MockBankKeeper_Expecter) IterateTotalSupply(ctx interface{}, cb interface{}) *MockBankKeeper_IterateTotalSupply_Call {
	return &MockBankKeeper_IterateTotalSupply_Call{Call: _e.mock.On("IterateTotalSupply", ctx, cb)}
}

func (_c *MockBankKeeper_IterateTotalSupply_Call) Run(run func(ctx context.Context, cb func(cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateTotalSupply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(cosmos_sdktypes.Coin) bool))
	})
	return _c
}

func (_c *MockBankKeeper_IterateTotalSupply_Call) Return() *MockBankKeeper_IterateTotalSupply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBankKeeper_IterateTotalSupply_Call) RunAndReturn(run func(context.Context, func(cosmos_sdktypes.Coin) bool)) *MockBankKeeper_IterateTotalSupply_Call {
	_c.Run(run)
	return _c
}

// MintCoins provides a mock function with given fields: ctx, moduleName, amt
func (_m *MockBankKeeper) MintCoins(ctx context.Context, moduleName string, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, moduleName, amt)

	if len(ret) == 0 {
		panic("no return value specified for MintCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, moduleName, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_MintCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintCoins'
type MockBankKeeper_MintCoins_Call struct {
	*mock.Call
}

// MintCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - moduleName string
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) MintCoins(ctx interface{}, moduleName interface{}, amt interface{}) *MockBankKeeper_MintCoins_Call {
	return &MockBankKeeper_MintCoins_Call{Call: _e.mock.On("MintCoins", ctx, moduleName, amt)}
}

func (_c *MockBankKeeper_MintCoins_Call) Run(run func(ctx context.Context, moduleName string, amt cosmos_sdktypes.Coins)) *MockBankKeeper_MintCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_MintCoins_Call) Return(_a0 error) *MockBankKeeper_MintCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_MintCoins_Call) RunAndReturn(run func(context.Context, string, cosmos_sdktypes.Coins) error) *MockBankKeeper_MintCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoins provides a mock function with given fields: ctx, fromAddr, toAddr, amt
func (_m *MockBankKeeper) SendCoins(ctx context.Context, fromAddr cosmos_sdktypes.AccAddress, toAddr cosmos_sdktypes.AccAddress, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, fromAddr, toAddr, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, fromAddr, toAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_SendCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoins'
type MockBankKeeper_SendCoins_Call struct {
	*mock.Call
}

// SendCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - fromAddr cosmos_sdktypes.AccAddress
//   - toAddr cosmos_sdktypes.AccAddress
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) SendCoins(ctx interface{}, fromAddr interface{}, toAddr interface{}, amt interface{}) *MockBankKeeper_SendCoins_Call {
	return &MockBankKeeper_SendCoins_Call{Call: _e.mock.On("SendCoins", ctx, fromAddr, toAddr, amt)}
}

func (_c *MockBankKeeper_SendCoins_Call) Run(run func(ctx context.Context, fromAddr cosmos_sdktypes.AccAddress, toAddr cosmos_sdktypes.AccAddress, amt cosmos_sdktypes.Coins)) *MockBankKeeper_SendCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(cosmos_sdktypes.AccAddress), args[3].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_SendCoins_Call) Return(_a0 error) *MockBankKeeper_SendCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_SendCoins_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coins) error) *MockBankKeeper_SendCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromAccountToModule provides a mock function with given fields: ctx, senderAddr, recipientModule, amt
func (_m *MockBankKeeper) SendCoinsFromAccountToModule(ctx context.Context, senderAddr cosmos_sdktypes.AccAddress, recipientModule string, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, senderAddr, recipientModule, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromAccountToModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, string, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, senderAddr, recipientModule, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_SendCoinsFromAccountToModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromAccountToModule'
type MockBankKeeper_SendCoinsFromAccountToModule_Call struct {
	*mock.Call
}

// SendCoinsFromAccountToModule is a helper method to define mock.On call
//   - ctx context.Context
//   - senderAddr cosmos_sdktypes.AccAddress
//   - recipientModule string
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) SendCoinsFromAccountToModule(ctx interface{}, senderAddr interface{}, recipientModule interface{}, amt interface{}) *MockBankKeeper_SendCoinsFromAccountToModule_Call {
	return &MockBankKeeper_SendCoinsFromAccountToModule_Call{Call: _e.mock.On("SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)}
}

func (_c *MockBankKeeper_SendCoinsFromAccountToModule_Call) Run(run func(ctx context.Context, senderAddr cosmos_sdktypes.AccAddress, recipientModule string, amt cosmos_sdktypes.Coins)) *MockBankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(string), args[3].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromAccountToModule_Call) Return(_a0 error) *MockBankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromAccountToModule_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, string, cosmos_sdktypes.Coins) error) *MockBankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromModuleToAccount provides a mock function with given fields: ctx, senderModule, recipientAddr, amt
func (_m *MockBankKeeper) SendCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr cosmos_sdktypes.AccAddress, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, senderModule, recipientAddr, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromModuleToAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, senderModule, recipientAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_SendCoinsFromModuleToAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromModuleToAccount'
type MockBankKeeper_SendCoinsFromModuleToAccount_Call struct {
	*mock.Call
}

// SendCoinsFromModuleToAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - senderModule string
//   - recipientAddr cosmos_sdktypes.AccAddress
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) SendCoinsFromModuleToAccount(ctx interface{}, senderModule interface{}, recipientAddr interface{}, amt interface{}) *MockBankKeeper_SendCoinsFromModuleToAccount_Call {
	return &MockBankKeeper_SendCoinsFromModuleToAccount_Call{Call: _e.mock.On("SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)}
}

func (_c *MockBankKeeper_SendCoinsFromModuleToAccount_Call) Run(run func(ctx context.Context, senderModule string, recipientAddr cosmos_sdktypes.AccAddress, amt cosmos_sdktypes.Coins)) *MockBankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(cosmos_sdktypes.AccAddress), args[3].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromModuleToAccount_Call) Return(_a0 error) *MockBankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromModuleToAccount_Call) RunAndReturn(run func(context.Context, string, cosmos_sdktypes.AccAddress, cosmos_sdktypes.Coins) error) *MockBankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromModuleToModule provides a mock function with given fields: ctx, senderModule, recipientModule, amt
func (_m *MockBankKeeper) SendCoinsFromModuleToModule(ctx context.Context, senderModule string, recipientModule string, amt cosmos_sdktypes.Coins) error {
	ret := _m.Called(ctx, senderModule, recipientModule, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromModuleToModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, cosmos_sdktypes.Coins) error); ok {
		r0 = rf(ctx, senderModule, recipientModule, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBankKeeper_SendCoinsFromModuleToModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromModuleToModule'
type MockBankKeeper_SendCoinsFromModuleToModule_Call struct {
	*mock.Call
}

// SendCoinsFromModuleToModule is a helper method to define mock.On call
//   - ctx context.Context
//   - senderModule string
//   - recipientModule string
//   - amt cosmos_sdktypes.Coins
func (_e *MockBankKeeper_Expecter) SendCoinsFromModuleToModule(ctx interface{}, senderModule interface{}, recipientModule interface{}, amt interface{}) *MockBankKeeper_SendCoinsFromModuleToModule_Call {
	return &MockBankKeeper_SendCoinsFromModuleToModule_Call{Call: _e.mock.On("SendCoinsFromModuleToModule", ctx, senderModule, recipientModule, amt)}
}

func (_c *MockBankKeeper_SendCoinsFromModuleToModule_Call) Run(run func(ctx context.Context, senderModule string, recipientModule string, amt cosmos_sdktypes.Coins)) *MockBankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(cosmos_sdktypes.Coins))
	})
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromModuleToModule_Call) Return(_a0 error) *MockBankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_SendCoinsFromModuleToModule_Call) RunAndReturn(run func(context.Context, string, string, cosmos_sdktypes.Coins) error) *MockBankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Return(run)
	return _c
}

// SpendableCoin provides a mock function with given fields: ctx, addr, denom
func (_m *MockBankKeeper) SpendableCoin(ctx context.Context, addr cosmos_sdktypes.AccAddress, denom string) cosmos_sdktypes.Coin {
	ret := _m.Called(ctx, addr, denom)

	if len(ret) == 0 {
		panic("no return value specified for SpendableCoin")
	}

	var r0 cosmos_sdktypes.Coin
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, string) cosmos_sdktypes.Coin); ok {
		r0 = rf(ctx, addr, denom)
	} else {
		r0 = ret.Get(0).(cosmos_sdktypes.Coin)
	}

	return r0
}

// MockBankKeeper_SpendableCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpendableCoin'
type MockBankKeeper_SpendableCoin_Call struct {
	*mock.Call
}

// SpendableCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - addr cosmos_sdktypes.AccAddress
//   - denom string
func (_e *MockBankKeeper_Expecter) SpendableCoin(ctx interface{}, addr interface{}, denom interface{}) *MockBankKeeper_SpendableCoin_Call {
	return &MockBankKeeper_SpendableCoin_Call{Call: _e.mock.On("SpendableCoin", ctx, addr, denom)}
}

func (_c *MockBankKeeper_SpendableCoin_Call) Run(run func(ctx context.Context, addr cosmos_sdktypes.AccAddress, denom string)) *MockBankKeeper_SpendableCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(string))
	})
	return _c
}

func (_c *MockBankKeeper_SpendableCoin_Call) Return(_a0 cosmos_sdktypes.Coin) *MockBankKeeper_SpendableCoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBankKeeper_SpendableCoin_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, string) cosmos_sdktypes.Coin) *MockBankKeeper_SpendableCoin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBankKeeper creates a new instance of MockBankKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBankKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockBankKeeper {
	mock := &MockBankKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
