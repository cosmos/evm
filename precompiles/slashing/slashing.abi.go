// Code generated by go-abi. DO NOT EDIT.

package slashing

import (
	"encoding/binary"
	"errors"
	"fmt"
	"io"

	cmn "github.com/cosmos/evm/precompiles/common"
	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// getParams()
	GetParamsSelector = [4]byte{0x5e, 0x61, 0x5a, 0x6b}
	// getSigningInfo(address)
	GetSigningInfoSelector = [4]byte{0x69, 0xe1, 0xf9, 0xdf}
	// getSigningInfos((bytes,uint64,uint64,bool,bool))
	GetSigningInfosSelector = [4]byte{0xc6, 0x91, 0x9f, 0x55}
	// unjail(address)
	UnjailSelector = [4]byte{0x44, 0x9e, 0xcf, 0xe6}
)

// Big endian integer versions of function selectors
const (
	GetParamsID       = 1583438443
	GetSigningInfoID  = 1776417247
	GetSigningInfosID = 3331432277
	UnjailID          = 1151258598
)

const PageResponseStaticSize = 64

// PageResponse represents an ABI tuple
type PageResponse struct {
	NextKey []byte
	Total   uint64
}

// EncodedSize returns the total encoded size of PageResponse
func (t PageResponse) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeBytes(t.NextKey)

	return PageResponseStaticSize + dynamicSize
}

// EncodeTo encodes PageResponse to ABI bytes in the provided buffer
func (value PageResponse) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := PageResponseStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field NextKey: bytes
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeBytes(value.NextKey, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Total: uint64
	if _, err := abi.EncodeUint64(value.Total, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes PageResponse to ABI bytes
func (value PageResponse) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes PageResponse from ABI bytes in the provided buffer
func (t *PageResponse) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field NextKey
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field NextKey")
		}
		t.NextKey, n, err = abi.DecodeBytes(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Total: uint64
	t.Total, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const ParamsStaticSize = 256

// Params represents an ABI tuple
type Params struct {
	SignedBlocksWindow      int64
	MinSignedPerWindow      cmn.Dec
	DowntimeJailDuration    int64
	SlashFractionDoubleSign cmn.Dec
	SlashFractionDowntime   cmn.Dec
}

// EncodedSize returns the total encoded size of Params
func (t Params) EncodedSize() int {
	dynamicSize := 0

	return ParamsStaticSize + dynamicSize
}

// EncodeTo encodes Params to ABI bytes in the provided buffer
func (value Params) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ParamsStaticSize // Start dynamic data after static section
	// Field SignedBlocksWindow: int64
	if _, err := abi.EncodeInt64(value.SignedBlocksWindow, buf[0:]); err != nil {
		return 0, err
	}

	// Field MinSignedPerWindow: (uint256,uint8)
	if _, err := value.MinSignedPerWindow.EncodeTo(buf[32:]); err != nil {
		return 0, err
	}

	// Field DowntimeJailDuration: int64
	if _, err := abi.EncodeInt64(value.DowntimeJailDuration, buf[96:]); err != nil {
		return 0, err
	}

	// Field SlashFractionDoubleSign: (uint256,uint8)
	if _, err := value.SlashFractionDoubleSign.EncodeTo(buf[128:]); err != nil {
		return 0, err
	}

	// Field SlashFractionDowntime: (uint256,uint8)
	if _, err := value.SlashFractionDowntime.EncodeTo(buf[192:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Params to ABI bytes
func (value Params) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Params from ABI bytes in the provided buffer
func (t *Params) Decode(data []byte) (int, error) {
	if len(data) < 256 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 256
	// Decode static field SignedBlocksWindow: int64
	t.SignedBlocksWindow, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field MinSignedPerWindow: (uint256,uint8)
	_, err = t.MinSignedPerWindow.Decode(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field DowntimeJailDuration: int64
	t.DowntimeJailDuration, _, err = abi.DecodeInt64(data[96:])
	if err != nil {
		return 0, err
	}
	// Decode static field SlashFractionDoubleSign: (uint256,uint8)
	_, err = t.SlashFractionDoubleSign.Decode(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field SlashFractionDowntime: (uint256,uint8)
	_, err = t.SlashFractionDowntime.Decode(data[192:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const SigningInfoStaticSize = 192

// SigningInfo represents an ABI tuple
type SigningInfo struct {
	ValidatorAddress    common.Address
	StartHeight         int64
	IndexOffset         int64
	JailedUntil         int64
	Tombstoned          bool
	MissedBlocksCounter int64
}

// EncodedSize returns the total encoded size of SigningInfo
func (t SigningInfo) EncodedSize() int {
	dynamicSize := 0

	return SigningInfoStaticSize + dynamicSize
}

// EncodeTo encodes SigningInfo to ABI bytes in the provided buffer
func (value SigningInfo) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SigningInfoStaticSize // Start dynamic data after static section
	// Field ValidatorAddress: address
	if _, err := abi.EncodeAddress(value.ValidatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field StartHeight: int64
	if _, err := abi.EncodeInt64(value.StartHeight, buf[32:]); err != nil {
		return 0, err
	}

	// Field IndexOffset: int64
	if _, err := abi.EncodeInt64(value.IndexOffset, buf[64:]); err != nil {
		return 0, err
	}

	// Field JailedUntil: int64
	if _, err := abi.EncodeInt64(value.JailedUntil, buf[96:]); err != nil {
		return 0, err
	}

	// Field Tombstoned: bool
	if _, err := abi.EncodeBool(value.Tombstoned, buf[128:]); err != nil {
		return 0, err
	}

	// Field MissedBlocksCounter: int64
	if _, err := abi.EncodeInt64(value.MissedBlocksCounter, buf[160:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SigningInfo to ABI bytes
func (value SigningInfo) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SigningInfo from ABI bytes in the provided buffer
func (t *SigningInfo) Decode(data []byte) (int, error) {
	if len(data) < 192 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 192
	// Decode static field ValidatorAddress: address
	t.ValidatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field StartHeight: int64
	t.StartHeight, _, err = abi.DecodeInt64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field IndexOffset: int64
	t.IndexOffset, _, err = abi.DecodeInt64(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field JailedUntil: int64
	t.JailedUntil, _, err = abi.DecodeInt64(data[96:])
	if err != nil {
		return 0, err
	}
	// Decode static field Tombstoned: bool
	t.Tombstoned, _, err = abi.DecodeBool(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field MissedBlocksCounter: int64
	t.MissedBlocksCounter, _, err = abi.DecodeInt64(data[160:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeSigningInfoSlice encodes (address,int64,int64,int64,bool,int64)[] to ABI bytes
func EncodeSigningInfoSlice(value []SigningInfo, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with static types
	var offset int
	for _, elem := range value {
		n, err := elem.EncodeTo(buf[offset:])
		if err != nil {
			return 0, err
		}
		offset += n
	}

	return offset + 32, nil
}

// SizeSigningInfoSlice returns the encoded size of (address,int64,int64,int64,bool,int64)[]
func SizeSigningInfoSlice(value []SigningInfo) int {
	size := 32 + 192*len(value) // length + static elements
	return size
}

// DecodeSigningInfoSlice decodes (address,int64,int64,int64,bool,int64)[] from ABI bytes
func DecodeSigningInfoSlice(data []byte) ([]SigningInfo, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 192*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with static types
	result := make([]SigningInfo, length)
	for i := 0; i < length; i++ {
		n, err = result[i].Decode(data[offset:])
		if err != nil {
			return nil, 0, err
		}
		offset += n
	}
	return result, offset + 32, nil
}

// GetParamsCall represents the input arguments for getParams function
type GetParamsCall struct {
	abi.EmptyTuple
}

// GetMethodName returns the function name
func (t GetParamsCall) GetMethodName() string {
	return "getParams"
}

// GetMethodID returns the function name
func (t GetParamsCall) GetMethodID() [4]byte {
	return GetParamsSelector
}

// EncodeWithSelector encodes getParams arguments to ABI bytes including function selector
func (t GetParamsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetParamsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetParamsReturnStaticSize = 256

// GetParamsReturn represents an ABI tuple
type GetParamsReturn struct {
	Params Params
}

// EncodedSize returns the total encoded size of GetParamsReturn
func (t GetParamsReturn) EncodedSize() int {
	dynamicSize := 0

	return GetParamsReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetParamsReturn to ABI bytes in the provided buffer
func (value GetParamsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetParamsReturnStaticSize // Start dynamic data after static section
	// Field Params: (int64,(uint256,uint8),int64,(uint256,uint8),(uint256,uint8))
	if _, err := value.Params.EncodeTo(buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetParamsReturn to ABI bytes
func (value GetParamsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetParamsReturn from ABI bytes in the provided buffer
func (t *GetParamsReturn) Decode(data []byte) (int, error) {
	if len(data) < 256 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 256
	// Decode static field Params: (int64,(uint256,uint8),int64,(uint256,uint8),(uint256,uint8))
	_, err = t.Params.Decode(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const GetSigningInfoCallStaticSize = 32

// GetSigningInfoCall represents an ABI tuple
type GetSigningInfoCall struct {
	ConsAddress common.Address
}

// EncodedSize returns the total encoded size of GetSigningInfoCall
func (t GetSigningInfoCall) EncodedSize() int {
	dynamicSize := 0

	return GetSigningInfoCallStaticSize + dynamicSize
}

// EncodeTo encodes GetSigningInfoCall to ABI bytes in the provided buffer
func (value GetSigningInfoCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetSigningInfoCallStaticSize // Start dynamic data after static section
	// Field ConsAddress: address
	if _, err := abi.EncodeAddress(value.ConsAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetSigningInfoCall to ABI bytes
func (value GetSigningInfoCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetSigningInfoCall from ABI bytes in the provided buffer
func (t *GetSigningInfoCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ConsAddress: address
	t.ConsAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetSigningInfoCall) GetMethodName() string {
	return "getSigningInfo"
}

// GetMethodID returns the function name
func (t GetSigningInfoCall) GetMethodID() [4]byte {
	return GetSigningInfoSelector
}

// EncodeWithSelector encodes getSigningInfo arguments to ABI bytes including function selector
func (t GetSigningInfoCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetSigningInfoSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetSigningInfoReturnStaticSize = 192

// GetSigningInfoReturn represents an ABI tuple
type GetSigningInfoReturn struct {
	SigningInfo SigningInfo
}

// EncodedSize returns the total encoded size of GetSigningInfoReturn
func (t GetSigningInfoReturn) EncodedSize() int {
	dynamicSize := 0

	return GetSigningInfoReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetSigningInfoReturn to ABI bytes in the provided buffer
func (value GetSigningInfoReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetSigningInfoReturnStaticSize // Start dynamic data after static section
	// Field SigningInfo: (address,int64,int64,int64,bool,int64)
	if _, err := value.SigningInfo.EncodeTo(buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetSigningInfoReturn to ABI bytes
func (value GetSigningInfoReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetSigningInfoReturn from ABI bytes in the provided buffer
func (t *GetSigningInfoReturn) Decode(data []byte) (int, error) {
	if len(data) < 192 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 192
	// Decode static field SigningInfo: (address,int64,int64,int64,bool,int64)
	_, err = t.SigningInfo.Decode(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const GetSigningInfosCallStaticSize = 32

// GetSigningInfosCall represents an ABI tuple
type GetSigningInfosCall struct {
	Pagination cmn.PageRequest
}

// EncodedSize returns the total encoded size of GetSigningInfosCall
func (t GetSigningInfosCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Pagination.EncodedSize()

	return GetSigningInfosCallStaticSize + dynamicSize
}

// EncodeTo encodes GetSigningInfosCall to ABI bytes in the provided buffer
func (value GetSigningInfosCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetSigningInfosCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Pagination: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Pagination.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetSigningInfosCall to ABI bytes
func (value GetSigningInfosCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetSigningInfosCall from ABI bytes in the provided buffer
func (t *GetSigningInfosCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Pagination
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Pagination")
		}
		n, err = t.Pagination.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetSigningInfosCall) GetMethodName() string {
	return "getSigningInfos"
}

// GetMethodID returns the function name
func (t GetSigningInfosCall) GetMethodID() [4]byte {
	return GetSigningInfosSelector
}

// EncodeWithSelector encodes getSigningInfos arguments to ABI bytes including function selector
func (t GetSigningInfosCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetSigningInfosSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetSigningInfosReturnStaticSize = 64

// GetSigningInfosReturn represents an ABI tuple
type GetSigningInfosReturn struct {
	SigningInfos []SigningInfo
	PageResponse PageResponse
}

// EncodedSize returns the total encoded size of GetSigningInfosReturn
func (t GetSigningInfosReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeSigningInfoSlice(t.SigningInfos)
	dynamicSize += t.PageResponse.EncodedSize()

	return GetSigningInfosReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetSigningInfosReturn to ABI bytes in the provided buffer
func (value GetSigningInfosReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetSigningInfosReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field SigningInfos: (address,int64,int64,int64,bool,int64)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeSigningInfoSlice(value.SigningInfos, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetSigningInfosReturn to ABI bytes
func (value GetSigningInfosReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetSigningInfosReturn from ABI bytes in the provided buffer
func (t *GetSigningInfosReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field SigningInfos
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field SigningInfos")
		}
		t.SigningInfos, n, err = DecodeSigningInfoSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const UnjailCallStaticSize = 32

// UnjailCall represents an ABI tuple
type UnjailCall struct {
	ValidatorAddress common.Address
}

// EncodedSize returns the total encoded size of UnjailCall
func (t UnjailCall) EncodedSize() int {
	dynamicSize := 0

	return UnjailCallStaticSize + dynamicSize
}

// EncodeTo encodes UnjailCall to ABI bytes in the provided buffer
func (value UnjailCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnjailCallStaticSize // Start dynamic data after static section
	// Field ValidatorAddress: address
	if _, err := abi.EncodeAddress(value.ValidatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UnjailCall to ABI bytes
func (value UnjailCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnjailCall from ABI bytes in the provided buffer
func (t *UnjailCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ValidatorAddress: address
	t.ValidatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t UnjailCall) GetMethodName() string {
	return "unjail"
}

// GetMethodID returns the function name
func (t UnjailCall) GetMethodID() [4]byte {
	return UnjailSelector
}

// EncodeWithSelector encodes unjail arguments to ABI bytes including function selector
func (t UnjailCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], UnjailSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const UnjailReturnStaticSize = 32

// UnjailReturn represents an ABI tuple
type UnjailReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of UnjailReturn
func (t UnjailReturn) EncodedSize() int {
	dynamicSize := 0

	return UnjailReturnStaticSize + dynamicSize
}

// EncodeTo encodes UnjailReturn to ABI bytes in the provided buffer
func (value UnjailReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnjailReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UnjailReturn to ABI bytes
func (value UnjailReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnjailReturn from ABI bytes in the provided buffer
func (t *UnjailReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// Event signatures
var (
	// ValidatorUnjailed(address)
	ValidatorUnjailedEventTopic = common.Hash{0x93, 0x90, 0xb4, 0x53, 0x42, 0x65, 0x57, 0xda, 0x5e, 0xbd, 0xc3, 0x1f, 0x19, 0xa3, 0x77, 0x53, 0xca, 0x04, 0xad, 0xdf, 0x65, 0x6d, 0x32, 0xf3, 0x52, 0x32, 0x21, 0x1b, 0xb2, 0xaf, 0x3f, 0x19}
)

// ValidatorUnjailedEvent represents the ValidatorUnjailed event
type ValidatorUnjailedEvent struct {
	ValidatorUnjailedEventIndexed
	ValidatorUnjailedEventData
}

// NewValidatorUnjailedEvent constructs a new ValidatorUnjailed event
func NewValidatorUnjailedEvent(
	validator common.Address,
) ValidatorUnjailedEvent {
	return ValidatorUnjailedEvent{
		ValidatorUnjailedEventIndexed: ValidatorUnjailedEventIndexed{
			Validator: validator,
		},
		ValidatorUnjailedEventData: ValidatorUnjailedEventData{},
	}
}

// GetEventName returns the event name
func (e ValidatorUnjailedEvent) GetEventName() string {
	return "ValidatorUnjailed"
}

// GetEventID returns the event ID (topic)
func (e ValidatorUnjailedEvent) GetEventID() common.Hash {
	return ValidatorUnjailedEventTopic
}

// ValidatorUnjailed represents an ABI event
type ValidatorUnjailedEventIndexed struct {
	Validator common.Address
}

// EncodeTopics encodes indexed fields of ValidatorUnjailed event to topics
func (e ValidatorUnjailedEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, ValidatorUnjailedEventTopic)
	{
		// Validator
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Validator, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of ValidatorUnjailed event from topics, ignore hash topics
func (e *ValidatorUnjailedEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for ValidatorUnjailed event: expected 2, got %d", len(topics))
	}
	if topics[0] != ValidatorUnjailedEventTopic {
		return fmt.Errorf("invalid event topic for ValidatorUnjailed event")
	}
	var err error
	e.Validator, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

type ValidatorUnjailedEventData struct {
	abi.EmptyTuple
}
