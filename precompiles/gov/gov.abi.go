// Code generated by go-abi. DO NOT EDIT.

package gov

import (
	"encoding/binary"
	"errors"
	"fmt"
	"io"

	cmn "github.com/cosmos/evm/precompiles/common"
	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// cancelProposal(address,uint64)
	CancelProposalSelector = [4]byte{0xa3, 0x3e, 0x30, 0x86}
	// deposit(address,uint64,(string,uint256)[])
	DepositSelector = [4]byte{0xb2, 0x4b, 0x03, 0x76}
	// getConstitution()
	GetConstitutionSelector = [4]byte{0xee, 0x05, 0xad, 0x82}
	// getDeposit(uint64,address)
	GetDepositSelector = [4]byte{0x77, 0x41, 0x27, 0x82}
	// getDeposits(uint64,(bytes,uint64,uint64,bool,bool))
	GetDepositsSelector = [4]byte{0x5e, 0x98, 0x2a, 0x9b}
	// getParams()
	GetParamsSelector = [4]byte{0x5e, 0x61, 0x5a, 0x6b}
	// getProposal(uint64)
	GetProposalSelector = [4]byte{0xf1, 0x61, 0x0a, 0x28}
	// getProposals(uint32,address,address,(bytes,uint64,uint64,bool,bool))
	GetProposalsSelector = [4]byte{0xb0, 0x1c, 0xee, 0xbc}
	// getTallyResult(uint64)
	GetTallyResultSelector = [4]byte{0xba, 0x66, 0xa6, 0x48}
	// getVote(uint64,address)
	GetVoteSelector = [4]byte{0x33, 0x5e, 0x4f, 0x9a}
	// getVotes(uint64,(bytes,uint64,uint64,bool,bool))
	GetVotesSelector = [4]byte{0xe2, 0xbb, 0x86, 0xda}
	// submitProposal(address,bytes,(string,uint256)[])
	SubmitProposalSelector = [4]byte{0xa8, 0xfd, 0xc9, 0x19}
	// vote(address,uint64,uint8,string)
	VoteSelector = [4]byte{0x9e, 0xc4, 0xd3, 0x63}
	// voteWeighted(address,uint64,(uint8,string)[],string)
	VoteWeightedSelector = [4]byte{0x8f, 0x1d, 0x5f, 0x6c}
)

// Big endian integer versions of function selectors
const (
	CancelProposalID  = 2738761862
	DepositID         = 2991260534
	GetConstitutionID = 3993349506
	GetDepositID      = 2000758658
	GetDepositsID     = 1587030683
	GetParamsID       = 1583438443
	GetProposalID     = 4049668648
	GetProposalsID    = 2954686140
	GetTallyResultID  = 3127289416
	GetVoteID         = 861818778
	GetVotesID        = 3803940570
	SubmitProposalID  = 2835204377
	VoteID            = 2663699299
	VoteWeightedID    = 2401066860
)

const DepositDataStaticSize = 96

// DepositData represents an ABI tuple
type DepositData struct {
	ProposalId uint64
	Depositor  common.Address
	Amount     []cmn.Coin
}

// EncodedSize returns the total encoded size of DepositData
func (t DepositData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return DepositDataStaticSize + dynamicSize
}

// EncodeTo encodes DepositData to ABI bytes in the provided buffer
func (value DepositData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[32:]); err != nil {
		return 0, err
	}

	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DepositData to ABI bytes
func (value DepositData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositData from ABI bytes in the provided buffer
func (t *DepositData) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ParamsStaticSize = 512

// Params represents an ABI tuple
type Params struct {
	VotingPeriod               int64
	MinDeposit                 []cmn.Coin
	MaxDepositPeriod           int64
	Quorum                     string
	Threshold                  string
	VetoThreshold              string
	MinInitialDepositRatio     string
	ProposalCancelRatio        string
	ProposalCancelDest         string
	ExpeditedVotingPeriod      int64
	ExpeditedThreshold         string
	ExpeditedMinDeposit        []cmn.Coin
	BurnVoteQuorum             bool
	BurnProposalDepositPrevote bool
	BurnVoteVeto               bool
	MinDepositRatio            string
}

// EncodedSize returns the total encoded size of Params
func (t Params) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.MinDeposit)
	dynamicSize += abi.SizeString(t.Quorum)
	dynamicSize += abi.SizeString(t.Threshold)
	dynamicSize += abi.SizeString(t.VetoThreshold)
	dynamicSize += abi.SizeString(t.MinInitialDepositRatio)
	dynamicSize += abi.SizeString(t.ProposalCancelRatio)
	dynamicSize += abi.SizeString(t.ProposalCancelDest)
	dynamicSize += abi.SizeString(t.ExpeditedThreshold)
	dynamicSize += SizeCoinSlice(t.ExpeditedMinDeposit)
	dynamicSize += abi.SizeString(t.MinDepositRatio)

	return ParamsStaticSize + dynamicSize
}

// EncodeTo encodes Params to ABI bytes in the provided buffer
func (value Params) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ParamsStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field VotingPeriod: int64
	if _, err := abi.EncodeInt64(value.VotingPeriod, buf[0:]); err != nil {
		return 0, err
	}

	// Field MinDeposit: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.MinDeposit, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field MaxDepositPeriod: int64
	if _, err := abi.EncodeInt64(value.MaxDepositPeriod, buf[64:]); err != nil {
		return 0, err
	}

	// Field Quorum: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Quorum, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Threshold: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[128+24:128+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Threshold, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field VetoThreshold: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[160+24:160+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.VetoThreshold, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field MinInitialDepositRatio: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[192+24:192+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.MinInitialDepositRatio, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ProposalCancelRatio: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[224+24:224+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ProposalCancelRatio, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ProposalCancelDest: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[256+24:256+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ProposalCancelDest, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ExpeditedVotingPeriod: int64
	if _, err := abi.EncodeInt64(value.ExpeditedVotingPeriod, buf[288:]); err != nil {
		return 0, err
	}

	// Field ExpeditedThreshold: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[320+24:320+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ExpeditedThreshold, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ExpeditedMinDeposit: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[352+24:352+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.ExpeditedMinDeposit, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field BurnVoteQuorum: bool
	if _, err := abi.EncodeBool(value.BurnVoteQuorum, buf[384:]); err != nil {
		return 0, err
	}

	// Field BurnProposalDepositPrevote: bool
	if _, err := abi.EncodeBool(value.BurnProposalDepositPrevote, buf[416:]); err != nil {
		return 0, err
	}

	// Field BurnVoteVeto: bool
	if _, err := abi.EncodeBool(value.BurnVoteVeto, buf[448:]); err != nil {
		return 0, err
	}

	// Field MinDepositRatio: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[480+24:480+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.MinDepositRatio, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes Params to ABI bytes
func (value Params) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Params from ABI bytes in the provided buffer
func (t *Params) Decode(data []byte) (int, error) {
	if len(data) < 512 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 512
	// Decode static field VotingPeriod: int64
	t.VotingPeriod, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field MinDeposit
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field MinDeposit")
		}
		t.MinDeposit, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field MaxDepositPeriod: int64
	t.MaxDepositPeriod, _, err = abi.DecodeInt64(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Quorum
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Quorum")
		}
		t.Quorum, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Threshold
	{
		offset := int(binary.BigEndian.Uint64(data[128+24 : 128+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Threshold")
		}
		t.Threshold, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field VetoThreshold
	{
		offset := int(binary.BigEndian.Uint64(data[160+24 : 160+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field VetoThreshold")
		}
		t.VetoThreshold, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field MinInitialDepositRatio
	{
		offset := int(binary.BigEndian.Uint64(data[192+24 : 192+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field MinInitialDepositRatio")
		}
		t.MinInitialDepositRatio, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ProposalCancelRatio
	{
		offset := int(binary.BigEndian.Uint64(data[224+24 : 224+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ProposalCancelRatio")
		}
		t.ProposalCancelRatio, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ProposalCancelDest
	{
		offset := int(binary.BigEndian.Uint64(data[256+24 : 256+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ProposalCancelDest")
		}
		t.ProposalCancelDest, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field ExpeditedVotingPeriod: int64
	t.ExpeditedVotingPeriod, _, err = abi.DecodeInt64(data[288:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ExpeditedThreshold
	{
		offset := int(binary.BigEndian.Uint64(data[320+24 : 320+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ExpeditedThreshold")
		}
		t.ExpeditedThreshold, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ExpeditedMinDeposit
	{
		offset := int(binary.BigEndian.Uint64(data[352+24 : 352+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ExpeditedMinDeposit")
		}
		t.ExpeditedMinDeposit, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field BurnVoteQuorum: bool
	t.BurnVoteQuorum, _, err = abi.DecodeBool(data[384:])
	if err != nil {
		return 0, err
	}
	// Decode static field BurnProposalDepositPrevote: bool
	t.BurnProposalDepositPrevote, _, err = abi.DecodeBool(data[416:])
	if err != nil {
		return 0, err
	}
	// Decode static field BurnVoteVeto: bool
	t.BurnVoteVeto, _, err = abi.DecodeBool(data[448:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field MinDepositRatio
	{
		offset := int(binary.BigEndian.Uint64(data[480+24 : 480+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field MinDepositRatio")
		}
		t.MinDepositRatio, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ProposalDataStaticSize = 416

// ProposalData represents an ABI tuple
type ProposalData struct {
	Id               uint64
	Messages         []string
	Status           uint32
	FinalTallyResult TallyResultData
	SubmitTime       uint64
	DepositEndTime   uint64
	TotalDeposit     []cmn.Coin
	VotingStartTime  uint64
	VotingEndTime    uint64
	Metadata         string
	Title            string
	Summary          string
	Proposer         common.Address
}

// EncodedSize returns the total encoded size of ProposalData
func (t ProposalData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeStringSlice(t.Messages)
	dynamicSize += t.FinalTallyResult.EncodedSize()
	dynamicSize += SizeCoinSlice(t.TotalDeposit)
	dynamicSize += abi.SizeString(t.Metadata)
	dynamicSize += abi.SizeString(t.Title)
	dynamicSize += abi.SizeString(t.Summary)

	return ProposalDataStaticSize + dynamicSize
}

// EncodeTo encodes ProposalData to ABI bytes in the provided buffer
func (value ProposalData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ProposalDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Id: uint64
	if _, err := abi.EncodeUint64(value.Id, buf[0:]); err != nil {
		return 0, err
	}

	// Field Messages: string[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeStringSlice(value.Messages, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Status: uint32
	if _, err := abi.EncodeUint32(value.Status, buf[64:]); err != nil {
		return 0, err
	}

	// Field FinalTallyResult: (string,string,string,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.FinalTallyResult.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field SubmitTime: uint64
	if _, err := abi.EncodeUint64(value.SubmitTime, buf[128:]); err != nil {
		return 0, err
	}

	// Field DepositEndTime: uint64
	if _, err := abi.EncodeUint64(value.DepositEndTime, buf[160:]); err != nil {
		return 0, err
	}

	// Field TotalDeposit: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[192+24:192+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.TotalDeposit, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field VotingStartTime: uint64
	if _, err := abi.EncodeUint64(value.VotingStartTime, buf[224:]); err != nil {
		return 0, err
	}

	// Field VotingEndTime: uint64
	if _, err := abi.EncodeUint64(value.VotingEndTime, buf[256:]); err != nil {
		return 0, err
	}

	// Field Metadata: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[288+24:288+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Metadata, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Title: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[320+24:320+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Title, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Summary: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[352+24:352+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Summary, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Proposer: address
	if _, err := abi.EncodeAddress(value.Proposer, buf[384:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ProposalData to ABI bytes
func (value ProposalData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ProposalData from ABI bytes in the provided buffer
func (t *ProposalData) Decode(data []byte) (int, error) {
	if len(data) < 416 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 416
	// Decode static field Id: uint64
	t.Id, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Messages
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Messages")
		}
		t.Messages, n, err = abi.DecodeStringSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Status: uint32
	t.Status, _, err = abi.DecodeUint32(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field FinalTallyResult
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field FinalTallyResult")
		}
		n, err = t.FinalTallyResult.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field SubmitTime: uint64
	t.SubmitTime, _, err = abi.DecodeUint64(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field DepositEndTime: uint64
	t.DepositEndTime, _, err = abi.DecodeUint64(data[160:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field TotalDeposit
	{
		offset := int(binary.BigEndian.Uint64(data[192+24 : 192+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field TotalDeposit")
		}
		t.TotalDeposit, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field VotingStartTime: uint64
	t.VotingStartTime, _, err = abi.DecodeUint64(data[224:])
	if err != nil {
		return 0, err
	}
	// Decode static field VotingEndTime: uint64
	t.VotingEndTime, _, err = abi.DecodeUint64(data[256:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Metadata
	{
		offset := int(binary.BigEndian.Uint64(data[288+24 : 288+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Metadata")
		}
		t.Metadata, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Title
	{
		offset := int(binary.BigEndian.Uint64(data[320+24 : 320+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Title")
		}
		t.Title, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Summary
	{
		offset := int(binary.BigEndian.Uint64(data[352+24 : 352+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Summary")
		}
		t.Summary, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Proposer: address
	t.Proposer, _, err = abi.DecodeAddress(data[384:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const TallyResultDataStaticSize = 128

// TallyResultData represents an ABI tuple
type TallyResultData struct {
	Yes        string
	Abstain    string
	No         string
	NoWithVeto string
}

// EncodedSize returns the total encoded size of TallyResultData
func (t TallyResultData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Yes)
	dynamicSize += abi.SizeString(t.Abstain)
	dynamicSize += abi.SizeString(t.No)
	dynamicSize += abi.SizeString(t.NoWithVeto)

	return TallyResultDataStaticSize + dynamicSize
}

// EncodeTo encodes TallyResultData to ABI bytes in the provided buffer
func (value TallyResultData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := TallyResultDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Yes: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Yes, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Abstain: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Abstain, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field No: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.No, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field NoWithVeto: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.NoWithVeto, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes TallyResultData to ABI bytes
func (value TallyResultData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes TallyResultData from ABI bytes in the provided buffer
func (t *TallyResultData) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode dynamic field Yes
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Yes")
		}
		t.Yes, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Abstain
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Abstain")
		}
		t.Abstain, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field No
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field No")
		}
		t.No, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field NoWithVeto
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field NoWithVeto")
		}
		t.NoWithVeto, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const WeightedVoteStaticSize = 128

// WeightedVote represents an ABI tuple
type WeightedVote struct {
	ProposalId uint64
	Voter      common.Address
	Options    []WeightedVoteOption
	Metadata   string
}

// EncodedSize returns the total encoded size of WeightedVote
func (t WeightedVote) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeWeightedVoteOptionSlice(t.Options)
	dynamicSize += abi.SizeString(t.Metadata)

	return WeightedVoteStaticSize + dynamicSize
}

// EncodeTo encodes WeightedVote to ABI bytes in the provided buffer
func (value WeightedVote) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WeightedVoteStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Voter: address
	if _, err := abi.EncodeAddress(value.Voter, buf[32:]); err != nil {
		return 0, err
	}

	// Field Options: (uint8,string)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeWeightedVoteOptionSlice(value.Options, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Metadata: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Metadata, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WeightedVote to ABI bytes
func (value WeightedVote) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WeightedVote from ABI bytes in the provided buffer
func (t *WeightedVote) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Voter: address
	t.Voter, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Options
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Options")
		}
		t.Options, n, err = DecodeWeightedVoteOptionSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Metadata
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Metadata")
		}
		t.Metadata, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const WeightedVoteOptionStaticSize = 64

// WeightedVoteOption represents an ABI tuple
type WeightedVoteOption struct {
	Option uint8
	Weight string
}

// EncodedSize returns the total encoded size of WeightedVoteOption
func (t WeightedVoteOption) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Weight)

	return WeightedVoteOptionStaticSize + dynamicSize
}

// EncodeTo encodes WeightedVoteOption to ABI bytes in the provided buffer
func (value WeightedVoteOption) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WeightedVoteOptionStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Option: uint8
	if _, err := abi.EncodeUint8(value.Option, buf[0:]); err != nil {
		return 0, err
	}

	// Field Weight: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Weight, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WeightedVoteOption to ABI bytes
func (value WeightedVoteOption) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WeightedVoteOption from ABI bytes in the provided buffer
func (t *WeightedVoteOption) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field Option: uint8
	t.Option, _, err = abi.DecodeUint8(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Weight
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Weight")
		}
		t.Weight, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// EncodeCoinSlice encodes (string,uint256)[] to ABI bytes
func EncodeCoinSlice(value []cmn.Coin, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeDepositDataSlice encodes (uint64,address,(string,uint256)[])[] to ABI bytes
func EncodeDepositDataSlice(value []DepositData, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeProposalDataSlice encodes (uint64,string[],uint32,(string,string,string,string),uint64,uint64,(string,uint256)[],uint64,uint64,string,string,string,address)[] to ABI bytes
func EncodeProposalDataSlice(value []ProposalData, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeWeightedVoteOptionSlice encodes (uint8,string)[] to ABI bytes
func EncodeWeightedVoteOptionSlice(value []WeightedVoteOption, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeWeightedVoteSlice encodes (uint64,address,(uint8,string)[],string)[] to ABI bytes
func EncodeWeightedVoteSlice(value []WeightedVote, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// SizeCoinSlice returns the encoded size of (string,uint256)[]
func SizeCoinSlice(value []cmn.Coin) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeDepositDataSlice returns the encoded size of (uint64,address,(string,uint256)[])[]
func SizeDepositDataSlice(value []DepositData) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeProposalDataSlice returns the encoded size of (uint64,string[],uint32,(string,string,string,string),uint64,uint64,(string,uint256)[],uint64,uint64,string,string,string,address)[]
func SizeProposalDataSlice(value []ProposalData) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeWeightedVoteOptionSlice returns the encoded size of (uint8,string)[]
func SizeWeightedVoteOptionSlice(value []WeightedVoteOption) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeWeightedVoteSlice returns the encoded size of (uint64,address,(uint8,string)[],string)[]
func SizeWeightedVoteSlice(value []WeightedVote) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// DecodeCoinSlice decodes (string,uint256)[] from ABI bytes
func DecodeCoinSlice(data []byte) ([]cmn.Coin, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]cmn.Coin, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeDepositDataSlice decodes (uint64,address,(string,uint256)[])[] from ABI bytes
func DecodeDepositDataSlice(data []byte) ([]DepositData, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]DepositData, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeProposalDataSlice decodes (uint64,string[],uint32,(string,string,string,string),uint64,uint64,(string,uint256)[],uint64,uint64,string,string,string,address)[] from ABI bytes
func DecodeProposalDataSlice(data []byte) ([]ProposalData, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]ProposalData, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeWeightedVoteOptionSlice decodes (uint8,string)[] from ABI bytes
func DecodeWeightedVoteOptionSlice(data []byte) ([]WeightedVoteOption, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]WeightedVoteOption, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeWeightedVoteSlice decodes (uint64,address,(uint8,string)[],string)[] from ABI bytes
func DecodeWeightedVoteSlice(data []byte) ([]WeightedVote, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]WeightedVote, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

const CancelProposalCallStaticSize = 64

// CancelProposalCall represents an ABI tuple
type CancelProposalCall struct {
	Proposer   common.Address
	ProposalId uint64
}

// EncodedSize returns the total encoded size of CancelProposalCall
func (t CancelProposalCall) EncodedSize() int {
	dynamicSize := 0

	return CancelProposalCallStaticSize + dynamicSize
}

// EncodeTo encodes CancelProposalCall to ABI bytes in the provided buffer
func (value CancelProposalCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelProposalCallStaticSize // Start dynamic data after static section
	// Field Proposer: address
	if _, err := abi.EncodeAddress(value.Proposer, buf[0:]); err != nil {
		return 0, err
	}

	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelProposalCall to ABI bytes
func (value CancelProposalCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelProposalCall from ABI bytes in the provided buffer
func (t *CancelProposalCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Proposer: address
	t.Proposer, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t CancelProposalCall) GetMethodName() string {
	return "cancelProposal"
}

// GetMethodID returns the function name
func (t CancelProposalCall) GetMethodID() [4]byte {
	return CancelProposalSelector
}

// EncodeWithSelector encodes cancelProposal arguments to ABI bytes including function selector
func (t CancelProposalCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], CancelProposalSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const CancelProposalReturnStaticSize = 32

// CancelProposalReturn represents an ABI tuple
type CancelProposalReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of CancelProposalReturn
func (t CancelProposalReturn) EncodedSize() int {
	dynamicSize := 0

	return CancelProposalReturnStaticSize + dynamicSize
}

// EncodeTo encodes CancelProposalReturn to ABI bytes in the provided buffer
func (value CancelProposalReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelProposalReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelProposalReturn to ABI bytes
func (value CancelProposalReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelProposalReturn from ABI bytes in the provided buffer
func (t *CancelProposalReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const DepositCallStaticSize = 96

// DepositCall represents an ABI tuple
type DepositCall struct {
	Depositor  common.Address
	ProposalId uint64
	Amount     []cmn.Coin
}

// EncodedSize returns the total encoded size of DepositCall
func (t DepositCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return DepositCallStaticSize + dynamicSize
}

// EncodeTo encodes DepositCall to ABI bytes in the provided buffer
func (value DepositCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[0:]); err != nil {
		return 0, err
	}

	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[32:]); err != nil {
		return 0, err
	}

	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DepositCall to ABI bytes
func (value DepositCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositCall from ABI bytes in the provided buffer
func (t *DepositCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DepositCall) GetMethodName() string {
	return "deposit"
}

// GetMethodID returns the function name
func (t DepositCall) GetMethodID() [4]byte {
	return DepositSelector
}

// EncodeWithSelector encodes deposit arguments to ABI bytes including function selector
func (t DepositCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DepositSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DepositReturnStaticSize = 32

// DepositReturn represents an ABI tuple
type DepositReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of DepositReturn
func (t DepositReturn) EncodedSize() int {
	dynamicSize := 0

	return DepositReturnStaticSize + dynamicSize
}

// EncodeTo encodes DepositReturn to ABI bytes in the provided buffer
func (value DepositReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DepositReturn to ABI bytes
func (value DepositReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositReturn from ABI bytes in the provided buffer
func (t *DepositReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetConstitutionCall represents the input arguments for getConstitution function
type GetConstitutionCall struct {
	abi.EmptyTuple
}

// GetMethodName returns the function name
func (t GetConstitutionCall) GetMethodName() string {
	return "getConstitution"
}

// GetMethodID returns the function name
func (t GetConstitutionCall) GetMethodID() [4]byte {
	return GetConstitutionSelector
}

// EncodeWithSelector encodes getConstitution arguments to ABI bytes including function selector
func (t GetConstitutionCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetConstitutionSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetConstitutionReturnStaticSize = 32

// GetConstitutionReturn represents an ABI tuple
type GetConstitutionReturn struct {
	Constitution string
}

// EncodedSize returns the total encoded size of GetConstitutionReturn
func (t GetConstitutionReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Constitution)

	return GetConstitutionReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetConstitutionReturn to ABI bytes in the provided buffer
func (value GetConstitutionReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetConstitutionReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Constitution: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Constitution, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetConstitutionReturn to ABI bytes
func (value GetConstitutionReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetConstitutionReturn from ABI bytes in the provided buffer
func (t *GetConstitutionReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Constitution
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Constitution")
		}
		t.Constitution, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetDepositCallStaticSize = 64

// GetDepositCall represents an ABI tuple
type GetDepositCall struct {
	ProposalId uint64
	Depositor  common.Address
}

// EncodedSize returns the total encoded size of GetDepositCall
func (t GetDepositCall) EncodedSize() int {
	dynamicSize := 0

	return GetDepositCallStaticSize + dynamicSize
}

// EncodeTo encodes GetDepositCall to ABI bytes in the provided buffer
func (value GetDepositCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetDepositCallStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetDepositCall to ABI bytes
func (value GetDepositCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetDepositCall from ABI bytes in the provided buffer
func (t *GetDepositCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetDepositCall) GetMethodName() string {
	return "getDeposit"
}

// GetMethodID returns the function name
func (t GetDepositCall) GetMethodID() [4]byte {
	return GetDepositSelector
}

// EncodeWithSelector encodes getDeposit arguments to ABI bytes including function selector
func (t GetDepositCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetDepositSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetDepositReturnStaticSize = 32

// GetDepositReturn represents an ABI tuple
type GetDepositReturn struct {
	Deposit DepositData
}

// EncodedSize returns the total encoded size of GetDepositReturn
func (t GetDepositReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Deposit.EncodedSize()

	return GetDepositReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetDepositReturn to ABI bytes in the provided buffer
func (value GetDepositReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetDepositReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Deposit: (uint64,address,(string,uint256)[])
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Deposit.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetDepositReturn to ABI bytes
func (value GetDepositReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetDepositReturn from ABI bytes in the provided buffer
func (t *GetDepositReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Deposit
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Deposit")
		}
		n, err = t.Deposit.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetDepositsCallStaticSize = 64

// GetDepositsCall represents an ABI tuple
type GetDepositsCall struct {
	ProposalId uint64
	Pagination cmn.PageRequest
}

// EncodedSize returns the total encoded size of GetDepositsCall
func (t GetDepositsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Pagination.EncodedSize()

	return GetDepositsCallStaticSize + dynamicSize
}

// EncodeTo encodes GetDepositsCall to ABI bytes in the provided buffer
func (value GetDepositsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetDepositsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Pagination: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Pagination.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetDepositsCall to ABI bytes
func (value GetDepositsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetDepositsCall from ABI bytes in the provided buffer
func (t *GetDepositsCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Pagination
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Pagination")
		}
		n, err = t.Pagination.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetDepositsCall) GetMethodName() string {
	return "getDeposits"
}

// GetMethodID returns the function name
func (t GetDepositsCall) GetMethodID() [4]byte {
	return GetDepositsSelector
}

// EncodeWithSelector encodes getDeposits arguments to ABI bytes including function selector
func (t GetDepositsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetDepositsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetDepositsReturnStaticSize = 64

// GetDepositsReturn represents an ABI tuple
type GetDepositsReturn struct {
	Deposits     []DepositData
	PageResponse cmn.PageResponse
}

// EncodedSize returns the total encoded size of GetDepositsReturn
func (t GetDepositsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDepositDataSlice(t.Deposits)
	dynamicSize += t.PageResponse.EncodedSize()

	return GetDepositsReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetDepositsReturn to ABI bytes in the provided buffer
func (value GetDepositsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetDepositsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Deposits: (uint64,address,(string,uint256)[])[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDepositDataSlice(value.Deposits, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetDepositsReturn to ABI bytes
func (value GetDepositsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetDepositsReturn from ABI bytes in the provided buffer
func (t *GetDepositsReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Deposits
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Deposits")
		}
		t.Deposits, n, err = DecodeDepositDataSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetParamsCall represents the input arguments for getParams function
type GetParamsCall struct {
	abi.EmptyTuple
}

// GetMethodName returns the function name
func (t GetParamsCall) GetMethodName() string {
	return "getParams"
}

// GetMethodID returns the function name
func (t GetParamsCall) GetMethodID() [4]byte {
	return GetParamsSelector
}

// EncodeWithSelector encodes getParams arguments to ABI bytes including function selector
func (t GetParamsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetParamsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetParamsReturnStaticSize = 32

// GetParamsReturn represents an ABI tuple
type GetParamsReturn struct {
	Params Params
}

// EncodedSize returns the total encoded size of GetParamsReturn
func (t GetParamsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Params.EncodedSize()

	return GetParamsReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetParamsReturn to ABI bytes in the provided buffer
func (value GetParamsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetParamsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Params: (int64,(string,uint256)[],int64,string,string,string,string,string,string,int64,string,(string,uint256)[],bool,bool,bool,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Params.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetParamsReturn to ABI bytes
func (value GetParamsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetParamsReturn from ABI bytes in the provided buffer
func (t *GetParamsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Params
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Params")
		}
		n, err = t.Params.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetProposalCallStaticSize = 32

// GetProposalCall represents an ABI tuple
type GetProposalCall struct {
	ProposalId uint64
}

// EncodedSize returns the total encoded size of GetProposalCall
func (t GetProposalCall) EncodedSize() int {
	dynamicSize := 0

	return GetProposalCallStaticSize + dynamicSize
}

// EncodeTo encodes GetProposalCall to ABI bytes in the provided buffer
func (value GetProposalCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetProposalCallStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetProposalCall to ABI bytes
func (value GetProposalCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetProposalCall from ABI bytes in the provided buffer
func (t *GetProposalCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetProposalCall) GetMethodName() string {
	return "getProposal"
}

// GetMethodID returns the function name
func (t GetProposalCall) GetMethodID() [4]byte {
	return GetProposalSelector
}

// EncodeWithSelector encodes getProposal arguments to ABI bytes including function selector
func (t GetProposalCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetProposalSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetProposalReturnStaticSize = 32

// GetProposalReturn represents an ABI tuple
type GetProposalReturn struct {
	Proposal ProposalData
}

// EncodedSize returns the total encoded size of GetProposalReturn
func (t GetProposalReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Proposal.EncodedSize()

	return GetProposalReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetProposalReturn to ABI bytes in the provided buffer
func (value GetProposalReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetProposalReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Proposal: (uint64,string[],uint32,(string,string,string,string),uint64,uint64,(string,uint256)[],uint64,uint64,string,string,string,address)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Proposal.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetProposalReturn to ABI bytes
func (value GetProposalReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetProposalReturn from ABI bytes in the provided buffer
func (t *GetProposalReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Proposal
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Proposal")
		}
		n, err = t.Proposal.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetProposalsCallStaticSize = 128

// GetProposalsCall represents an ABI tuple
type GetProposalsCall struct {
	ProposalStatus uint32
	Voter          common.Address
	Depositor      common.Address
	Pagination     cmn.PageRequest
}

// EncodedSize returns the total encoded size of GetProposalsCall
func (t GetProposalsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Pagination.EncodedSize()

	return GetProposalsCallStaticSize + dynamicSize
}

// EncodeTo encodes GetProposalsCall to ABI bytes in the provided buffer
func (value GetProposalsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetProposalsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalStatus: uint32
	if _, err := abi.EncodeUint32(value.ProposalStatus, buf[0:]); err != nil {
		return 0, err
	}

	// Field Voter: address
	if _, err := abi.EncodeAddress(value.Voter, buf[32:]); err != nil {
		return 0, err
	}

	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[64:]); err != nil {
		return 0, err
	}

	// Field Pagination: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Pagination.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetProposalsCall to ABI bytes
func (value GetProposalsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetProposalsCall from ABI bytes in the provided buffer
func (t *GetProposalsCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field ProposalStatus: uint32
	t.ProposalStatus, _, err = abi.DecodeUint32(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Voter: address
	t.Voter, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Pagination
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Pagination")
		}
		n, err = t.Pagination.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetProposalsCall) GetMethodName() string {
	return "getProposals"
}

// GetMethodID returns the function name
func (t GetProposalsCall) GetMethodID() [4]byte {
	return GetProposalsSelector
}

// EncodeWithSelector encodes getProposals arguments to ABI bytes including function selector
func (t GetProposalsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetProposalsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetProposalsReturnStaticSize = 64

// GetProposalsReturn represents an ABI tuple
type GetProposalsReturn struct {
	Proposals    []ProposalData
	PageResponse cmn.PageResponse
}

// EncodedSize returns the total encoded size of GetProposalsReturn
func (t GetProposalsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeProposalDataSlice(t.Proposals)
	dynamicSize += t.PageResponse.EncodedSize()

	return GetProposalsReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetProposalsReturn to ABI bytes in the provided buffer
func (value GetProposalsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetProposalsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Proposals: (uint64,string[],uint32,(string,string,string,string),uint64,uint64,(string,uint256)[],uint64,uint64,string,string,string,address)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeProposalDataSlice(value.Proposals, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetProposalsReturn to ABI bytes
func (value GetProposalsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetProposalsReturn from ABI bytes in the provided buffer
func (t *GetProposalsReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Proposals
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Proposals")
		}
		t.Proposals, n, err = DecodeProposalDataSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetTallyResultCallStaticSize = 32

// GetTallyResultCall represents an ABI tuple
type GetTallyResultCall struct {
	ProposalId uint64
}

// EncodedSize returns the total encoded size of GetTallyResultCall
func (t GetTallyResultCall) EncodedSize() int {
	dynamicSize := 0

	return GetTallyResultCallStaticSize + dynamicSize
}

// EncodeTo encodes GetTallyResultCall to ABI bytes in the provided buffer
func (value GetTallyResultCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetTallyResultCallStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetTallyResultCall to ABI bytes
func (value GetTallyResultCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetTallyResultCall from ABI bytes in the provided buffer
func (t *GetTallyResultCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetTallyResultCall) GetMethodName() string {
	return "getTallyResult"
}

// GetMethodID returns the function name
func (t GetTallyResultCall) GetMethodID() [4]byte {
	return GetTallyResultSelector
}

// EncodeWithSelector encodes getTallyResult arguments to ABI bytes including function selector
func (t GetTallyResultCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetTallyResultSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetTallyResultReturnStaticSize = 32

// GetTallyResultReturn represents an ABI tuple
type GetTallyResultReturn struct {
	TallyResult TallyResultData
}

// EncodedSize returns the total encoded size of GetTallyResultReturn
func (t GetTallyResultReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.TallyResult.EncodedSize()

	return GetTallyResultReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetTallyResultReturn to ABI bytes in the provided buffer
func (value GetTallyResultReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetTallyResultReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field TallyResult: (string,string,string,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.TallyResult.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetTallyResultReturn to ABI bytes
func (value GetTallyResultReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetTallyResultReturn from ABI bytes in the provided buffer
func (t *GetTallyResultReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field TallyResult
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field TallyResult")
		}
		n, err = t.TallyResult.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetVoteCallStaticSize = 64

// GetVoteCall represents an ABI tuple
type GetVoteCall struct {
	ProposalId uint64
	Voter      common.Address
}

// EncodedSize returns the total encoded size of GetVoteCall
func (t GetVoteCall) EncodedSize() int {
	dynamicSize := 0

	return GetVoteCallStaticSize + dynamicSize
}

// EncodeTo encodes GetVoteCall to ABI bytes in the provided buffer
func (value GetVoteCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetVoteCallStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Voter: address
	if _, err := abi.EncodeAddress(value.Voter, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes GetVoteCall to ABI bytes
func (value GetVoteCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetVoteCall from ABI bytes in the provided buffer
func (t *GetVoteCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Voter: address
	t.Voter, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetVoteCall) GetMethodName() string {
	return "getVote"
}

// GetMethodID returns the function name
func (t GetVoteCall) GetMethodID() [4]byte {
	return GetVoteSelector
}

// EncodeWithSelector encodes getVote arguments to ABI bytes including function selector
func (t GetVoteCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetVoteSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetVoteReturnStaticSize = 32

// GetVoteReturn represents an ABI tuple
type GetVoteReturn struct {
	Vote WeightedVote
}

// EncodedSize returns the total encoded size of GetVoteReturn
func (t GetVoteReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Vote.EncodedSize()

	return GetVoteReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetVoteReturn to ABI bytes in the provided buffer
func (value GetVoteReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetVoteReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Vote: (uint64,address,(uint8,string)[],string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Vote.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetVoteReturn to ABI bytes
func (value GetVoteReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetVoteReturn from ABI bytes in the provided buffer
func (t *GetVoteReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Vote
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Vote")
		}
		n, err = t.Vote.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const GetVotesCallStaticSize = 64

// GetVotesCall represents an ABI tuple
type GetVotesCall struct {
	ProposalId uint64
	Pagination cmn.PageRequest
}

// EncodedSize returns the total encoded size of GetVotesCall
func (t GetVotesCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Pagination.EncodedSize()

	return GetVotesCallStaticSize + dynamicSize
}

// EncodeTo encodes GetVotesCall to ABI bytes in the provided buffer
func (value GetVotesCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetVotesCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Pagination: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Pagination.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetVotesCall to ABI bytes
func (value GetVotesCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetVotesCall from ABI bytes in the provided buffer
func (t *GetVotesCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Pagination
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Pagination")
		}
		n, err = t.Pagination.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t GetVotesCall) GetMethodName() string {
	return "getVotes"
}

// GetMethodID returns the function name
func (t GetVotesCall) GetMethodID() [4]byte {
	return GetVotesSelector
}

// EncodeWithSelector encodes getVotes arguments to ABI bytes including function selector
func (t GetVotesCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], GetVotesSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const GetVotesReturnStaticSize = 64

// GetVotesReturn represents an ABI tuple
type GetVotesReturn struct {
	Votes        []WeightedVote
	PageResponse cmn.PageResponse
}

// EncodedSize returns the total encoded size of GetVotesReturn
func (t GetVotesReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeWeightedVoteSlice(t.Votes)
	dynamicSize += t.PageResponse.EncodedSize()

	return GetVotesReturnStaticSize + dynamicSize
}

// EncodeTo encodes GetVotesReturn to ABI bytes in the provided buffer
func (value GetVotesReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := GetVotesReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Votes: (uint64,address,(uint8,string)[],string)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeWeightedVoteSlice(value.Votes, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes GetVotesReturn to ABI bytes
func (value GetVotesReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes GetVotesReturn from ABI bytes in the provided buffer
func (t *GetVotesReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Votes
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Votes")
		}
		t.Votes, n, err = DecodeWeightedVoteSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const SubmitProposalCallStaticSize = 96

// SubmitProposalCall represents an ABI tuple
type SubmitProposalCall struct {
	Proposer     common.Address
	JsonProposal []byte
	Deposit      []cmn.Coin
}

// EncodedSize returns the total encoded size of SubmitProposalCall
func (t SubmitProposalCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeBytes(t.JsonProposal)
	dynamicSize += SizeCoinSlice(t.Deposit)

	return SubmitProposalCallStaticSize + dynamicSize
}

// EncodeTo encodes SubmitProposalCall to ABI bytes in the provided buffer
func (value SubmitProposalCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SubmitProposalCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Proposer: address
	if _, err := abi.EncodeAddress(value.Proposer, buf[0:]); err != nil {
		return 0, err
	}

	// Field JsonProposal: bytes
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeBytes(value.JsonProposal, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Deposit: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Deposit, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes SubmitProposalCall to ABI bytes
func (value SubmitProposalCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SubmitProposalCall from ABI bytes in the provided buffer
func (t *SubmitProposalCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field Proposer: address
	t.Proposer, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field JsonProposal
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field JsonProposal")
		}
		t.JsonProposal, n, err = abi.DecodeBytes(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Deposit
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Deposit")
		}
		t.Deposit, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t SubmitProposalCall) GetMethodName() string {
	return "submitProposal"
}

// GetMethodID returns the function name
func (t SubmitProposalCall) GetMethodID() [4]byte {
	return SubmitProposalSelector
}

// EncodeWithSelector encodes submitProposal arguments to ABI bytes including function selector
func (t SubmitProposalCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], SubmitProposalSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const SubmitProposalReturnStaticSize = 32

// SubmitProposalReturn represents an ABI tuple
type SubmitProposalReturn struct {
	ProposalId uint64
}

// EncodedSize returns the total encoded size of SubmitProposalReturn
func (t SubmitProposalReturn) EncodedSize() int {
	dynamicSize := 0

	return SubmitProposalReturnStaticSize + dynamicSize
}

// EncodeTo encodes SubmitProposalReturn to ABI bytes in the provided buffer
func (value SubmitProposalReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SubmitProposalReturnStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SubmitProposalReturn to ABI bytes
func (value SubmitProposalReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SubmitProposalReturn from ABI bytes in the provided buffer
func (t *SubmitProposalReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const VoteCallStaticSize = 128

// VoteCall represents an ABI tuple
type VoteCall struct {
	Voter      common.Address
	ProposalId uint64
	Option     uint8
	Metadata   string
}

// EncodedSize returns the total encoded size of VoteCall
func (t VoteCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Metadata)

	return VoteCallStaticSize + dynamicSize
}

// EncodeTo encodes VoteCall to ABI bytes in the provided buffer
func (value VoteCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Voter: address
	if _, err := abi.EncodeAddress(value.Voter, buf[0:]); err != nil {
		return 0, err
	}

	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[32:]); err != nil {
		return 0, err
	}

	// Field Option: uint8
	if _, err := abi.EncodeUint8(value.Option, buf[64:]); err != nil {
		return 0, err
	}

	// Field Metadata: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Metadata, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes VoteCall to ABI bytes
func (value VoteCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteCall from ABI bytes in the provided buffer
func (t *VoteCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field Voter: address
	t.Voter, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field Option: uint8
	t.Option, _, err = abi.DecodeUint8(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Metadata
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Metadata")
		}
		t.Metadata, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t VoteCall) GetMethodName() string {
	return "vote"
}

// GetMethodID returns the function name
func (t VoteCall) GetMethodID() [4]byte {
	return VoteSelector
}

// EncodeWithSelector encodes vote arguments to ABI bytes including function selector
func (t VoteCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], VoteSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const VoteReturnStaticSize = 32

// VoteReturn represents an ABI tuple
type VoteReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of VoteReturn
func (t VoteReturn) EncodedSize() int {
	dynamicSize := 0

	return VoteReturnStaticSize + dynamicSize
}

// EncodeTo encodes VoteReturn to ABI bytes in the provided buffer
func (value VoteReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes VoteReturn to ABI bytes
func (value VoteReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteReturn from ABI bytes in the provided buffer
func (t *VoteReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const VoteWeightedCallStaticSize = 128

// VoteWeightedCall represents an ABI tuple
type VoteWeightedCall struct {
	Voter      common.Address
	ProposalId uint64
	Options    []WeightedVoteOption
	Metadata   string
}

// EncodedSize returns the total encoded size of VoteWeightedCall
func (t VoteWeightedCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeWeightedVoteOptionSlice(t.Options)
	dynamicSize += abi.SizeString(t.Metadata)

	return VoteWeightedCallStaticSize + dynamicSize
}

// EncodeTo encodes VoteWeightedCall to ABI bytes in the provided buffer
func (value VoteWeightedCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteWeightedCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Voter: address
	if _, err := abi.EncodeAddress(value.Voter, buf[0:]); err != nil {
		return 0, err
	}

	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[32:]); err != nil {
		return 0, err
	}

	// Field Options: (uint8,string)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeWeightedVoteOptionSlice(value.Options, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Metadata: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Metadata, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes VoteWeightedCall to ABI bytes
func (value VoteWeightedCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteWeightedCall from ABI bytes in the provided buffer
func (t *VoteWeightedCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field Voter: address
	t.Voter, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Options
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Options")
		}
		t.Options, n, err = DecodeWeightedVoteOptionSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Metadata
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Metadata")
		}
		t.Metadata, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t VoteWeightedCall) GetMethodName() string {
	return "voteWeighted"
}

// GetMethodID returns the function name
func (t VoteWeightedCall) GetMethodID() [4]byte {
	return VoteWeightedSelector
}

// EncodeWithSelector encodes voteWeighted arguments to ABI bytes including function selector
func (t VoteWeightedCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], VoteWeightedSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const VoteWeightedReturnStaticSize = 32

// VoteWeightedReturn represents an ABI tuple
type VoteWeightedReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of VoteWeightedReturn
func (t VoteWeightedReturn) EncodedSize() int {
	dynamicSize := 0

	return VoteWeightedReturnStaticSize + dynamicSize
}

// EncodeTo encodes VoteWeightedReturn to ABI bytes in the provided buffer
func (value VoteWeightedReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteWeightedReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes VoteWeightedReturn to ABI bytes
func (value VoteWeightedReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteWeightedReturn from ABI bytes in the provided buffer
func (t *VoteWeightedReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// Event signatures
var (
	// CancelProposal(address,uint64)
	CancelProposalEventTopic = common.Hash{0xce, 0x91, 0x5f, 0xda, 0x53, 0xe9, 0xb1, 0xb6, 0x85, 0x8d, 0x5e, 0xf9, 0x7e, 0x63, 0xa5, 0xb7, 0x1d, 0x3a, 0xc8, 0x16, 0xcb, 0x20, 0x11, 0x69, 0x4f, 0xcf, 0x6d, 0xaa, 0xa9, 0xce, 0xf4, 0x77}
	// Deposit(address,uint64,(string,uint256)[])
	DepositEventTopic = common.Hash{0xeb, 0x37, 0xd1, 0x06, 0x26, 0xd0, 0x27, 0xab, 0x59, 0xc3, 0xa1, 0x32, 0x5e, 0xf9, 0xb0, 0x7a, 0x04, 0xdf, 0x7f, 0x4e, 0xd4, 0x7a, 0xfb, 0x35, 0x6e, 0xa4, 0x2e, 0x57, 0x2b, 0x89, 0xc7, 0x12}
	// SubmitProposal(address,uint64)
	SubmitProposalEventTopic = common.Hash{0xf4, 0x9a, 0x3a, 0x82, 0x32, 0xaf, 0xf8, 0x55, 0x33, 0x33, 0xcf, 0xd7, 0x34, 0xe3, 0xa7, 0xef, 0x1a, 0xb4, 0x76, 0x4c, 0xd0, 0x49, 0x4e, 0xb1, 0x45, 0x21, 0x67, 0x73, 0xb6, 0x4b, 0xf3, 0x49}
	// Vote(address,uint64,uint8)
	VoteEventTopic = common.Hash{0x71, 0xc0, 0x96, 0xcf, 0xbb, 0xce, 0x3e, 0x73, 0xfe, 0x1d, 0x1e, 0x59, 0x43, 0xda, 0x8f, 0xcb, 0xdc, 0xd2, 0xba, 0x95, 0x51, 0x9b, 0xfa, 0x45, 0x6d, 0x51, 0xc2, 0x82, 0xc5, 0x75, 0xc6, 0x4a}
	// VoteWeighted(address,uint64,(uint8,string)[])
	VoteWeightedEventTopic = common.Hash{0xf0, 0x2e, 0x1e, 0xd4, 0x29, 0xf5, 0xf8, 0x39, 0x81, 0x2e, 0x0c, 0xc8, 0x57, 0xe1, 0x5b, 0x6e, 0x15, 0x39, 0xf1, 0xa4, 0x37, 0x0f, 0x25, 0x39, 0x95, 0x7e, 0x07, 0xe2, 0xca, 0x33, 0x70, 0xe4}
)

// CancelProposalEvent represents the CancelProposal event
type CancelProposalEvent struct {
	CancelProposalEventIndexed
	CancelProposalEventData
}

// NewCancelProposalEvent constructs a new CancelProposal event
func NewCancelProposalEvent(
	proposer common.Address,
	proposalId uint64,
) CancelProposalEvent {
	return CancelProposalEvent{
		CancelProposalEventIndexed: CancelProposalEventIndexed{
			Proposer: proposer,
		},
		CancelProposalEventData: CancelProposalEventData{
			ProposalId: proposalId,
		},
	}
}

// GetEventName returns the event name
func (e CancelProposalEvent) GetEventName() string {
	return "CancelProposal"
}

// GetEventID returns the event ID (topic)
func (e CancelProposalEvent) GetEventID() common.Hash {
	return CancelProposalEventTopic
}

// CancelProposal represents an ABI event
type CancelProposalEventIndexed struct {
	Proposer common.Address
}

// EncodeTopics encodes indexed fields of CancelProposal event to topics
func (e CancelProposalEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, CancelProposalEventTopic)
	{
		// Proposer
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Proposer, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of CancelProposal event from topics, ignore hash topics
func (e *CancelProposalEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for CancelProposal event: expected 2, got %d", len(topics))
	}
	if topics[0] != CancelProposalEventTopic {
		return fmt.Errorf("invalid event topic for CancelProposal event")
	}
	var err error
	e.Proposer, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const CancelProposalEventDataStaticSize = 32

// CancelProposalEventData represents an ABI tuple
type CancelProposalEventData struct {
	ProposalId uint64
}

// EncodedSize returns the total encoded size of CancelProposalEventData
func (t CancelProposalEventData) EncodedSize() int {
	dynamicSize := 0

	return CancelProposalEventDataStaticSize + dynamicSize
}

// EncodeTo encodes CancelProposalEventData to ABI bytes in the provided buffer
func (value CancelProposalEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelProposalEventDataStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelProposalEventData to ABI bytes
func (value CancelProposalEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelProposalEventData from ABI bytes in the provided buffer
func (t *CancelProposalEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// DepositEvent represents the Deposit event
type DepositEvent struct {
	DepositEventIndexed
	DepositEventData
}

// NewDepositEvent constructs a new Deposit event
func NewDepositEvent(
	depositor common.Address,
	proposalId uint64,
	amount []cmn.Coin,
) DepositEvent {
	return DepositEvent{
		DepositEventIndexed: DepositEventIndexed{
			Depositor: depositor,
		},
		DepositEventData: DepositEventData{
			ProposalId: proposalId,
			Amount:     amount,
		},
	}
}

// GetEventName returns the event name
func (e DepositEvent) GetEventName() string {
	return "Deposit"
}

// GetEventID returns the event ID (topic)
func (e DepositEvent) GetEventID() common.Hash {
	return DepositEventTopic
}

// Deposit represents an ABI event
type DepositEventIndexed struct {
	Depositor common.Address
}

// EncodeTopics encodes indexed fields of Deposit event to topics
func (e DepositEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, DepositEventTopic)
	{
		// Depositor
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Depositor, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Deposit event from topics, ignore hash topics
func (e *DepositEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for Deposit event: expected 2, got %d", len(topics))
	}
	if topics[0] != DepositEventTopic {
		return fmt.Errorf("invalid event topic for Deposit event")
	}
	var err error
	e.Depositor, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const DepositEventDataStaticSize = 64

// DepositEventData represents an ABI tuple
type DepositEventData struct {
	ProposalId uint64
	Amount     []cmn.Coin
}

// EncodedSize returns the total encoded size of DepositEventData
func (t DepositEventData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return DepositEventDataStaticSize + dynamicSize
}

// EncodeTo encodes DepositEventData to ABI bytes in the provided buffer
func (value DepositEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositEventDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DepositEventData to ABI bytes
func (value DepositEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositEventData from ABI bytes in the provided buffer
func (t *DepositEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// SubmitProposalEvent represents the SubmitProposal event
type SubmitProposalEvent struct {
	SubmitProposalEventIndexed
	SubmitProposalEventData
}

// NewSubmitProposalEvent constructs a new SubmitProposal event
func NewSubmitProposalEvent(
	proposer common.Address,
	proposalId uint64,
) SubmitProposalEvent {
	return SubmitProposalEvent{
		SubmitProposalEventIndexed: SubmitProposalEventIndexed{
			Proposer: proposer,
		},
		SubmitProposalEventData: SubmitProposalEventData{
			ProposalId: proposalId,
		},
	}
}

// GetEventName returns the event name
func (e SubmitProposalEvent) GetEventName() string {
	return "SubmitProposal"
}

// GetEventID returns the event ID (topic)
func (e SubmitProposalEvent) GetEventID() common.Hash {
	return SubmitProposalEventTopic
}

// SubmitProposal represents an ABI event
type SubmitProposalEventIndexed struct {
	Proposer common.Address
}

// EncodeTopics encodes indexed fields of SubmitProposal event to topics
func (e SubmitProposalEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, SubmitProposalEventTopic)
	{
		// Proposer
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Proposer, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of SubmitProposal event from topics, ignore hash topics
func (e *SubmitProposalEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for SubmitProposal event: expected 2, got %d", len(topics))
	}
	if topics[0] != SubmitProposalEventTopic {
		return fmt.Errorf("invalid event topic for SubmitProposal event")
	}
	var err error
	e.Proposer, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const SubmitProposalEventDataStaticSize = 32

// SubmitProposalEventData represents an ABI tuple
type SubmitProposalEventData struct {
	ProposalId uint64
}

// EncodedSize returns the total encoded size of SubmitProposalEventData
func (t SubmitProposalEventData) EncodedSize() int {
	dynamicSize := 0

	return SubmitProposalEventDataStaticSize + dynamicSize
}

// EncodeTo encodes SubmitProposalEventData to ABI bytes in the provided buffer
func (value SubmitProposalEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SubmitProposalEventDataStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SubmitProposalEventData to ABI bytes
func (value SubmitProposalEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SubmitProposalEventData from ABI bytes in the provided buffer
func (t *SubmitProposalEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// VoteEvent represents the Vote event
type VoteEvent struct {
	VoteEventIndexed
	VoteEventData
}

// NewVoteEvent constructs a new Vote event
func NewVoteEvent(
	voter common.Address,
	proposalId uint64,
	option uint8,
) VoteEvent {
	return VoteEvent{
		VoteEventIndexed: VoteEventIndexed{
			Voter: voter,
		},
		VoteEventData: VoteEventData{
			ProposalId: proposalId,
			Option:     option,
		},
	}
}

// GetEventName returns the event name
func (e VoteEvent) GetEventName() string {
	return "Vote"
}

// GetEventID returns the event ID (topic)
func (e VoteEvent) GetEventID() common.Hash {
	return VoteEventTopic
}

// Vote represents an ABI event
type VoteEventIndexed struct {
	Voter common.Address
}

// EncodeTopics encodes indexed fields of Vote event to topics
func (e VoteEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, VoteEventTopic)
	{
		// Voter
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Voter, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Vote event from topics, ignore hash topics
func (e *VoteEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for Vote event: expected 2, got %d", len(topics))
	}
	if topics[0] != VoteEventTopic {
		return fmt.Errorf("invalid event topic for Vote event")
	}
	var err error
	e.Voter, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const VoteEventDataStaticSize = 64

// VoteEventData represents an ABI tuple
type VoteEventData struct {
	ProposalId uint64
	Option     uint8
}

// EncodedSize returns the total encoded size of VoteEventData
func (t VoteEventData) EncodedSize() int {
	dynamicSize := 0

	return VoteEventDataStaticSize + dynamicSize
}

// EncodeTo encodes VoteEventData to ABI bytes in the provided buffer
func (value VoteEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteEventDataStaticSize // Start dynamic data after static section
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Option: uint8
	if _, err := abi.EncodeUint8(value.Option, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes VoteEventData to ABI bytes
func (value VoteEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteEventData from ABI bytes in the provided buffer
func (t *VoteEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Option: uint8
	t.Option, _, err = abi.DecodeUint8(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// VoteWeightedEvent represents the VoteWeighted event
type VoteWeightedEvent struct {
	VoteWeightedEventIndexed
	VoteWeightedEventData
}

// NewVoteWeightedEvent constructs a new VoteWeighted event
func NewVoteWeightedEvent(
	voter common.Address,
	proposalId uint64,
	options []WeightedVoteOption,
) VoteWeightedEvent {
	return VoteWeightedEvent{
		VoteWeightedEventIndexed: VoteWeightedEventIndexed{
			Voter: voter,
		},
		VoteWeightedEventData: VoteWeightedEventData{
			ProposalId: proposalId,
			Options:    options,
		},
	}
}

// GetEventName returns the event name
func (e VoteWeightedEvent) GetEventName() string {
	return "VoteWeighted"
}

// GetEventID returns the event ID (topic)
func (e VoteWeightedEvent) GetEventID() common.Hash {
	return VoteWeightedEventTopic
}

// VoteWeighted represents an ABI event
type VoteWeightedEventIndexed struct {
	Voter common.Address
}

// EncodeTopics encodes indexed fields of VoteWeighted event to topics
func (e VoteWeightedEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, VoteWeightedEventTopic)
	{
		// Voter
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Voter, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of VoteWeighted event from topics, ignore hash topics
func (e *VoteWeightedEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for VoteWeighted event: expected 2, got %d", len(topics))
	}
	if topics[0] != VoteWeightedEventTopic {
		return fmt.Errorf("invalid event topic for VoteWeighted event")
	}
	var err error
	e.Voter, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const VoteWeightedEventDataStaticSize = 64

// VoteWeightedEventData represents an ABI tuple
type VoteWeightedEventData struct {
	ProposalId uint64
	Options    []WeightedVoteOption
}

// EncodedSize returns the total encoded size of VoteWeightedEventData
func (t VoteWeightedEventData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeWeightedVoteOptionSlice(t.Options)

	return VoteWeightedEventDataStaticSize + dynamicSize
}

// EncodeTo encodes VoteWeightedEventData to ABI bytes in the provided buffer
func (value VoteWeightedEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := VoteWeightedEventDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ProposalId: uint64
	if _, err := abi.EncodeUint64(value.ProposalId, buf[0:]); err != nil {
		return 0, err
	}

	// Field Options: (uint8,string)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeWeightedVoteOptionSlice(value.Options, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes VoteWeightedEventData to ABI bytes
func (value VoteWeightedEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes VoteWeightedEventData from ABI bytes in the provided buffer
func (t *VoteWeightedEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field ProposalId: uint64
	t.ProposalId, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Options
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Options")
		}
		t.Options, n, err = DecodeWeightedVoteOptionSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}
