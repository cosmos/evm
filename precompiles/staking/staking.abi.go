// Code generated by go-abi. DO NOT EDIT.

package staking

import (
	"encoding/binary"
	"errors"
	"fmt"
	"io"
	"math/big"

	cmn "github.com/cosmos/evm/precompiles/common"
	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// cancelUnbondingDelegation(address,string,uint256,uint256)
	CancelUnbondingDelegationSelector = [4]byte{0x12, 0xd5, 0x8d, 0xfe}
	// createValidator((string,string,string,string,string),(uint256,uint256,uint256),uint256,address,string,uint256)
	CreateValidatorSelector = [4]byte{0xf7, 0xcd, 0x55, 0x16}
	// delegate(address,string,uint256)
	DelegateSelector = [4]byte{0x53, 0x26, 0x6b, 0xbb}
	// delegation(address,string)
	DelegationSelector = [4]byte{0x24, 0x17, 0x74, 0xe6}
	// editValidator((string,string,string,string,string),address,int256,int256)
	EditValidatorSelector = [4]byte{0xa5, 0x0f, 0x05, 0xac}
	// redelegate(address,string,string,uint256)
	RedelegateSelector = [4]byte{0x54, 0xb8, 0x26, 0xf5}
	// redelegation(address,string,string)
	RedelegationSelector = [4]byte{0x7d, 0x9f, 0x93, 0x9c}
	// redelegations(address,string,string,(bytes,uint64,uint64,bool,bool))
	RedelegationsSelector = [4]byte{0x10, 0xa2, 0x85, 0x1c}
	// unbondingDelegation(address,string)
	UnbondingDelegationSelector = [4]byte{0xa0, 0x3f, 0xfe, 0xe1}
	// undelegate(address,string,uint256)
	UndelegateSelector = [4]byte{0x3e, 0xda, 0xb3, 0x3c}
	// validator(address)
	ValidatorSelector = [4]byte{0x22, 0x3b, 0x3b, 0x7a}
	// validators(string,(bytes,uint64,uint64,bool,bool))
	ValidatorsSelector = [4]byte{0x18, 0x6b, 0x21, 0x67}
)

// Big endian integer versions of function selectors
const (
	CancelUnbondingDelegationID = 315985406
	CreateValidatorID           = 4157429014
	DelegateID                  = 1395026875
	DelegationID                = 605517030
	EditValidatorID             = 2769225132
	RedelegateID                = 1421354741
	RedelegationID              = 2107610012
	RedelegationsID             = 279086364
	UnbondingDelegationID       = 2688548577
	UndelegateID                = 1054520124
	ValidatorID                 = 574307194
	ValidatorsID                = 409674087
)

const CommissionRatesStaticSize = 96

// CommissionRates represents an ABI tuple
type CommissionRates struct {
	Rate          *big.Int
	MaxRate       *big.Int
	MaxChangeRate *big.Int
}

// EncodedSize returns the total encoded size of CommissionRates
func (t CommissionRates) EncodedSize() int {
	dynamicSize := 0

	return CommissionRatesStaticSize + dynamicSize
}

// EncodeTo encodes CommissionRates to ABI bytes in the provided buffer
func (value CommissionRates) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CommissionRatesStaticSize // Start dynamic data after static section
	// Field Rate: uint256
	if _, err := abi.EncodeUint256(value.Rate, buf[0:]); err != nil {
		return 0, err
	}

	// Field MaxRate: uint256
	if _, err := abi.EncodeUint256(value.MaxRate, buf[32:]); err != nil {
		return 0, err
	}

	// Field MaxChangeRate: uint256
	if _, err := abi.EncodeUint256(value.MaxChangeRate, buf[64:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CommissionRates to ABI bytes
func (value CommissionRates) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CommissionRates from ABI bytes in the provided buffer
func (t *CommissionRates) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 96
	// Decode static field Rate: uint256
	t.Rate, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field MaxRate: uint256
	t.MaxRate, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field MaxChangeRate: uint256
	t.MaxChangeRate, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const DescriptionStaticSize = 160

// Description represents an ABI tuple
type Description struct {
	Moniker         string
	Identity        string
	Website         string
	SecurityContact string
	Details         string
}

// EncodedSize returns the total encoded size of Description
func (t Description) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Moniker)
	dynamicSize += abi.SizeString(t.Identity)
	dynamicSize += abi.SizeString(t.Website)
	dynamicSize += abi.SizeString(t.SecurityContact)
	dynamicSize += abi.SizeString(t.Details)

	return DescriptionStaticSize + dynamicSize
}

// EncodeTo encodes Description to ABI bytes in the provided buffer
func (value Description) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DescriptionStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Moniker: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Moniker, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Identity: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Identity, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Website: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Website, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field SecurityContact: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.SecurityContact, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Details: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[128+24:128+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Details, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes Description to ABI bytes
func (value Description) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Description from ABI bytes in the provided buffer
func (t *Description) Decode(data []byte) (int, error) {
	if len(data) < 160 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 160
	// Decode dynamic field Moniker
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Moniker")
		}
		t.Moniker, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Identity
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Identity")
		}
		t.Identity, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Website
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Website")
		}
		t.Website, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field SecurityContact
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field SecurityContact")
		}
		t.SecurityContact, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Details
	{
		offset := int(binary.BigEndian.Uint64(data[128+24 : 128+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Details")
		}
		t.Details, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const PageResponseStaticSize = 64

// PageResponse represents an ABI tuple
type PageResponse struct {
	NextKey []byte
	Total   uint64
}

// EncodedSize returns the total encoded size of PageResponse
func (t PageResponse) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeBytes(t.NextKey)

	return PageResponseStaticSize + dynamicSize
}

// EncodeTo encodes PageResponse to ABI bytes in the provided buffer
func (value PageResponse) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := PageResponseStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field NextKey: bytes
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeBytes(value.NextKey, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Total: uint64
	if _, err := abi.EncodeUint64(value.Total, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes PageResponse to ABI bytes
func (value PageResponse) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes PageResponse from ABI bytes in the provided buffer
func (t *PageResponse) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field NextKey
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field NextKey")
		}
		t.NextKey, n, err = abi.DecodeBytes(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Total: uint64
	t.Total, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const RedelegationStaticSize = 128

// Redelegation represents an ABI tuple
type Redelegation struct {
	DelegatorAddress    string
	ValidatorSrcAddress string
	ValidatorDstAddress string
	Entries             []RedelegationEntry
}

// EncodedSize returns the total encoded size of Redelegation
func (t Redelegation) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.DelegatorAddress)
	dynamicSize += abi.SizeString(t.ValidatorSrcAddress)
	dynamicSize += abi.SizeString(t.ValidatorDstAddress)
	dynamicSize += SizeRedelegationEntrySlice(t.Entries)

	return RedelegationStaticSize + dynamicSize
}

// EncodeTo encodes Redelegation to ABI bytes in the provided buffer
func (value Redelegation) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.DelegatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorSrcAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorSrcAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorDstAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorDstAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Entries: (int64,int64,uint256,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeRedelegationEntrySlice(value.Entries, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes Redelegation to ABI bytes
func (value Redelegation) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Redelegation from ABI bytes in the provided buffer
func (t *Redelegation) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode dynamic field DelegatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DelegatorAddress")
		}
		t.DelegatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorSrcAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorSrcAddress")
		}
		t.ValidatorSrcAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorDstAddress
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorDstAddress")
		}
		t.ValidatorDstAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Entries
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Entries")
		}
		t.Entries, n, err = DecodeRedelegationEntrySlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const RedelegationEntryStaticSize = 128

// RedelegationEntry represents an ABI tuple
type RedelegationEntry struct {
	CreationHeight int64
	CompletionTime int64
	InitialBalance *big.Int
	SharesDst      *big.Int
}

// EncodedSize returns the total encoded size of RedelegationEntry
func (t RedelegationEntry) EncodedSize() int {
	dynamicSize := 0

	return RedelegationEntryStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationEntry to ABI bytes in the provided buffer
func (value RedelegationEntry) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationEntryStaticSize // Start dynamic data after static section
	// Field CreationHeight: int64
	if _, err := abi.EncodeInt64(value.CreationHeight, buf[0:]); err != nil {
		return 0, err
	}

	// Field CompletionTime: int64
	if _, err := abi.EncodeInt64(value.CompletionTime, buf[32:]); err != nil {
		return 0, err
	}

	// Field InitialBalance: uint256
	if _, err := abi.EncodeUint256(value.InitialBalance, buf[64:]); err != nil {
		return 0, err
	}

	// Field SharesDst: uint256
	if _, err := abi.EncodeUint256(value.SharesDst, buf[96:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes RedelegationEntry to ABI bytes
func (value RedelegationEntry) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationEntry from ABI bytes in the provided buffer
func (t *RedelegationEntry) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 128
	// Decode static field CreationHeight: int64
	t.CreationHeight, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field CompletionTime: int64
	t.CompletionTime, _, err = abi.DecodeInt64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field InitialBalance: uint256
	t.InitialBalance, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field SharesDst: uint256
	t.SharesDst, _, err = abi.DecodeUint256(data[96:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const RedelegationEntryResponseStaticSize = 160

// RedelegationEntryResponse represents an ABI tuple
type RedelegationEntryResponse struct {
	RedelegationEntry RedelegationEntry
	Balance           *big.Int
}

// EncodedSize returns the total encoded size of RedelegationEntryResponse
func (t RedelegationEntryResponse) EncodedSize() int {
	dynamicSize := 0

	return RedelegationEntryResponseStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationEntryResponse to ABI bytes in the provided buffer
func (value RedelegationEntryResponse) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationEntryResponseStaticSize // Start dynamic data after static section
	// Field RedelegationEntry: (int64,int64,uint256,uint256)
	if _, err := value.RedelegationEntry.EncodeTo(buf[0:]); err != nil {
		return 0, err
	}

	// Field Balance: uint256
	if _, err := abi.EncodeUint256(value.Balance, buf[128:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes RedelegationEntryResponse to ABI bytes
func (value RedelegationEntryResponse) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationEntryResponse from ABI bytes in the provided buffer
func (t *RedelegationEntryResponse) Decode(data []byte) (int, error) {
	if len(data) < 160 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 160
	// Decode static field RedelegationEntry: (int64,int64,uint256,uint256)
	_, err = t.RedelegationEntry.Decode(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Balance: uint256
	t.Balance, _, err = abi.DecodeUint256(data[128:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const RedelegationOutputStaticSize = 128

// RedelegationOutput represents an ABI tuple
type RedelegationOutput struct {
	DelegatorAddress    string
	ValidatorSrcAddress string
	ValidatorDstAddress string
	Entries             []RedelegationEntry
}

// EncodedSize returns the total encoded size of RedelegationOutput
func (t RedelegationOutput) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.DelegatorAddress)
	dynamicSize += abi.SizeString(t.ValidatorSrcAddress)
	dynamicSize += abi.SizeString(t.ValidatorDstAddress)
	dynamicSize += SizeRedelegationEntrySlice(t.Entries)

	return RedelegationOutputStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationOutput to ABI bytes in the provided buffer
func (value RedelegationOutput) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationOutputStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.DelegatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorSrcAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorSrcAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorDstAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorDstAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Entries: (int64,int64,uint256,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeRedelegationEntrySlice(value.Entries, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationOutput to ABI bytes
func (value RedelegationOutput) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationOutput from ABI bytes in the provided buffer
func (t *RedelegationOutput) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode dynamic field DelegatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DelegatorAddress")
		}
		t.DelegatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorSrcAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorSrcAddress")
		}
		t.ValidatorSrcAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorDstAddress
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorDstAddress")
		}
		t.ValidatorDstAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Entries
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Entries")
		}
		t.Entries, n, err = DecodeRedelegationEntrySlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const RedelegationResponseStaticSize = 64

// RedelegationResponse represents an ABI tuple
type RedelegationResponse struct {
	Redelegation Redelegation
	Entries      []RedelegationEntryResponse
}

// EncodedSize returns the total encoded size of RedelegationResponse
func (t RedelegationResponse) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Redelegation.EncodedSize()
	dynamicSize += SizeRedelegationEntryResponseSlice(t.Entries)

	return RedelegationResponseStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationResponse to ABI bytes in the provided buffer
func (value RedelegationResponse) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationResponseStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Redelegation: (string,string,string,(int64,int64,uint256,uint256)[])
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Redelegation.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Entries: ((int64,int64,uint256,uint256),uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeRedelegationEntryResponseSlice(value.Entries, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationResponse to ABI bytes
func (value RedelegationResponse) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationResponse from ABI bytes in the provided buffer
func (t *RedelegationResponse) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Redelegation
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Redelegation")
		}
		n, err = t.Redelegation.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Entries
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Entries")
		}
		t.Entries, n, err = DecodeRedelegationEntryResponseSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const UnbondingDelegationEntryStaticSize = 192

// UnbondingDelegationEntry represents an ABI tuple
type UnbondingDelegationEntry struct {
	CreationHeight          int64
	CompletionTime          int64
	InitialBalance          *big.Int
	Balance                 *big.Int
	UnbondingId             uint64
	UnbondingOnHoldRefCount int64
}

// EncodedSize returns the total encoded size of UnbondingDelegationEntry
func (t UnbondingDelegationEntry) EncodedSize() int {
	dynamicSize := 0

	return UnbondingDelegationEntryStaticSize + dynamicSize
}

// EncodeTo encodes UnbondingDelegationEntry to ABI bytes in the provided buffer
func (value UnbondingDelegationEntry) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnbondingDelegationEntryStaticSize // Start dynamic data after static section
	// Field CreationHeight: int64
	if _, err := abi.EncodeInt64(value.CreationHeight, buf[0:]); err != nil {
		return 0, err
	}

	// Field CompletionTime: int64
	if _, err := abi.EncodeInt64(value.CompletionTime, buf[32:]); err != nil {
		return 0, err
	}

	// Field InitialBalance: uint256
	if _, err := abi.EncodeUint256(value.InitialBalance, buf[64:]); err != nil {
		return 0, err
	}

	// Field Balance: uint256
	if _, err := abi.EncodeUint256(value.Balance, buf[96:]); err != nil {
		return 0, err
	}

	// Field UnbondingId: uint64
	if _, err := abi.EncodeUint64(value.UnbondingId, buf[128:]); err != nil {
		return 0, err
	}

	// Field UnbondingOnHoldRefCount: int64
	if _, err := abi.EncodeInt64(value.UnbondingOnHoldRefCount, buf[160:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UnbondingDelegationEntry to ABI bytes
func (value UnbondingDelegationEntry) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnbondingDelegationEntry from ABI bytes in the provided buffer
func (t *UnbondingDelegationEntry) Decode(data []byte) (int, error) {
	if len(data) < 192 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 192
	// Decode static field CreationHeight: int64
	t.CreationHeight, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field CompletionTime: int64
	t.CompletionTime, _, err = abi.DecodeInt64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field InitialBalance: uint256
	t.InitialBalance, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field Balance: uint256
	t.Balance, _, err = abi.DecodeUint256(data[96:])
	if err != nil {
		return 0, err
	}
	// Decode static field UnbondingId: uint64
	t.UnbondingId, _, err = abi.DecodeUint64(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field UnbondingOnHoldRefCount: int64
	t.UnbondingOnHoldRefCount, _, err = abi.DecodeInt64(data[160:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const UnbondingDelegationOutputStaticSize = 96

// UnbondingDelegationOutput represents an ABI tuple
type UnbondingDelegationOutput struct {
	DelegatorAddress string
	ValidatorAddress string
	Entries          []UnbondingDelegationEntry
}

// EncodedSize returns the total encoded size of UnbondingDelegationOutput
func (t UnbondingDelegationOutput) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.DelegatorAddress)
	dynamicSize += abi.SizeString(t.ValidatorAddress)
	dynamicSize += SizeUnbondingDelegationEntrySlice(t.Entries)

	return UnbondingDelegationOutputStaticSize + dynamicSize
}

// EncodeTo encodes UnbondingDelegationOutput to ABI bytes in the provided buffer
func (value UnbondingDelegationOutput) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnbondingDelegationOutputStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.DelegatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Entries: (int64,int64,uint256,uint256,uint64,int64)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeUnbondingDelegationEntrySlice(value.Entries, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes UnbondingDelegationOutput to ABI bytes
func (value UnbondingDelegationOutput) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnbondingDelegationOutput from ABI bytes in the provided buffer
func (t *UnbondingDelegationOutput) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode dynamic field DelegatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DelegatorAddress")
		}
		t.DelegatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Entries
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Entries")
		}
		t.Entries, n, err = DecodeUnbondingDelegationEntrySlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorStaticSize = 352

// Validator represents an ABI tuple
type Validator struct {
	OperatorAddress   string
	ConsensusPubkey   string
	Jailed            bool
	Status            uint8
	Tokens            *big.Int
	DelegatorShares   *big.Int
	Description       Description
	UnbondingHeight   int64
	UnbondingTime     int64
	Commission        *big.Int
	MinSelfDelegation *big.Int
}

// EncodedSize returns the total encoded size of Validator
func (t Validator) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.OperatorAddress)
	dynamicSize += abi.SizeString(t.ConsensusPubkey)
	dynamicSize += t.Description.EncodedSize()

	return ValidatorStaticSize + dynamicSize
}

// EncodeTo encodes Validator to ABI bytes in the provided buffer
func (value Validator) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field OperatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.OperatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ConsensusPubkey: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ConsensusPubkey, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Jailed: bool
	if _, err := abi.EncodeBool(value.Jailed, buf[64:]); err != nil {
		return 0, err
	}

	// Field Status: uint8
	if _, err := abi.EncodeUint8(value.Status, buf[96:]); err != nil {
		return 0, err
	}

	// Field Tokens: uint256
	if _, err := abi.EncodeUint256(value.Tokens, buf[128:]); err != nil {
		return 0, err
	}

	// Field DelegatorShares: uint256
	if _, err := abi.EncodeUint256(value.DelegatorShares, buf[160:]); err != nil {
		return 0, err
	}

	// Field Description: (string,string,string,string,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[192+24:192+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Description.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field UnbondingHeight: int64
	if _, err := abi.EncodeInt64(value.UnbondingHeight, buf[224:]); err != nil {
		return 0, err
	}

	// Field UnbondingTime: int64
	if _, err := abi.EncodeInt64(value.UnbondingTime, buf[256:]); err != nil {
		return 0, err
	}

	// Field Commission: uint256
	if _, err := abi.EncodeUint256(value.Commission, buf[288:]); err != nil {
		return 0, err
	}

	// Field MinSelfDelegation: uint256
	if _, err := abi.EncodeUint256(value.MinSelfDelegation, buf[320:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes Validator to ABI bytes
func (value Validator) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes Validator from ABI bytes in the provided buffer
func (t *Validator) Decode(data []byte) (int, error) {
	if len(data) < 352 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 352
	// Decode dynamic field OperatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field OperatorAddress")
		}
		t.OperatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ConsensusPubkey
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ConsensusPubkey")
		}
		t.ConsensusPubkey, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Jailed: bool
	t.Jailed, _, err = abi.DecodeBool(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field Status: uint8
	t.Status, _, err = abi.DecodeUint8(data[96:])
	if err != nil {
		return 0, err
	}
	// Decode static field Tokens: uint256
	t.Tokens, _, err = abi.DecodeUint256(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field DelegatorShares: uint256
	t.DelegatorShares, _, err = abi.DecodeUint256(data[160:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Description
	{
		offset := int(binary.BigEndian.Uint64(data[192+24 : 192+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Description")
		}
		n, err = t.Description.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field UnbondingHeight: int64
	t.UnbondingHeight, _, err = abi.DecodeInt64(data[224:])
	if err != nil {
		return 0, err
	}
	// Decode static field UnbondingTime: int64
	t.UnbondingTime, _, err = abi.DecodeInt64(data[256:])
	if err != nil {
		return 0, err
	}
	// Decode static field Commission: uint256
	t.Commission, _, err = abi.DecodeUint256(data[288:])
	if err != nil {
		return 0, err
	}
	// Decode static field MinSelfDelegation: uint256
	t.MinSelfDelegation, _, err = abi.DecodeUint256(data[320:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeRedelegationEntryResponseSlice encodes ((int64,int64,uint256,uint256),uint256)[] to ABI bytes
func EncodeRedelegationEntryResponseSlice(value []RedelegationEntryResponse, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with static types
	var offset int
	for _, elem := range value {
		n, err := elem.EncodeTo(buf[offset:])
		if err != nil {
			return 0, err
		}
		offset += n
	}

	return offset + 32, nil
}

// EncodeRedelegationEntrySlice encodes (int64,int64,uint256,uint256)[] to ABI bytes
func EncodeRedelegationEntrySlice(value []RedelegationEntry, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with static types
	var offset int
	for _, elem := range value {
		n, err := elem.EncodeTo(buf[offset:])
		if err != nil {
			return 0, err
		}
		offset += n
	}

	return offset + 32, nil
}

// EncodeRedelegationResponseSlice encodes ((string,string,string,(int64,int64,uint256,uint256)[]),((int64,int64,uint256,uint256),uint256)[])[] to ABI bytes
func EncodeRedelegationResponseSlice(value []RedelegationResponse, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeUnbondingDelegationEntrySlice encodes (int64,int64,uint256,uint256,uint64,int64)[] to ABI bytes
func EncodeUnbondingDelegationEntrySlice(value []UnbondingDelegationEntry, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with static types
	var offset int
	for _, elem := range value {
		n, err := elem.EncodeTo(buf[offset:])
		if err != nil {
			return 0, err
		}
		offset += n
	}

	return offset + 32, nil
}

// EncodeValidatorSlice encodes (string,string,bool,uint8,uint256,uint256,(string,string,string,string,string),int64,int64,uint256,uint256)[] to ABI bytes
func EncodeValidatorSlice(value []Validator, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// SizeRedelegationEntryResponseSlice returns the encoded size of ((int64,int64,uint256,uint256),uint256)[]
func SizeRedelegationEntryResponseSlice(value []RedelegationEntryResponse) int {
	size := 32 + 160*len(value) // length + static elements
	return size
}

// SizeRedelegationEntrySlice returns the encoded size of (int64,int64,uint256,uint256)[]
func SizeRedelegationEntrySlice(value []RedelegationEntry) int {
	size := 32 + 128*len(value) // length + static elements
	return size
}

// SizeRedelegationResponseSlice returns the encoded size of ((string,string,string,(int64,int64,uint256,uint256)[]),((int64,int64,uint256,uint256),uint256)[])[]
func SizeRedelegationResponseSlice(value []RedelegationResponse) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeUnbondingDelegationEntrySlice returns the encoded size of (int64,int64,uint256,uint256,uint64,int64)[]
func SizeUnbondingDelegationEntrySlice(value []UnbondingDelegationEntry) int {
	size := 32 + 192*len(value) // length + static elements
	return size
}

// SizeValidatorSlice returns the encoded size of (string,string,bool,uint8,uint256,uint256,(string,string,string,string,string),int64,int64,uint256,uint256)[]
func SizeValidatorSlice(value []Validator) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// DecodeRedelegationEntryResponseSlice decodes ((int64,int64,uint256,uint256),uint256)[] from ABI bytes
func DecodeRedelegationEntryResponseSlice(data []byte) ([]RedelegationEntryResponse, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 160*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with static types
	result := make([]RedelegationEntryResponse, length)
	for i := 0; i < length; i++ {
		n, err = result[i].Decode(data[offset:])
		if err != nil {
			return nil, 0, err
		}
		offset += n
	}
	return result, offset + 32, nil
}

// DecodeRedelegationEntrySlice decodes (int64,int64,uint256,uint256)[] from ABI bytes
func DecodeRedelegationEntrySlice(data []byte) ([]RedelegationEntry, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 128*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with static types
	result := make([]RedelegationEntry, length)
	for i := 0; i < length; i++ {
		n, err = result[i].Decode(data[offset:])
		if err != nil {
			return nil, 0, err
		}
		offset += n
	}
	return result, offset + 32, nil
}

// DecodeRedelegationResponseSlice decodes ((string,string,string,(int64,int64,uint256,uint256)[]),((int64,int64,uint256,uint256),uint256)[])[] from ABI bytes
func DecodeRedelegationResponseSlice(data []byte) ([]RedelegationResponse, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]RedelegationResponse, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeUnbondingDelegationEntrySlice decodes (int64,int64,uint256,uint256,uint64,int64)[] from ABI bytes
func DecodeUnbondingDelegationEntrySlice(data []byte) ([]UnbondingDelegationEntry, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 192*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with static types
	result := make([]UnbondingDelegationEntry, length)
	for i := 0; i < length; i++ {
		n, err = result[i].Decode(data[offset:])
		if err != nil {
			return nil, 0, err
		}
		offset += n
	}
	return result, offset + 32, nil
}

// DecodeValidatorSlice decodes (string,string,bool,uint8,uint256,uint256,(string,string,string,string,string),int64,int64,uint256,uint256)[] from ABI bytes
func DecodeValidatorSlice(data []byte) ([]Validator, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]Validator, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

const CancelUnbondingDelegationCallStaticSize = 128

// CancelUnbondingDelegationCall represents an ABI tuple
type CancelUnbondingDelegationCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
	Amount           *big.Int
	CreationHeight   *big.Int
}

// EncodedSize returns the total encoded size of CancelUnbondingDelegationCall
func (t CancelUnbondingDelegationCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return CancelUnbondingDelegationCallStaticSize + dynamicSize
}

// EncodeTo encodes CancelUnbondingDelegationCall to ABI bytes in the provided buffer
func (value CancelUnbondingDelegationCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelUnbondingDelegationCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	// Field CreationHeight: uint256
	if _, err := abi.EncodeUint256(value.CreationHeight, buf[96:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelUnbondingDelegationCall to ABI bytes
func (value CancelUnbondingDelegationCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelUnbondingDelegationCall from ABI bytes in the provided buffer
func (t *CancelUnbondingDelegationCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field CreationHeight: uint256
	t.CreationHeight, _, err = abi.DecodeUint256(data[96:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t CancelUnbondingDelegationCall) GetMethodName() string {
	return "cancelUnbondingDelegation"
}

// GetMethodID returns the function name
func (t CancelUnbondingDelegationCall) GetMethodID() [4]byte {
	return CancelUnbondingDelegationSelector
}

// EncodeWithSelector encodes cancelUnbondingDelegation arguments to ABI bytes including function selector
func (t CancelUnbondingDelegationCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], CancelUnbondingDelegationSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const CancelUnbondingDelegationReturnStaticSize = 32

// CancelUnbondingDelegationReturn represents an ABI tuple
type CancelUnbondingDelegationReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of CancelUnbondingDelegationReturn
func (t CancelUnbondingDelegationReturn) EncodedSize() int {
	dynamicSize := 0

	return CancelUnbondingDelegationReturnStaticSize + dynamicSize
}

// EncodeTo encodes CancelUnbondingDelegationReturn to ABI bytes in the provided buffer
func (value CancelUnbondingDelegationReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelUnbondingDelegationReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelUnbondingDelegationReturn to ABI bytes
func (value CancelUnbondingDelegationReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelUnbondingDelegationReturn from ABI bytes in the provided buffer
func (t *CancelUnbondingDelegationReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const CreateValidatorCallStaticSize = 256

// CreateValidatorCall represents an ABI tuple
type CreateValidatorCall struct {
	Description       Description
	CommissionRates   CommissionRates
	MinSelfDelegation *big.Int
	ValidatorAddress  common.Address
	Pubkey            string
	Value             *big.Int
}

// EncodedSize returns the total encoded size of CreateValidatorCall
func (t CreateValidatorCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Description.EncodedSize()
	dynamicSize += abi.SizeString(t.Pubkey)

	return CreateValidatorCallStaticSize + dynamicSize
}

// EncodeTo encodes CreateValidatorCall to ABI bytes in the provided buffer
func (value CreateValidatorCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CreateValidatorCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Description: (string,string,string,string,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Description.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field CommissionRates: (uint256,uint256,uint256)
	if _, err := value.CommissionRates.EncodeTo(buf[32:]); err != nil {
		return 0, err
	}

	// Field MinSelfDelegation: uint256
	if _, err := abi.EncodeUint256(value.MinSelfDelegation, buf[128:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: address
	if _, err := abi.EncodeAddress(value.ValidatorAddress, buf[160:]); err != nil {
		return 0, err
	}

	// Field Pubkey: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[192+24:192+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Pubkey, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Value: uint256
	if _, err := abi.EncodeUint256(value.Value, buf[224:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CreateValidatorCall to ABI bytes
func (value CreateValidatorCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CreateValidatorCall from ABI bytes in the provided buffer
func (t *CreateValidatorCall) Decode(data []byte) (int, error) {
	if len(data) < 256 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 256
	// Decode dynamic field Description
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Description")
		}
		n, err = t.Description.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field CommissionRates: (uint256,uint256,uint256)
	_, err = t.CommissionRates.Decode(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field MinSelfDelegation: uint256
	t.MinSelfDelegation, _, err = abi.DecodeUint256(data[128:])
	if err != nil {
		return 0, err
	}
	// Decode static field ValidatorAddress: address
	t.ValidatorAddress, _, err = abi.DecodeAddress(data[160:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Pubkey
	{
		offset := int(binary.BigEndian.Uint64(data[192+24 : 192+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Pubkey")
		}
		t.Pubkey, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Value: uint256
	t.Value, _, err = abi.DecodeUint256(data[224:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t CreateValidatorCall) GetMethodName() string {
	return "createValidator"
}

// GetMethodID returns the function name
func (t CreateValidatorCall) GetMethodID() [4]byte {
	return CreateValidatorSelector
}

// EncodeWithSelector encodes createValidator arguments to ABI bytes including function selector
func (t CreateValidatorCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], CreateValidatorSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const CreateValidatorReturnStaticSize = 32

// CreateValidatorReturn represents an ABI tuple
type CreateValidatorReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of CreateValidatorReturn
func (t CreateValidatorReturn) EncodedSize() int {
	dynamicSize := 0

	return CreateValidatorReturnStaticSize + dynamicSize
}

// EncodeTo encodes CreateValidatorReturn to ABI bytes in the provided buffer
func (value CreateValidatorReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CreateValidatorReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CreateValidatorReturn to ABI bytes
func (value CreateValidatorReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CreateValidatorReturn from ABI bytes in the provided buffer
func (t *CreateValidatorReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const DelegateCallStaticSize = 96

// DelegateCall represents an ABI tuple
type DelegateCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
	Amount           *big.Int
}

// EncodedSize returns the total encoded size of DelegateCall
func (t DelegateCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return DelegateCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegateCall to ABI bytes in the provided buffer
func (value DelegateCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegateCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegateCall to ABI bytes
func (value DelegateCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegateCall from ABI bytes in the provided buffer
func (t *DelegateCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegateCall) GetMethodName() string {
	return "delegate"
}

// GetMethodID returns the function name
func (t DelegateCall) GetMethodID() [4]byte {
	return DelegateSelector
}

// EncodeWithSelector encodes delegate arguments to ABI bytes including function selector
func (t DelegateCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegateSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegateReturnStaticSize = 32

// DelegateReturn represents an ABI tuple
type DelegateReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of DelegateReturn
func (t DelegateReturn) EncodedSize() int {
	dynamicSize := 0

	return DelegateReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegateReturn to ABI bytes in the provided buffer
func (value DelegateReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegateReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegateReturn to ABI bytes
func (value DelegateReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegateReturn from ABI bytes in the provided buffer
func (t *DelegateReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const DelegationCallStaticSize = 64

// DelegationCall represents an ABI tuple
type DelegationCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of DelegationCall
func (t DelegationCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return DelegationCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegationCall to ABI bytes in the provided buffer
func (value DelegationCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationCall to ABI bytes
func (value DelegationCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationCall from ABI bytes in the provided buffer
func (t *DelegationCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegationCall) GetMethodName() string {
	return "delegation"
}

// GetMethodID returns the function name
func (t DelegationCall) GetMethodID() [4]byte {
	return DelegationSelector
}

// EncodeWithSelector encodes delegation arguments to ABI bytes including function selector
func (t DelegationCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegationSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegationReturnStaticSize = 64

// DelegationReturn represents an ABI tuple
type DelegationReturn struct {
	Shares  *big.Int
	Balance cmn.Coin
}

// EncodedSize returns the total encoded size of DelegationReturn
func (t DelegationReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Balance.EncodedSize()

	return DelegationReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegationReturn to ABI bytes in the provided buffer
func (value DelegationReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Shares: uint256
	if _, err := abi.EncodeUint256(value.Shares, buf[0:]); err != nil {
		return 0, err
	}

	// Field Balance: (string,uint256)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Balance.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationReturn to ABI bytes
func (value DelegationReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationReturn from ABI bytes in the provided buffer
func (t *DelegationReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field Shares: uint256
	t.Shares, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Balance
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Balance")
		}
		n, err = t.Balance.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const EditValidatorCallStaticSize = 128

// EditValidatorCall represents an ABI tuple
type EditValidatorCall struct {
	Description       Description
	ValidatorAddress  common.Address
	CommissionRate    *big.Int
	MinSelfDelegation *big.Int
}

// EncodedSize returns the total encoded size of EditValidatorCall
func (t EditValidatorCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Description.EncodedSize()

	return EditValidatorCallStaticSize + dynamicSize
}

// EncodeTo encodes EditValidatorCall to ABI bytes in the provided buffer
func (value EditValidatorCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := EditValidatorCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Description: (string,string,string,string,string)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Description.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorAddress: address
	if _, err := abi.EncodeAddress(value.ValidatorAddress, buf[32:]); err != nil {
		return 0, err
	}

	// Field CommissionRate: int256
	if _, err := abi.EncodeInt256(value.CommissionRate, buf[64:]); err != nil {
		return 0, err
	}

	// Field MinSelfDelegation: int256
	if _, err := abi.EncodeInt256(value.MinSelfDelegation, buf[96:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes EditValidatorCall to ABI bytes
func (value EditValidatorCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes EditValidatorCall from ABI bytes in the provided buffer
func (t *EditValidatorCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode dynamic field Description
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Description")
		}
		n, err = t.Description.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field ValidatorAddress: address
	t.ValidatorAddress, _, err = abi.DecodeAddress(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field CommissionRate: int256
	t.CommissionRate, _, err = abi.DecodeInt256(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode static field MinSelfDelegation: int256
	t.MinSelfDelegation, _, err = abi.DecodeInt256(data[96:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t EditValidatorCall) GetMethodName() string {
	return "editValidator"
}

// GetMethodID returns the function name
func (t EditValidatorCall) GetMethodID() [4]byte {
	return EditValidatorSelector
}

// EncodeWithSelector encodes editValidator arguments to ABI bytes including function selector
func (t EditValidatorCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], EditValidatorSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const EditValidatorReturnStaticSize = 32

// EditValidatorReturn represents an ABI tuple
type EditValidatorReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of EditValidatorReturn
func (t EditValidatorReturn) EncodedSize() int {
	dynamicSize := 0

	return EditValidatorReturnStaticSize + dynamicSize
}

// EncodeTo encodes EditValidatorReturn to ABI bytes in the provided buffer
func (value EditValidatorReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := EditValidatorReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes EditValidatorReturn to ABI bytes
func (value EditValidatorReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes EditValidatorReturn from ABI bytes in the provided buffer
func (t *EditValidatorReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const RedelegateCallStaticSize = 128

// RedelegateCall represents an ABI tuple
type RedelegateCall struct {
	DelegatorAddress    common.Address
	ValidatorSrcAddress string
	ValidatorDstAddress string
	Amount              *big.Int
}

// EncodedSize returns the total encoded size of RedelegateCall
func (t RedelegateCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorSrcAddress)
	dynamicSize += abi.SizeString(t.ValidatorDstAddress)

	return RedelegateCallStaticSize + dynamicSize
}

// EncodeTo encodes RedelegateCall to ABI bytes in the provided buffer
func (value RedelegateCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegateCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorSrcAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorSrcAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field ValidatorDstAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorDstAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[96:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes RedelegateCall to ABI bytes
func (value RedelegateCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegateCall from ABI bytes in the provided buffer
func (t *RedelegateCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorSrcAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorSrcAddress")
		}
		t.ValidatorSrcAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field ValidatorDstAddress
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorDstAddress")
		}
		t.ValidatorDstAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[96:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t RedelegateCall) GetMethodName() string {
	return "redelegate"
}

// GetMethodID returns the function name
func (t RedelegateCall) GetMethodID() [4]byte {
	return RedelegateSelector
}

// EncodeWithSelector encodes redelegate arguments to ABI bytes including function selector
func (t RedelegateCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], RedelegateSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const RedelegateReturnStaticSize = 32

// RedelegateReturn represents an ABI tuple
type RedelegateReturn struct {
	CompletionTime int64
}

// EncodedSize returns the total encoded size of RedelegateReturn
func (t RedelegateReturn) EncodedSize() int {
	dynamicSize := 0

	return RedelegateReturnStaticSize + dynamicSize
}

// EncodeTo encodes RedelegateReturn to ABI bytes in the provided buffer
func (value RedelegateReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegateReturnStaticSize // Start dynamic data after static section
	// Field CompletionTime: int64
	if _, err := abi.EncodeInt64(value.CompletionTime, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes RedelegateReturn to ABI bytes
func (value RedelegateReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegateReturn from ABI bytes in the provided buffer
func (t *RedelegateReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field CompletionTime: int64
	t.CompletionTime, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const RedelegationCallStaticSize = 96

// RedelegationCall represents an ABI tuple
type RedelegationCall struct {
	DelegatorAddress    common.Address
	SrcValidatorAddress string
	DstValidatorAddress string
}

// EncodedSize returns the total encoded size of RedelegationCall
func (t RedelegationCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.SrcValidatorAddress)
	dynamicSize += abi.SizeString(t.DstValidatorAddress)

	return RedelegationCallStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationCall to ABI bytes in the provided buffer
func (value RedelegationCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field SrcValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.SrcValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field DstValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.DstValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationCall to ABI bytes
func (value RedelegationCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationCall from ABI bytes in the provided buffer
func (t *RedelegationCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field SrcValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field SrcValidatorAddress")
		}
		t.SrcValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field DstValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DstValidatorAddress")
		}
		t.DstValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t RedelegationCall) GetMethodName() string {
	return "redelegation"
}

// GetMethodID returns the function name
func (t RedelegationCall) GetMethodID() [4]byte {
	return RedelegationSelector
}

// EncodeWithSelector encodes redelegation arguments to ABI bytes including function selector
func (t RedelegationCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], RedelegationSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const RedelegationReturnStaticSize = 32

// RedelegationReturn represents an ABI tuple
type RedelegationReturn struct {
	Redelegation RedelegationOutput
}

// EncodedSize returns the total encoded size of RedelegationReturn
func (t RedelegationReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Redelegation.EncodedSize()

	return RedelegationReturnStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationReturn to ABI bytes in the provided buffer
func (value RedelegationReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Redelegation: (string,string,string,(int64,int64,uint256,uint256)[])
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Redelegation.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationReturn to ABI bytes
func (value RedelegationReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationReturn from ABI bytes in the provided buffer
func (t *RedelegationReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Redelegation
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Redelegation")
		}
		n, err = t.Redelegation.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const RedelegationsCallStaticSize = 128

// RedelegationsCall represents an ABI tuple
type RedelegationsCall struct {
	DelegatorAddress    common.Address
	SrcValidatorAddress string
	DstValidatorAddress string
	PageRequest         cmn.PageRequest
}

// EncodedSize returns the total encoded size of RedelegationsCall
func (t RedelegationsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.SrcValidatorAddress)
	dynamicSize += abi.SizeString(t.DstValidatorAddress)
	dynamicSize += t.PageRequest.EncodedSize()

	return RedelegationsCallStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationsCall to ABI bytes in the provided buffer
func (value RedelegationsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field SrcValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.SrcValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field DstValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.DstValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageRequest: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageRequest.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationsCall to ABI bytes
func (value RedelegationsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationsCall from ABI bytes in the provided buffer
func (t *RedelegationsCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field SrcValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field SrcValidatorAddress")
		}
		t.SrcValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field DstValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DstValidatorAddress")
		}
		t.DstValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageRequest
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageRequest")
		}
		n, err = t.PageRequest.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t RedelegationsCall) GetMethodName() string {
	return "redelegations"
}

// GetMethodID returns the function name
func (t RedelegationsCall) GetMethodID() [4]byte {
	return RedelegationsSelector
}

// EncodeWithSelector encodes redelegations arguments to ABI bytes including function selector
func (t RedelegationsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], RedelegationsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const RedelegationsReturnStaticSize = 64

// RedelegationsReturn represents an ABI tuple
type RedelegationsReturn struct {
	Response     []RedelegationResponse
	PageResponse PageResponse
}

// EncodedSize returns the total encoded size of RedelegationsReturn
func (t RedelegationsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeRedelegationResponseSlice(t.Response)
	dynamicSize += t.PageResponse.EncodedSize()

	return RedelegationsReturnStaticSize + dynamicSize
}

// EncodeTo encodes RedelegationsReturn to ABI bytes in the provided buffer
func (value RedelegationsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegationsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Response: ((string,string,string,(int64,int64,uint256,uint256)[]),((int64,int64,uint256,uint256),uint256)[])[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeRedelegationResponseSlice(value.Response, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes RedelegationsReturn to ABI bytes
func (value RedelegationsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegationsReturn from ABI bytes in the provided buffer
func (t *RedelegationsReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Response
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Response")
		}
		t.Response, n, err = DecodeRedelegationResponseSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const UnbondingDelegationCallStaticSize = 64

// UnbondingDelegationCall represents an ABI tuple
type UnbondingDelegationCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of UnbondingDelegationCall
func (t UnbondingDelegationCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return UnbondingDelegationCallStaticSize + dynamicSize
}

// EncodeTo encodes UnbondingDelegationCall to ABI bytes in the provided buffer
func (value UnbondingDelegationCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnbondingDelegationCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes UnbondingDelegationCall to ABI bytes
func (value UnbondingDelegationCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnbondingDelegationCall from ABI bytes in the provided buffer
func (t *UnbondingDelegationCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t UnbondingDelegationCall) GetMethodName() string {
	return "unbondingDelegation"
}

// GetMethodID returns the function name
func (t UnbondingDelegationCall) GetMethodID() [4]byte {
	return UnbondingDelegationSelector
}

// EncodeWithSelector encodes unbondingDelegation arguments to ABI bytes including function selector
func (t UnbondingDelegationCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], UnbondingDelegationSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const UnbondingDelegationReturnStaticSize = 32

// UnbondingDelegationReturn represents an ABI tuple
type UnbondingDelegationReturn struct {
	UnbondingDelegation UnbondingDelegationOutput
}

// EncodedSize returns the total encoded size of UnbondingDelegationReturn
func (t UnbondingDelegationReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.UnbondingDelegation.EncodedSize()

	return UnbondingDelegationReturnStaticSize + dynamicSize
}

// EncodeTo encodes UnbondingDelegationReturn to ABI bytes in the provided buffer
func (value UnbondingDelegationReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnbondingDelegationReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field UnbondingDelegation: (string,string,(int64,int64,uint256,uint256,uint64,int64)[])
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.UnbondingDelegation.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes UnbondingDelegationReturn to ABI bytes
func (value UnbondingDelegationReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnbondingDelegationReturn from ABI bytes in the provided buffer
func (t *UnbondingDelegationReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field UnbondingDelegation
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field UnbondingDelegation")
		}
		n, err = t.UnbondingDelegation.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const UndelegateCallStaticSize = 96

// UndelegateCall represents an ABI tuple
type UndelegateCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
	Amount           *big.Int
}

// EncodedSize returns the total encoded size of UndelegateCall
func (t UndelegateCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return UndelegateCallStaticSize + dynamicSize
}

// EncodeTo encodes UndelegateCall to ABI bytes in the provided buffer
func (value UndelegateCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UndelegateCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[64:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UndelegateCall to ABI bytes
func (value UndelegateCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UndelegateCall from ABI bytes in the provided buffer
func (t *UndelegateCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[64:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t UndelegateCall) GetMethodName() string {
	return "undelegate"
}

// GetMethodID returns the function name
func (t UndelegateCall) GetMethodID() [4]byte {
	return UndelegateSelector
}

// EncodeWithSelector encodes undelegate arguments to ABI bytes including function selector
func (t UndelegateCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], UndelegateSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const UndelegateReturnStaticSize = 32

// UndelegateReturn represents an ABI tuple
type UndelegateReturn struct {
	CompletionTime int64
}

// EncodedSize returns the total encoded size of UndelegateReturn
func (t UndelegateReturn) EncodedSize() int {
	dynamicSize := 0

	return UndelegateReturnStaticSize + dynamicSize
}

// EncodeTo encodes UndelegateReturn to ABI bytes in the provided buffer
func (value UndelegateReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UndelegateReturnStaticSize // Start dynamic data after static section
	// Field CompletionTime: int64
	if _, err := abi.EncodeInt64(value.CompletionTime, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UndelegateReturn to ABI bytes
func (value UndelegateReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UndelegateReturn from ABI bytes in the provided buffer
func (t *UndelegateReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field CompletionTime: int64
	t.CompletionTime, _, err = abi.DecodeInt64(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const ValidatorCallStaticSize = 32

// ValidatorCall represents an ABI tuple
type ValidatorCall struct {
	ValidatorAddress common.Address
}

// EncodedSize returns the total encoded size of ValidatorCall
func (t ValidatorCall) EncodedSize() int {
	dynamicSize := 0

	return ValidatorCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorCall to ABI bytes in the provided buffer
func (value ValidatorCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorCallStaticSize // Start dynamic data after static section
	// Field ValidatorAddress: address
	if _, err := abi.EncodeAddress(value.ValidatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ValidatorCall to ABI bytes
func (value ValidatorCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorCall from ABI bytes in the provided buffer
func (t *ValidatorCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field ValidatorAddress: address
	t.ValidatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorCall) GetMethodName() string {
	return "validator"
}

// GetMethodID returns the function name
func (t ValidatorCall) GetMethodID() [4]byte {
	return ValidatorSelector
}

// EncodeWithSelector encodes validator arguments to ABI bytes including function selector
func (t ValidatorCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorReturnStaticSize = 32

// ValidatorReturn represents an ABI tuple
type ValidatorReturn struct {
	Validator Validator
}

// EncodedSize returns the total encoded size of ValidatorReturn
func (t ValidatorReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.Validator.EncodedSize()

	return ValidatorReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorReturn to ABI bytes in the provided buffer
func (value ValidatorReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Validator: (string,string,bool,uint8,uint256,uint256,(string,string,string,string,string),int64,int64,uint256,uint256)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.Validator.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorReturn to ABI bytes
func (value ValidatorReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorReturn from ABI bytes in the provided buffer
func (t *ValidatorReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Validator
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Validator")
		}
		n, err = t.Validator.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorsCallStaticSize = 64

// ValidatorsCall represents an ABI tuple
type ValidatorsCall struct {
	Status      string
	PageRequest cmn.PageRequest
}

// EncodedSize returns the total encoded size of ValidatorsCall
func (t ValidatorsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Status)
	dynamicSize += t.PageRequest.EncodedSize()

	return ValidatorsCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorsCall to ABI bytes in the provided buffer
func (value ValidatorsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Status: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Status, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageRequest: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageRequest.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorsCall to ABI bytes
func (value ValidatorsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorsCall from ABI bytes in the provided buffer
func (t *ValidatorsCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Status
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Status")
		}
		t.Status, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageRequest
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageRequest")
		}
		n, err = t.PageRequest.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorsCall) GetMethodName() string {
	return "validators"
}

// GetMethodID returns the function name
func (t ValidatorsCall) GetMethodID() [4]byte {
	return ValidatorsSelector
}

// EncodeWithSelector encodes validators arguments to ABI bytes including function selector
func (t ValidatorsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorsReturnStaticSize = 64

// ValidatorsReturn represents an ABI tuple
type ValidatorsReturn struct {
	Validators   []Validator
	PageResponse PageResponse
}

// EncodedSize returns the total encoded size of ValidatorsReturn
func (t ValidatorsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeValidatorSlice(t.Validators)
	dynamicSize += t.PageResponse.EncodedSize()

	return ValidatorsReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorsReturn to ABI bytes in the provided buffer
func (value ValidatorsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Validators: (string,string,bool,uint8,uint256,uint256,(string,string,string,string,string),int64,int64,uint256,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeValidatorSlice(value.Validators, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorsReturn to ABI bytes
func (value ValidatorsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorsReturn from ABI bytes in the provided buffer
func (t *ValidatorsReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Validators
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Validators")
		}
		t.Validators, n, err = DecodeValidatorSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// Event signatures
var (
	// CancelUnbondingDelegation(address,address,uint256,uint256)
	CancelUnbondingDelegationEventTopic = common.Hash{0x6d, 0xbe, 0x2f, 0xb6, 0xb2, 0x61, 0x3b, 0xdd, 0x8e, 0x3d, 0x28, 0x4a, 0x61, 0x11, 0x59, 0x2e, 0x06, 0xc3, 0xab, 0x0a, 0xf8, 0x46, 0xff, 0x89, 0xb6, 0x68, 0x8d, 0x48, 0xf4, 0x08, 0xdb, 0xb5}
	// CreateValidator(address,uint256)
	CreateValidatorEventTopic = common.Hash{0x9b, 0xdb, 0x56, 0x0f, 0x81, 0x35, 0xcb, 0x46, 0x03, 0x3a, 0x55, 0x41, 0x0c, 0x14, 0xe1, 0x4b, 0x1a, 0x7b, 0xc2, 0xd3, 0xf3, 0xe9, 0x97, 0x3f, 0x4b, 0x49, 0x53, 0x3e, 0x17, 0x64, 0x68, 0xb0}
	// Delegate(address,address,uint256,uint256)
	DelegateEventTopic = common.Hash{0x50, 0x05, 0x99, 0x80, 0x21, 0x64, 0xa0, 0x80, 0x23, 0xe8, 0x7f, 0xfc, 0x3e, 0xed, 0x0b, 0xa3, 0xae, 0x60, 0x69, 0x7b, 0x30, 0x83, 0xba, 0x81, 0xd0, 0x46, 0x68, 0x36, 0x79, 0xd8, 0x1c, 0x6b}
	// EditValidator(address,int256,int256)
	EditValidatorEventTopic = common.Hash{0xdc, 0xe2, 0x7c, 0xf2, 0x79, 0x2b, 0xd8, 0xd8, 0xf2, 0x8d, 0xf5, 0xd2, 0xcd, 0xf3, 0x79, 0xcd, 0x59, 0x34, 0x14, 0xf2, 0x13, 0x32, 0x37, 0x0c, 0xa8, 0x08, 0xc1, 0xe7, 0x03, 0xeb, 0x4e, 0x1f}
	// Redelegate(address,address,address,uint256,uint256)
	RedelegateEventTopic = common.Hash{0x82, 0xb0, 0x7f, 0x24, 0x21, 0x47, 0x4f, 0x1e, 0x3f, 0x1e, 0x0b, 0x34, 0x73, 0x8c, 0xb5, 0xff, 0xb9, 0x25, 0x27, 0x3f, 0x40, 0x8e, 0x75, 0x91, 0xd9, 0xc8, 0x03, 0xdc, 0xae, 0x8d, 0xa6, 0x57}
	// Unbond(address,address,uint256,uint256)
	UnbondEventTopic = common.Hash{0x4b, 0xf8, 0x08, 0x7b, 0xe3, 0xb8, 0xa5, 0x9c, 0x26, 0x62, 0x51, 0x4d, 0xf2, 0xed, 0x4a, 0x3d, 0xca, 0xf9, 0xca, 0x22, 0xf4, 0x42, 0x34, 0x0c, 0xfc, 0x05, 0xa4, 0xe5, 0x23, 0x43, 0xd1, 0x8e}
)

// CancelUnbondingDelegationEvent represents the CancelUnbondingDelegation event
type CancelUnbondingDelegationEvent struct {
	CancelUnbondingDelegationEventIndexed
	CancelUnbondingDelegationEventData
}

// NewCancelUnbondingDelegationEvent constructs a new CancelUnbondingDelegation event
func NewCancelUnbondingDelegationEvent(
	delegatorAddress common.Address,
	validatorAddress common.Address,
	amount *big.Int,
	creationHeight *big.Int,
) CancelUnbondingDelegationEvent {
	return CancelUnbondingDelegationEvent{
		CancelUnbondingDelegationEventIndexed: CancelUnbondingDelegationEventIndexed{
			DelegatorAddress: delegatorAddress,
			ValidatorAddress: validatorAddress,
		},
		CancelUnbondingDelegationEventData: CancelUnbondingDelegationEventData{
			Amount:         amount,
			CreationHeight: creationHeight,
		},
	}
}

// GetEventName returns the event name
func (e CancelUnbondingDelegationEvent) GetEventName() string {
	return "CancelUnbondingDelegation"
}

// GetEventID returns the event ID (topic)
func (e CancelUnbondingDelegationEvent) GetEventID() common.Hash {
	return CancelUnbondingDelegationEventTopic
}

// CancelUnbondingDelegation represents an ABI event
type CancelUnbondingDelegationEventIndexed struct {
	DelegatorAddress common.Address
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of CancelUnbondingDelegation event to topics
func (e CancelUnbondingDelegationEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, CancelUnbondingDelegationEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of CancelUnbondingDelegation event from topics, ignore hash topics
func (e *CancelUnbondingDelegationEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for CancelUnbondingDelegation event: expected 3, got %d", len(topics))
	}
	if topics[0] != CancelUnbondingDelegationEventTopic {
		return fmt.Errorf("invalid event topic for CancelUnbondingDelegation event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const CancelUnbondingDelegationEventDataStaticSize = 64

// CancelUnbondingDelegationEventData represents an ABI tuple
type CancelUnbondingDelegationEventData struct {
	Amount         *big.Int
	CreationHeight *big.Int
}

// EncodedSize returns the total encoded size of CancelUnbondingDelegationEventData
func (t CancelUnbondingDelegationEventData) EncodedSize() int {
	dynamicSize := 0

	return CancelUnbondingDelegationEventDataStaticSize + dynamicSize
}

// EncodeTo encodes CancelUnbondingDelegationEventData to ABI bytes in the provided buffer
func (value CancelUnbondingDelegationEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CancelUnbondingDelegationEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	// Field CreationHeight: uint256
	if _, err := abi.EncodeUint256(value.CreationHeight, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CancelUnbondingDelegationEventData to ABI bytes
func (value CancelUnbondingDelegationEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CancelUnbondingDelegationEventData from ABI bytes in the provided buffer
func (t *CancelUnbondingDelegationEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field CreationHeight: uint256
	t.CreationHeight, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// CreateValidatorEvent represents the CreateValidator event
type CreateValidatorEvent struct {
	CreateValidatorEventIndexed
	CreateValidatorEventData
}

// NewCreateValidatorEvent constructs a new CreateValidator event
func NewCreateValidatorEvent(
	validatorAddress common.Address,
	value *big.Int,
) CreateValidatorEvent {
	return CreateValidatorEvent{
		CreateValidatorEventIndexed: CreateValidatorEventIndexed{
			ValidatorAddress: validatorAddress,
		},
		CreateValidatorEventData: CreateValidatorEventData{
			Value: value,
		},
	}
}

// GetEventName returns the event name
func (e CreateValidatorEvent) GetEventName() string {
	return "CreateValidator"
}

// GetEventID returns the event ID (topic)
func (e CreateValidatorEvent) GetEventID() common.Hash {
	return CreateValidatorEventTopic
}

// CreateValidator represents an ABI event
type CreateValidatorEventIndexed struct {
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of CreateValidator event to topics
func (e CreateValidatorEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, CreateValidatorEventTopic)
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of CreateValidator event from topics, ignore hash topics
func (e *CreateValidatorEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for CreateValidator event: expected 2, got %d", len(topics))
	}
	if topics[0] != CreateValidatorEventTopic {
		return fmt.Errorf("invalid event topic for CreateValidator event")
	}
	var err error
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const CreateValidatorEventDataStaticSize = 32

// CreateValidatorEventData represents an ABI tuple
type CreateValidatorEventData struct {
	Value *big.Int
}

// EncodedSize returns the total encoded size of CreateValidatorEventData
func (t CreateValidatorEventData) EncodedSize() int {
	dynamicSize := 0

	return CreateValidatorEventDataStaticSize + dynamicSize
}

// EncodeTo encodes CreateValidatorEventData to ABI bytes in the provided buffer
func (value CreateValidatorEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CreateValidatorEventDataStaticSize // Start dynamic data after static section
	// Field Value: uint256
	if _, err := abi.EncodeUint256(value.Value, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes CreateValidatorEventData to ABI bytes
func (value CreateValidatorEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CreateValidatorEventData from ABI bytes in the provided buffer
func (t *CreateValidatorEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Value: uint256
	t.Value, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// DelegateEvent represents the Delegate event
type DelegateEvent struct {
	DelegateEventIndexed
	DelegateEventData
}

// NewDelegateEvent constructs a new Delegate event
func NewDelegateEvent(
	delegatorAddress common.Address,
	validatorAddress common.Address,
	amount *big.Int,
	newShares *big.Int,
) DelegateEvent {
	return DelegateEvent{
		DelegateEventIndexed: DelegateEventIndexed{
			DelegatorAddress: delegatorAddress,
			ValidatorAddress: validatorAddress,
		},
		DelegateEventData: DelegateEventData{
			Amount:    amount,
			NewShares: newShares,
		},
	}
}

// GetEventName returns the event name
func (e DelegateEvent) GetEventName() string {
	return "Delegate"
}

// GetEventID returns the event ID (topic)
func (e DelegateEvent) GetEventID() common.Hash {
	return DelegateEventTopic
}

// Delegate represents an ABI event
type DelegateEventIndexed struct {
	DelegatorAddress common.Address
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of Delegate event to topics
func (e DelegateEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, DelegateEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Delegate event from topics, ignore hash topics
func (e *DelegateEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for Delegate event: expected 3, got %d", len(topics))
	}
	if topics[0] != DelegateEventTopic {
		return fmt.Errorf("invalid event topic for Delegate event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const DelegateEventDataStaticSize = 64

// DelegateEventData represents an ABI tuple
type DelegateEventData struct {
	Amount    *big.Int
	NewShares *big.Int
}

// EncodedSize returns the total encoded size of DelegateEventData
func (t DelegateEventData) EncodedSize() int {
	dynamicSize := 0

	return DelegateEventDataStaticSize + dynamicSize
}

// EncodeTo encodes DelegateEventData to ABI bytes in the provided buffer
func (value DelegateEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegateEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	// Field NewShares: uint256
	if _, err := abi.EncodeUint256(value.NewShares, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegateEventData to ABI bytes
func (value DelegateEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegateEventData from ABI bytes in the provided buffer
func (t *DelegateEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field NewShares: uint256
	t.NewShares, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EditValidatorEvent represents the EditValidator event
type EditValidatorEvent struct {
	EditValidatorEventIndexed
	EditValidatorEventData
}

// NewEditValidatorEvent constructs a new EditValidator event
func NewEditValidatorEvent(
	validatorAddress common.Address,
	commissionRate *big.Int,
	minSelfDelegation *big.Int,
) EditValidatorEvent {
	return EditValidatorEvent{
		EditValidatorEventIndexed: EditValidatorEventIndexed{
			ValidatorAddress: validatorAddress,
		},
		EditValidatorEventData: EditValidatorEventData{
			CommissionRate:    commissionRate,
			MinSelfDelegation: minSelfDelegation,
		},
	}
}

// GetEventName returns the event name
func (e EditValidatorEvent) GetEventName() string {
	return "EditValidator"
}

// GetEventID returns the event ID (topic)
func (e EditValidatorEvent) GetEventID() common.Hash {
	return EditValidatorEventTopic
}

// EditValidator represents an ABI event
type EditValidatorEventIndexed struct {
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of EditValidator event to topics
func (e EditValidatorEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, EditValidatorEventTopic)
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of EditValidator event from topics, ignore hash topics
func (e *EditValidatorEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for EditValidator event: expected 2, got %d", len(topics))
	}
	if topics[0] != EditValidatorEventTopic {
		return fmt.Errorf("invalid event topic for EditValidator event")
	}
	var err error
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const EditValidatorEventDataStaticSize = 64

// EditValidatorEventData represents an ABI tuple
type EditValidatorEventData struct {
	CommissionRate    *big.Int
	MinSelfDelegation *big.Int
}

// EncodedSize returns the total encoded size of EditValidatorEventData
func (t EditValidatorEventData) EncodedSize() int {
	dynamicSize := 0

	return EditValidatorEventDataStaticSize + dynamicSize
}

// EncodeTo encodes EditValidatorEventData to ABI bytes in the provided buffer
func (value EditValidatorEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := EditValidatorEventDataStaticSize // Start dynamic data after static section
	// Field CommissionRate: int256
	if _, err := abi.EncodeInt256(value.CommissionRate, buf[0:]); err != nil {
		return 0, err
	}

	// Field MinSelfDelegation: int256
	if _, err := abi.EncodeInt256(value.MinSelfDelegation, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes EditValidatorEventData to ABI bytes
func (value EditValidatorEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes EditValidatorEventData from ABI bytes in the provided buffer
func (t *EditValidatorEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field CommissionRate: int256
	t.CommissionRate, _, err = abi.DecodeInt256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field MinSelfDelegation: int256
	t.MinSelfDelegation, _, err = abi.DecodeInt256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// RedelegateEvent represents the Redelegate event
type RedelegateEvent struct {
	RedelegateEventIndexed
	RedelegateEventData
}

// NewRedelegateEvent constructs a new Redelegate event
func NewRedelegateEvent(
	delegatorAddress common.Address,
	validatorSrcAddress common.Address,
	validatorDstAddress common.Address,
	amount *big.Int,
	completionTime *big.Int,
) RedelegateEvent {
	return RedelegateEvent{
		RedelegateEventIndexed: RedelegateEventIndexed{
			DelegatorAddress:    delegatorAddress,
			ValidatorSrcAddress: validatorSrcAddress,
			ValidatorDstAddress: validatorDstAddress,
		},
		RedelegateEventData: RedelegateEventData{
			Amount:         amount,
			CompletionTime: completionTime,
		},
	}
}

// GetEventName returns the event name
func (e RedelegateEvent) GetEventName() string {
	return "Redelegate"
}

// GetEventID returns the event ID (topic)
func (e RedelegateEvent) GetEventID() common.Hash {
	return RedelegateEventTopic
}

// Redelegate represents an ABI event
type RedelegateEventIndexed struct {
	DelegatorAddress    common.Address
	ValidatorSrcAddress common.Address
	ValidatorDstAddress common.Address
}

// EncodeTopics encodes indexed fields of Redelegate event to topics
func (e RedelegateEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 4)
	topics = append(topics, RedelegateEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorSrcAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorSrcAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorDstAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorDstAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Redelegate event from topics, ignore hash topics
func (e *RedelegateEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 4 {
		return fmt.Errorf("invalid number of topics for Redelegate event: expected 4, got %d", len(topics))
	}
	if topics[0] != RedelegateEventTopic {
		return fmt.Errorf("invalid event topic for Redelegate event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorSrcAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	e.ValidatorDstAddress, _, err = abi.DecodeAddress(topics[3][:])
	if err != nil {
		return err
	}
	return nil
}

const RedelegateEventDataStaticSize = 64

// RedelegateEventData represents an ABI tuple
type RedelegateEventData struct {
	Amount         *big.Int
	CompletionTime *big.Int
}

// EncodedSize returns the total encoded size of RedelegateEventData
func (t RedelegateEventData) EncodedSize() int {
	dynamicSize := 0

	return RedelegateEventDataStaticSize + dynamicSize
}

// EncodeTo encodes RedelegateEventData to ABI bytes in the provided buffer
func (value RedelegateEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := RedelegateEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	// Field CompletionTime: uint256
	if _, err := abi.EncodeUint256(value.CompletionTime, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes RedelegateEventData to ABI bytes
func (value RedelegateEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes RedelegateEventData from ABI bytes in the provided buffer
func (t *RedelegateEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field CompletionTime: uint256
	t.CompletionTime, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// UnbondEvent represents the Unbond event
type UnbondEvent struct {
	UnbondEventIndexed
	UnbondEventData
}

// NewUnbondEvent constructs a new Unbond event
func NewUnbondEvent(
	delegatorAddress common.Address,
	validatorAddress common.Address,
	amount *big.Int,
	completionTime *big.Int,
) UnbondEvent {
	return UnbondEvent{
		UnbondEventIndexed: UnbondEventIndexed{
			DelegatorAddress: delegatorAddress,
			ValidatorAddress: validatorAddress,
		},
		UnbondEventData: UnbondEventData{
			Amount:         amount,
			CompletionTime: completionTime,
		},
	}
}

// GetEventName returns the event name
func (e UnbondEvent) GetEventName() string {
	return "Unbond"
}

// GetEventID returns the event ID (topic)
func (e UnbondEvent) GetEventID() common.Hash {
	return UnbondEventTopic
}

// Unbond represents an ABI event
type UnbondEventIndexed struct {
	DelegatorAddress common.Address
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of Unbond event to topics
func (e UnbondEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, UnbondEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of Unbond event from topics, ignore hash topics
func (e *UnbondEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for Unbond event: expected 3, got %d", len(topics))
	}
	if topics[0] != UnbondEventTopic {
		return fmt.Errorf("invalid event topic for Unbond event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const UnbondEventDataStaticSize = 64

// UnbondEventData represents an ABI tuple
type UnbondEventData struct {
	Amount         *big.Int
	CompletionTime *big.Int
}

// EncodedSize returns the total encoded size of UnbondEventData
func (t UnbondEventData) EncodedSize() int {
	dynamicSize := 0

	return UnbondEventDataStaticSize + dynamicSize
}

// EncodeTo encodes UnbondEventData to ABI bytes in the provided buffer
func (value UnbondEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := UnbondEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	// Field CompletionTime: uint256
	if _, err := abi.EncodeUint256(value.CompletionTime, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes UnbondEventData to ABI bytes
func (value UnbondEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes UnbondEventData from ABI bytes in the provided buffer
func (t *UnbondEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field CompletionTime: uint256
	t.CompletionTime, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}
