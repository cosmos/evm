// Code generated by go-abi. DO NOT EDIT.

package distribution

import (
	"encoding/binary"
	"errors"
	"fmt"
	"io"
	"math/big"

	cmn "github.com/cosmos/evm/precompiles/common"
	"github.com/ethereum/go-ethereum/common"
	"github.com/yihuang/go-abi"
)

// Function selectors
var (
	// claimRewards(address,uint32)
	ClaimRewardsSelector = [4]byte{0x2e, 0xfe, 0x8a, 0x5f}
	// communityPool()
	CommunityPoolSelector = [4]byte{0x14, 0xd1, 0x40, 0xb0}
	// delegationRewards(address,string)
	DelegationRewardsSelector = [4]byte{0x9a, 0xd5, 0x63, 0xb4}
	// delegationTotalRewards(address)
	DelegationTotalRewardsSelector = [4]byte{0x54, 0xbe, 0x1a, 0x28}
	// delegatorValidators(address)
	DelegatorValidatorsSelector = [4]byte{0xa6, 0x6c, 0xb6, 0x05}
	// delegatorWithdrawAddress(address)
	DelegatorWithdrawAddressSelector = [4]byte{0x54, 0x31, 0xf4, 0x50}
	// depositValidatorRewardsPool(address,string,(string,uint256)[])
	DepositValidatorRewardsPoolSelector = [4]byte{0x2e, 0xb1, 0xdf, 0x52}
	// fundCommunityPool(address,(string,uint256)[])
	FundCommunityPoolSelector = [4]byte{0x2d, 0x2b, 0x07, 0x9c}
	// setWithdrawAddress(address,string)
	SetWithdrawAddressSelector = [4]byte{0x5a, 0x9d, 0x9a, 0x96}
	// validatorCommission(string)
	ValidatorCommissionSelector = [4]byte{0x3d, 0xd4, 0x0f, 0x78}
	// validatorDistributionInfo(string)
	ValidatorDistributionInfoSelector = [4]byte{0x54, 0x21, 0x2a, 0x89}
	// validatorOutstandingRewards(string)
	ValidatorOutstandingRewardsSelector = [4]byte{0x85, 0xb2, 0xd2, 0xda}
	// validatorSlashes(string,uint64,uint64,(bytes,uint64,uint64,bool,bool))
	ValidatorSlashesSelector = [4]byte{0x8f, 0x24, 0x73, 0xce}
	// withdrawDelegatorRewards(address,string)
	WithdrawDelegatorRewardsSelector = [4]byte{0xb4, 0x6a, 0x8d, 0x61}
	// withdrawValidatorCommission(string)
	WithdrawValidatorCommissionSelector = [4]byte{0x3c, 0xe4, 0xe3, 0xbe}
)

// Big endian integer versions of function selectors
const (
	ClaimRewardsID                = 788433503
	CommunityPoolID               = 349257904
	DelegationRewardsID           = 2597675956
	DelegationTotalRewardsID      = 1421744680
	DelegatorValidatorsID         = 2792142341
	DelegatorWithdrawAddressID    = 1412559952
	DepositValidatorRewardsPoolID = 783408978
	FundCommunityPoolID           = 757794716
	SetWithdrawAddressID          = 1520278166
	ValidatorCommissionID         = 1037307768
	ValidatorDistributionInfoID   = 1411459721
	ValidatorOutstandingRewardsID = 2243089114
	ValidatorSlashesID            = 2401530830
	WithdrawDelegatorRewardsID    = 3026881889
	WithdrawValidatorCommissionID = 1021633470
)

const DelegationDelegatorRewardStaticSize = 64

// DelegationDelegatorReward represents an ABI tuple
type DelegationDelegatorReward struct {
	ValidatorAddress string
	Reward           []cmn.DecCoin
}

// EncodedSize returns the total encoded size of DelegationDelegatorReward
func (t DelegationDelegatorReward) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)
	dynamicSize += SizeDecCoinSlice(t.Reward)

	return DelegationDelegatorRewardStaticSize + dynamicSize
}

// EncodeTo encodes DelegationDelegatorReward to ABI bytes in the provided buffer
func (value DelegationDelegatorReward) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationDelegatorRewardStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Reward: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Reward, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationDelegatorReward to ABI bytes
func (value DelegationDelegatorReward) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationDelegatorReward from ABI bytes in the provided buffer
func (t *DelegationDelegatorReward) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Reward
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Reward")
		}
		t.Reward, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const PageResponseStaticSize = 64

// PageResponse represents an ABI tuple
type PageResponse struct {
	NextKey []byte
	Total   uint64
}

// EncodedSize returns the total encoded size of PageResponse
func (t PageResponse) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeBytes(t.NextKey)

	return PageResponseStaticSize + dynamicSize
}

// EncodeTo encodes PageResponse to ABI bytes in the provided buffer
func (value PageResponse) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := PageResponseStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field NextKey: bytes
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeBytes(value.NextKey, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Total: uint64
	if _, err := abi.EncodeUint64(value.Total, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes PageResponse to ABI bytes
func (value PageResponse) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes PageResponse from ABI bytes in the provided buffer
func (t *PageResponse) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field NextKey
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field NextKey")
		}
		t.NextKey, n, err = abi.DecodeBytes(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Total: uint64
	t.Total, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const ValidatorDistributionInfoStaticSize = 96

// ValidatorDistributionInfo represents an ABI tuple
type ValidatorDistributionInfo struct {
	OperatorAddress string
	SelfBondRewards []cmn.DecCoin
	Commission      []cmn.DecCoin
}

// EncodedSize returns the total encoded size of ValidatorDistributionInfo
func (t ValidatorDistributionInfo) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.OperatorAddress)
	dynamicSize += SizeDecCoinSlice(t.SelfBondRewards)
	dynamicSize += SizeDecCoinSlice(t.Commission)

	return ValidatorDistributionInfoStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorDistributionInfo to ABI bytes in the provided buffer
func (value ValidatorDistributionInfo) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorDistributionInfoStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field OperatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.OperatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field SelfBondRewards: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.SelfBondRewards, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Commission: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Commission, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorDistributionInfo to ABI bytes
func (value ValidatorDistributionInfo) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorDistributionInfo from ABI bytes in the provided buffer
func (t *ValidatorDistributionInfo) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode dynamic field OperatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field OperatorAddress")
		}
		t.OperatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field SelfBondRewards
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field SelfBondRewards")
		}
		t.SelfBondRewards, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Commission
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Commission")
		}
		t.Commission, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorSlashEventStaticSize = 96

// ValidatorSlashEvent represents an ABI tuple
type ValidatorSlashEvent struct {
	ValidatorPeriod uint64
	Fraction        cmn.Dec
}

// EncodedSize returns the total encoded size of ValidatorSlashEvent
func (t ValidatorSlashEvent) EncodedSize() int {
	dynamicSize := 0

	return ValidatorSlashEventStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorSlashEvent to ABI bytes in the provided buffer
func (value ValidatorSlashEvent) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorSlashEventStaticSize // Start dynamic data after static section
	// Field ValidatorPeriod: uint64
	if _, err := abi.EncodeUint64(value.ValidatorPeriod, buf[0:]); err != nil {
		return 0, err
	}

	// Field Fraction: (uint256,uint8)
	if _, err := value.Fraction.EncodeTo(buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ValidatorSlashEvent to ABI bytes
func (value ValidatorSlashEvent) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorSlashEvent from ABI bytes in the provided buffer
func (t *ValidatorSlashEvent) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 96
	// Decode static field ValidatorPeriod: uint64
	t.ValidatorPeriod, _, err = abi.DecodeUint64(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field Fraction: (uint256,uint8)
	_, err = t.Fraction.Decode(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// EncodeCoinSlice encodes (string,uint256)[] to ABI bytes
func EncodeCoinSlice(value []cmn.Coin, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeDecCoinSlice encodes (string,uint256,uint8)[] to ABI bytes
func EncodeDecCoinSlice(value []cmn.DecCoin, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeDelegationDelegatorRewardSlice encodes (string,(string,uint256,uint8)[])[] to ABI bytes
func EncodeDelegationDelegatorRewardSlice(value []DelegationDelegatorReward, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with dynamic types
	var offset int
	dynamicOffset := len(value) * 32
	for _, elem := range value {
		// Write offset for element
		offset += 32
		binary.BigEndian.PutUint64(buf[offset-8:offset], uint64(dynamicOffset))

		// Write element at dynamic region
		n, err := elem.EncodeTo(buf[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}

	return dynamicOffset + 32, nil
}

// EncodeValidatorSlashEventSlice encodes (uint64,(uint256,uint8))[] to ABI bytes
func EncodeValidatorSlashEventSlice(value []ValidatorSlashEvent, buf []byte) (int, error) {
	// Encode length
	binary.BigEndian.PutUint64(buf[24:32], uint64(len(value)))
	buf = buf[32:]

	// Encode elements with static types
	var offset int
	for _, elem := range value {
		n, err := elem.EncodeTo(buf[offset:])
		if err != nil {
			return 0, err
		}
		offset += n
	}

	return offset + 32, nil
}

// SizeCoinSlice returns the encoded size of (string,uint256)[]
func SizeCoinSlice(value []cmn.Coin) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeDecCoinSlice returns the encoded size of (string,uint256,uint8)[]
func SizeDecCoinSlice(value []cmn.DecCoin) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeDelegationDelegatorRewardSlice returns the encoded size of (string,(string,uint256,uint8)[])[]
func SizeDelegationDelegatorRewardSlice(value []DelegationDelegatorReward) int {
	size := 32 + 32*len(value) // length + offset pointers for dynamic elements
	for _, elem := range value {
		size += elem.EncodedSize()
	}
	return size
}

// SizeValidatorSlashEventSlice returns the encoded size of (uint64,(uint256,uint8))[]
func SizeValidatorSlashEventSlice(value []ValidatorSlashEvent) int {
	size := 32 + 96*len(value) // length + static elements
	return size
}

// DecodeCoinSlice decodes (string,uint256)[] from ABI bytes
func DecodeCoinSlice(data []byte) ([]cmn.Coin, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]cmn.Coin, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeDecCoinSlice decodes (string,uint256,uint8)[] from ABI bytes
func DecodeDecCoinSlice(data []byte) ([]cmn.DecCoin, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]cmn.DecCoin, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeDelegationDelegatorRewardSlice decodes (string,(string,uint256,uint8)[])[] from ABI bytes
func DecodeDelegationDelegatorRewardSlice(data []byte) ([]DelegationDelegatorReward, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 32*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with dynamic types
	result := make([]DelegationDelegatorReward, length)
	dynamicOffset := length * 32
	for i := 0; i < length; i++ {
		offset += 32
		tmp := int(binary.BigEndian.Uint64(data[offset-8 : offset]))
		if dynamicOffset != tmp {
			return nil, 0, fmt.Errorf("invalid offset for slice element %d: expected %d, got %d", i, dynamicOffset, tmp)
		}
		n, err = result[i].Decode(data[dynamicOffset:])
		if err != nil {
			return nil, 0, err
		}
		dynamicOffset += n
	}
	return result, dynamicOffset + 32, nil
}

// DecodeValidatorSlashEventSlice decodes (uint64,(uint256,uint8))[] from ABI bytes
func DecodeValidatorSlashEventSlice(data []byte) ([]ValidatorSlashEvent, int, error) {
	// Decode length
	length := int(binary.BigEndian.Uint64(data[24:32]))
	if len(data) < 32 {
		return nil, 0, io.ErrUnexpectedEOF
	}
	data = data[32:]
	if len(data) < 96*length {
		return nil, 0, io.ErrUnexpectedEOF
	}
	var (
		n      int
		err    error
		offset int
	)
	// Decode elements with static types
	result := make([]ValidatorSlashEvent, length)
	for i := 0; i < length; i++ {
		n, err = result[i].Decode(data[offset:])
		if err != nil {
			return nil, 0, err
		}
		offset += n
	}
	return result, offset + 32, nil
}

const ClaimRewardsCallStaticSize = 64

// ClaimRewardsCall represents an ABI tuple
type ClaimRewardsCall struct {
	DelegatorAddress common.Address
	MaxRetrieve      uint32
}

// EncodedSize returns the total encoded size of ClaimRewardsCall
func (t ClaimRewardsCall) EncodedSize() int {
	dynamicSize := 0

	return ClaimRewardsCallStaticSize + dynamicSize
}

// EncodeTo encodes ClaimRewardsCall to ABI bytes in the provided buffer
func (value ClaimRewardsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ClaimRewardsCallStaticSize // Start dynamic data after static section
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field MaxRetrieve: uint32
	if _, err := abi.EncodeUint32(value.MaxRetrieve, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ClaimRewardsCall to ABI bytes
func (value ClaimRewardsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ClaimRewardsCall from ABI bytes in the provided buffer
func (t *ClaimRewardsCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode static field MaxRetrieve: uint32
	t.MaxRetrieve, _, err = abi.DecodeUint32(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ClaimRewardsCall) GetMethodName() string {
	return "claimRewards"
}

// GetMethodID returns the function name
func (t ClaimRewardsCall) GetMethodID() [4]byte {
	return ClaimRewardsSelector
}

// EncodeWithSelector encodes claimRewards arguments to ABI bytes including function selector
func (t ClaimRewardsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ClaimRewardsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ClaimRewardsReturnStaticSize = 32

// ClaimRewardsReturn represents an ABI tuple
type ClaimRewardsReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of ClaimRewardsReturn
func (t ClaimRewardsReturn) EncodedSize() int {
	dynamicSize := 0

	return ClaimRewardsReturnStaticSize + dynamicSize
}

// EncodeTo encodes ClaimRewardsReturn to ABI bytes in the provided buffer
func (value ClaimRewardsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ClaimRewardsReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ClaimRewardsReturn to ABI bytes
func (value ClaimRewardsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ClaimRewardsReturn from ABI bytes in the provided buffer
func (t *ClaimRewardsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// CommunityPoolCall represents the input arguments for communityPool function
type CommunityPoolCall struct {
	abi.EmptyTuple
}

// GetMethodName returns the function name
func (t CommunityPoolCall) GetMethodName() string {
	return "communityPool"
}

// GetMethodID returns the function name
func (t CommunityPoolCall) GetMethodID() [4]byte {
	return CommunityPoolSelector
}

// EncodeWithSelector encodes communityPool arguments to ABI bytes including function selector
func (t CommunityPoolCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], CommunityPoolSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const CommunityPoolReturnStaticSize = 32

// CommunityPoolReturn represents an ABI tuple
type CommunityPoolReturn struct {
	Coins []cmn.DecCoin
}

// EncodedSize returns the total encoded size of CommunityPoolReturn
func (t CommunityPoolReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDecCoinSlice(t.Coins)

	return CommunityPoolReturnStaticSize + dynamicSize
}

// EncodeTo encodes CommunityPoolReturn to ABI bytes in the provided buffer
func (value CommunityPoolReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := CommunityPoolReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Coins: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Coins, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes CommunityPoolReturn to ABI bytes
func (value CommunityPoolReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes CommunityPoolReturn from ABI bytes in the provided buffer
func (t *CommunityPoolReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Coins
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Coins")
		}
		t.Coins, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const DelegationRewardsCallStaticSize = 64

// DelegationRewardsCall represents an ABI tuple
type DelegationRewardsCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of DelegationRewardsCall
func (t DelegationRewardsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return DelegationRewardsCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegationRewardsCall to ABI bytes in the provided buffer
func (value DelegationRewardsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationRewardsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationRewardsCall to ABI bytes
func (value DelegationRewardsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationRewardsCall from ABI bytes in the provided buffer
func (t *DelegationRewardsCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegationRewardsCall) GetMethodName() string {
	return "delegationRewards"
}

// GetMethodID returns the function name
func (t DelegationRewardsCall) GetMethodID() [4]byte {
	return DelegationRewardsSelector
}

// EncodeWithSelector encodes delegationRewards arguments to ABI bytes including function selector
func (t DelegationRewardsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegationRewardsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegationRewardsReturnStaticSize = 32

// DelegationRewardsReturn represents an ABI tuple
type DelegationRewardsReturn struct {
	Rewards []cmn.DecCoin
}

// EncodedSize returns the total encoded size of DelegationRewardsReturn
func (t DelegationRewardsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDecCoinSlice(t.Rewards)

	return DelegationRewardsReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegationRewardsReturn to ABI bytes in the provided buffer
func (value DelegationRewardsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationRewardsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Rewards: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Rewards, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationRewardsReturn to ABI bytes
func (value DelegationRewardsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationRewardsReturn from ABI bytes in the provided buffer
func (t *DelegationRewardsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Rewards
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Rewards")
		}
		t.Rewards, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const DelegationTotalRewardsCallStaticSize = 32

// DelegationTotalRewardsCall represents an ABI tuple
type DelegationTotalRewardsCall struct {
	DelegatorAddress common.Address
}

// EncodedSize returns the total encoded size of DelegationTotalRewardsCall
func (t DelegationTotalRewardsCall) EncodedSize() int {
	dynamicSize := 0

	return DelegationTotalRewardsCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegationTotalRewardsCall to ABI bytes in the provided buffer
func (value DelegationTotalRewardsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationTotalRewardsCallStaticSize // Start dynamic data after static section
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegationTotalRewardsCall to ABI bytes
func (value DelegationTotalRewardsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationTotalRewardsCall from ABI bytes in the provided buffer
func (t *DelegationTotalRewardsCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegationTotalRewardsCall) GetMethodName() string {
	return "delegationTotalRewards"
}

// GetMethodID returns the function name
func (t DelegationTotalRewardsCall) GetMethodID() [4]byte {
	return DelegationTotalRewardsSelector
}

// EncodeWithSelector encodes delegationTotalRewards arguments to ABI bytes including function selector
func (t DelegationTotalRewardsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegationTotalRewardsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegationTotalRewardsReturnStaticSize = 64

// DelegationTotalRewardsReturn represents an ABI tuple
type DelegationTotalRewardsReturn struct {
	Rewards []DelegationDelegatorReward
	Total   []cmn.DecCoin
}

// EncodedSize returns the total encoded size of DelegationTotalRewardsReturn
func (t DelegationTotalRewardsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDelegationDelegatorRewardSlice(t.Rewards)
	dynamicSize += SizeDecCoinSlice(t.Total)

	return DelegationTotalRewardsReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegationTotalRewardsReturn to ABI bytes in the provided buffer
func (value DelegationTotalRewardsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegationTotalRewardsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Rewards: (string,(string,uint256,uint8)[])[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDelegationDelegatorRewardSlice(value.Rewards, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Total: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Total, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegationTotalRewardsReturn to ABI bytes
func (value DelegationTotalRewardsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegationTotalRewardsReturn from ABI bytes in the provided buffer
func (t *DelegationTotalRewardsReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Rewards
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Rewards")
		}
		t.Rewards, n, err = DecodeDelegationDelegatorRewardSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Total
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Total")
		}
		t.Total, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const DelegatorValidatorsCallStaticSize = 32

// DelegatorValidatorsCall represents an ABI tuple
type DelegatorValidatorsCall struct {
	DelegatorAddress common.Address
}

// EncodedSize returns the total encoded size of DelegatorValidatorsCall
func (t DelegatorValidatorsCall) EncodedSize() int {
	dynamicSize := 0

	return DelegatorValidatorsCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegatorValidatorsCall to ABI bytes in the provided buffer
func (value DelegatorValidatorsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegatorValidatorsCallStaticSize // Start dynamic data after static section
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegatorValidatorsCall to ABI bytes
func (value DelegatorValidatorsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegatorValidatorsCall from ABI bytes in the provided buffer
func (t *DelegatorValidatorsCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegatorValidatorsCall) GetMethodName() string {
	return "delegatorValidators"
}

// GetMethodID returns the function name
func (t DelegatorValidatorsCall) GetMethodID() [4]byte {
	return DelegatorValidatorsSelector
}

// EncodeWithSelector encodes delegatorValidators arguments to ABI bytes including function selector
func (t DelegatorValidatorsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegatorValidatorsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegatorValidatorsReturnStaticSize = 32

// DelegatorValidatorsReturn represents an ABI tuple
type DelegatorValidatorsReturn struct {
	Validators []string
}

// EncodedSize returns the total encoded size of DelegatorValidatorsReturn
func (t DelegatorValidatorsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeStringSlice(t.Validators)

	return DelegatorValidatorsReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegatorValidatorsReturn to ABI bytes in the provided buffer
func (value DelegatorValidatorsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegatorValidatorsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Validators: string[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeStringSlice(value.Validators, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegatorValidatorsReturn to ABI bytes
func (value DelegatorValidatorsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegatorValidatorsReturn from ABI bytes in the provided buffer
func (t *DelegatorValidatorsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Validators
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Validators")
		}
		t.Validators, n, err = abi.DecodeStringSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const DelegatorWithdrawAddressCallStaticSize = 32

// DelegatorWithdrawAddressCall represents an ABI tuple
type DelegatorWithdrawAddressCall struct {
	DelegatorAddress common.Address
}

// EncodedSize returns the total encoded size of DelegatorWithdrawAddressCall
func (t DelegatorWithdrawAddressCall) EncodedSize() int {
	dynamicSize := 0

	return DelegatorWithdrawAddressCallStaticSize + dynamicSize
}

// EncodeTo encodes DelegatorWithdrawAddressCall to ABI bytes in the provided buffer
func (value DelegatorWithdrawAddressCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegatorWithdrawAddressCallStaticSize // Start dynamic data after static section
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DelegatorWithdrawAddressCall to ABI bytes
func (value DelegatorWithdrawAddressCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegatorWithdrawAddressCall from ABI bytes in the provided buffer
func (t *DelegatorWithdrawAddressCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DelegatorWithdrawAddressCall) GetMethodName() string {
	return "delegatorWithdrawAddress"
}

// GetMethodID returns the function name
func (t DelegatorWithdrawAddressCall) GetMethodID() [4]byte {
	return DelegatorWithdrawAddressSelector
}

// EncodeWithSelector encodes delegatorWithdrawAddress arguments to ABI bytes including function selector
func (t DelegatorWithdrawAddressCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DelegatorWithdrawAddressSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DelegatorWithdrawAddressReturnStaticSize = 32

// DelegatorWithdrawAddressReturn represents an ABI tuple
type DelegatorWithdrawAddressReturn struct {
	WithdrawAddress string
}

// EncodedSize returns the total encoded size of DelegatorWithdrawAddressReturn
func (t DelegatorWithdrawAddressReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.WithdrawAddress)

	return DelegatorWithdrawAddressReturnStaticSize + dynamicSize
}

// EncodeTo encodes DelegatorWithdrawAddressReturn to ABI bytes in the provided buffer
func (value DelegatorWithdrawAddressReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DelegatorWithdrawAddressReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field WithdrawAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.WithdrawAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DelegatorWithdrawAddressReturn to ABI bytes
func (value DelegatorWithdrawAddressReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DelegatorWithdrawAddressReturn from ABI bytes in the provided buffer
func (t *DelegatorWithdrawAddressReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field WithdrawAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field WithdrawAddress")
		}
		t.WithdrawAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const DepositValidatorRewardsPoolCallStaticSize = 96

// DepositValidatorRewardsPoolCall represents an ABI tuple
type DepositValidatorRewardsPoolCall struct {
	Depositor        common.Address
	ValidatorAddress string
	Amount           []cmn.Coin
}

// EncodedSize returns the total encoded size of DepositValidatorRewardsPoolCall
func (t DepositValidatorRewardsPoolCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)
	dynamicSize += SizeCoinSlice(t.Amount)

	return DepositValidatorRewardsPoolCallStaticSize + dynamicSize
}

// EncodeTo encodes DepositValidatorRewardsPoolCall to ABI bytes in the provided buffer
func (value DepositValidatorRewardsPoolCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositValidatorRewardsPoolCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[64+24:64+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes DepositValidatorRewardsPoolCall to ABI bytes
func (value DepositValidatorRewardsPoolCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositValidatorRewardsPoolCall from ABI bytes in the provided buffer
func (t *DepositValidatorRewardsPoolCall) Decode(data []byte) (int, error) {
	if len(data) < 96 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 96
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[64+24 : 64+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t DepositValidatorRewardsPoolCall) GetMethodName() string {
	return "depositValidatorRewardsPool"
}

// GetMethodID returns the function name
func (t DepositValidatorRewardsPoolCall) GetMethodID() [4]byte {
	return DepositValidatorRewardsPoolSelector
}

// EncodeWithSelector encodes depositValidatorRewardsPool arguments to ABI bytes including function selector
func (t DepositValidatorRewardsPoolCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], DepositValidatorRewardsPoolSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const DepositValidatorRewardsPoolReturnStaticSize = 32

// DepositValidatorRewardsPoolReturn represents an ABI tuple
type DepositValidatorRewardsPoolReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of DepositValidatorRewardsPoolReturn
func (t DepositValidatorRewardsPoolReturn) EncodedSize() int {
	dynamicSize := 0

	return DepositValidatorRewardsPoolReturnStaticSize + dynamicSize
}

// EncodeTo encodes DepositValidatorRewardsPoolReturn to ABI bytes in the provided buffer
func (value DepositValidatorRewardsPoolReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositValidatorRewardsPoolReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DepositValidatorRewardsPoolReturn to ABI bytes
func (value DepositValidatorRewardsPoolReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositValidatorRewardsPoolReturn from ABI bytes in the provided buffer
func (t *DepositValidatorRewardsPoolReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const FundCommunityPoolCallStaticSize = 64

// FundCommunityPoolCall represents an ABI tuple
type FundCommunityPoolCall struct {
	Depositor common.Address
	Amount    []cmn.Coin
}

// EncodedSize returns the total encoded size of FundCommunityPoolCall
func (t FundCommunityPoolCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return FundCommunityPoolCallStaticSize + dynamicSize
}

// EncodeTo encodes FundCommunityPoolCall to ABI bytes in the provided buffer
func (value FundCommunityPoolCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := FundCommunityPoolCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Depositor: address
	if _, err := abi.EncodeAddress(value.Depositor, buf[0:]); err != nil {
		return 0, err
	}

	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes FundCommunityPoolCall to ABI bytes
func (value FundCommunityPoolCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes FundCommunityPoolCall from ABI bytes in the provided buffer
func (t *FundCommunityPoolCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field Depositor: address
	t.Depositor, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t FundCommunityPoolCall) GetMethodName() string {
	return "fundCommunityPool"
}

// GetMethodID returns the function name
func (t FundCommunityPoolCall) GetMethodID() [4]byte {
	return FundCommunityPoolSelector
}

// EncodeWithSelector encodes fundCommunityPool arguments to ABI bytes including function selector
func (t FundCommunityPoolCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], FundCommunityPoolSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const FundCommunityPoolReturnStaticSize = 32

// FundCommunityPoolReturn represents an ABI tuple
type FundCommunityPoolReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of FundCommunityPoolReturn
func (t FundCommunityPoolReturn) EncodedSize() int {
	dynamicSize := 0

	return FundCommunityPoolReturnStaticSize + dynamicSize
}

// EncodeTo encodes FundCommunityPoolReturn to ABI bytes in the provided buffer
func (value FundCommunityPoolReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := FundCommunityPoolReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes FundCommunityPoolReturn to ABI bytes
func (value FundCommunityPoolReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes FundCommunityPoolReturn from ABI bytes in the provided buffer
func (t *FundCommunityPoolReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const SetWithdrawAddressCallStaticSize = 64

// SetWithdrawAddressCall represents an ABI tuple
type SetWithdrawAddressCall struct {
	DelegatorAddress  common.Address
	WithdrawerAddress string
}

// EncodedSize returns the total encoded size of SetWithdrawAddressCall
func (t SetWithdrawAddressCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.WithdrawerAddress)

	return SetWithdrawAddressCallStaticSize + dynamicSize
}

// EncodeTo encodes SetWithdrawAddressCall to ABI bytes in the provided buffer
func (value SetWithdrawAddressCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SetWithdrawAddressCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field WithdrawerAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.WithdrawerAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes SetWithdrawAddressCall to ABI bytes
func (value SetWithdrawAddressCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SetWithdrawAddressCall from ABI bytes in the provided buffer
func (t *SetWithdrawAddressCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field WithdrawerAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field WithdrawerAddress")
		}
		t.WithdrawerAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t SetWithdrawAddressCall) GetMethodName() string {
	return "setWithdrawAddress"
}

// GetMethodID returns the function name
func (t SetWithdrawAddressCall) GetMethodID() [4]byte {
	return SetWithdrawAddressSelector
}

// EncodeWithSelector encodes setWithdrawAddress arguments to ABI bytes including function selector
func (t SetWithdrawAddressCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], SetWithdrawAddressSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const SetWithdrawAddressReturnStaticSize = 32

// SetWithdrawAddressReturn represents an ABI tuple
type SetWithdrawAddressReturn struct {
	Success bool
}

// EncodedSize returns the total encoded size of SetWithdrawAddressReturn
func (t SetWithdrawAddressReturn) EncodedSize() int {
	dynamicSize := 0

	return SetWithdrawAddressReturnStaticSize + dynamicSize
}

// EncodeTo encodes SetWithdrawAddressReturn to ABI bytes in the provided buffer
func (value SetWithdrawAddressReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SetWithdrawAddressReturnStaticSize // Start dynamic data after static section
	// Field Success: bool
	if _, err := abi.EncodeBool(value.Success, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes SetWithdrawAddressReturn to ABI bytes
func (value SetWithdrawAddressReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SetWithdrawAddressReturn from ABI bytes in the provided buffer
func (t *SetWithdrawAddressReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Success: bool
	t.Success, _, err = abi.DecodeBool(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

const ValidatorCommissionCallStaticSize = 32

// ValidatorCommissionCall represents an ABI tuple
type ValidatorCommissionCall struct {
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of ValidatorCommissionCall
func (t ValidatorCommissionCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return ValidatorCommissionCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorCommissionCall to ABI bytes in the provided buffer
func (value ValidatorCommissionCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorCommissionCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorCommissionCall to ABI bytes
func (value ValidatorCommissionCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorCommissionCall from ABI bytes in the provided buffer
func (t *ValidatorCommissionCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorCommissionCall) GetMethodName() string {
	return "validatorCommission"
}

// GetMethodID returns the function name
func (t ValidatorCommissionCall) GetMethodID() [4]byte {
	return ValidatorCommissionSelector
}

// EncodeWithSelector encodes validatorCommission arguments to ABI bytes including function selector
func (t ValidatorCommissionCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorCommissionSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorCommissionReturnStaticSize = 32

// ValidatorCommissionReturn represents an ABI tuple
type ValidatorCommissionReturn struct {
	Commission []cmn.DecCoin
}

// EncodedSize returns the total encoded size of ValidatorCommissionReturn
func (t ValidatorCommissionReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDecCoinSlice(t.Commission)

	return ValidatorCommissionReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorCommissionReturn to ABI bytes in the provided buffer
func (value ValidatorCommissionReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorCommissionReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Commission: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Commission, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorCommissionReturn to ABI bytes
func (value ValidatorCommissionReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorCommissionReturn from ABI bytes in the provided buffer
func (t *ValidatorCommissionReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Commission
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Commission")
		}
		t.Commission, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorDistributionInfoCallStaticSize = 32

// ValidatorDistributionInfoCall represents an ABI tuple
type ValidatorDistributionInfoCall struct {
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of ValidatorDistributionInfoCall
func (t ValidatorDistributionInfoCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return ValidatorDistributionInfoCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorDistributionInfoCall to ABI bytes in the provided buffer
func (value ValidatorDistributionInfoCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorDistributionInfoCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorDistributionInfoCall to ABI bytes
func (value ValidatorDistributionInfoCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorDistributionInfoCall from ABI bytes in the provided buffer
func (t *ValidatorDistributionInfoCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorDistributionInfoCall) GetMethodName() string {
	return "validatorDistributionInfo"
}

// GetMethodID returns the function name
func (t ValidatorDistributionInfoCall) GetMethodID() [4]byte {
	return ValidatorDistributionInfoSelector
}

// EncodeWithSelector encodes validatorDistributionInfo arguments to ABI bytes including function selector
func (t ValidatorDistributionInfoCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorDistributionInfoSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorDistributionInfoReturnStaticSize = 32

// ValidatorDistributionInfoReturn represents an ABI tuple
type ValidatorDistributionInfoReturn struct {
	DistributionInfo ValidatorDistributionInfo
}

// EncodedSize returns the total encoded size of ValidatorDistributionInfoReturn
func (t ValidatorDistributionInfoReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += t.DistributionInfo.EncodedSize()

	return ValidatorDistributionInfoReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorDistributionInfoReturn to ABI bytes in the provided buffer
func (value ValidatorDistributionInfoReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorDistributionInfoReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DistributionInfo: (string,(string,uint256,uint8)[],(string,uint256,uint8)[])
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.DistributionInfo.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorDistributionInfoReturn to ABI bytes
func (value ValidatorDistributionInfoReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorDistributionInfoReturn from ABI bytes in the provided buffer
func (t *ValidatorDistributionInfoReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field DistributionInfo
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field DistributionInfo")
		}
		n, err = t.DistributionInfo.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorOutstandingRewardsCallStaticSize = 32

// ValidatorOutstandingRewardsCall represents an ABI tuple
type ValidatorOutstandingRewardsCall struct {
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of ValidatorOutstandingRewardsCall
func (t ValidatorOutstandingRewardsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return ValidatorOutstandingRewardsCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorOutstandingRewardsCall to ABI bytes in the provided buffer
func (value ValidatorOutstandingRewardsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorOutstandingRewardsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorOutstandingRewardsCall to ABI bytes
func (value ValidatorOutstandingRewardsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorOutstandingRewardsCall from ABI bytes in the provided buffer
func (t *ValidatorOutstandingRewardsCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorOutstandingRewardsCall) GetMethodName() string {
	return "validatorOutstandingRewards"
}

// GetMethodID returns the function name
func (t ValidatorOutstandingRewardsCall) GetMethodID() [4]byte {
	return ValidatorOutstandingRewardsSelector
}

// EncodeWithSelector encodes validatorOutstandingRewards arguments to ABI bytes including function selector
func (t ValidatorOutstandingRewardsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorOutstandingRewardsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorOutstandingRewardsReturnStaticSize = 32

// ValidatorOutstandingRewardsReturn represents an ABI tuple
type ValidatorOutstandingRewardsReturn struct {
	Rewards []cmn.DecCoin
}

// EncodedSize returns the total encoded size of ValidatorOutstandingRewardsReturn
func (t ValidatorOutstandingRewardsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeDecCoinSlice(t.Rewards)

	return ValidatorOutstandingRewardsReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorOutstandingRewardsReturn to ABI bytes in the provided buffer
func (value ValidatorOutstandingRewardsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorOutstandingRewardsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Rewards: (string,uint256,uint8)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeDecCoinSlice(value.Rewards, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorOutstandingRewardsReturn to ABI bytes
func (value ValidatorOutstandingRewardsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorOutstandingRewardsReturn from ABI bytes in the provided buffer
func (t *ValidatorOutstandingRewardsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Rewards
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Rewards")
		}
		t.Rewards, n, err = DecodeDecCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const ValidatorSlashesCallStaticSize = 128

// ValidatorSlashesCall represents an ABI tuple
type ValidatorSlashesCall struct {
	ValidatorAddress string
	StartingHeight   uint64
	EndingHeight     uint64
	PageRequest      cmn.PageRequest
}

// EncodedSize returns the total encoded size of ValidatorSlashesCall
func (t ValidatorSlashesCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)
	dynamicSize += t.PageRequest.EncodedSize()

	return ValidatorSlashesCallStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorSlashesCall to ABI bytes in the provided buffer
func (value ValidatorSlashesCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorSlashesCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field StartingHeight: uint64
	if _, err := abi.EncodeUint64(value.StartingHeight, buf[32:]); err != nil {
		return 0, err
	}

	// Field EndingHeight: uint64
	if _, err := abi.EncodeUint64(value.EndingHeight, buf[64:]); err != nil {
		return 0, err
	}

	// Field PageRequest: (bytes,uint64,uint64,bool,bool)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[96+24:96+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageRequest.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorSlashesCall to ABI bytes
func (value ValidatorSlashesCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorSlashesCall from ABI bytes in the provided buffer
func (t *ValidatorSlashesCall) Decode(data []byte) (int, error) {
	if len(data) < 128 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 128
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field StartingHeight: uint64
	t.StartingHeight, _, err = abi.DecodeUint64(data[32:])
	if err != nil {
		return 0, err
	}
	// Decode static field EndingHeight: uint64
	t.EndingHeight, _, err = abi.DecodeUint64(data[64:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field PageRequest
	{
		offset := int(binary.BigEndian.Uint64(data[96+24 : 96+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageRequest")
		}
		n, err = t.PageRequest.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t ValidatorSlashesCall) GetMethodName() string {
	return "validatorSlashes"
}

// GetMethodID returns the function name
func (t ValidatorSlashesCall) GetMethodID() [4]byte {
	return ValidatorSlashesSelector
}

// EncodeWithSelector encodes validatorSlashes arguments to ABI bytes including function selector
func (t ValidatorSlashesCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], ValidatorSlashesSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const ValidatorSlashesReturnStaticSize = 64

// ValidatorSlashesReturn represents an ABI tuple
type ValidatorSlashesReturn struct {
	Slashes      []ValidatorSlashEvent
	PageResponse PageResponse
}

// EncodedSize returns the total encoded size of ValidatorSlashesReturn
func (t ValidatorSlashesReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeValidatorSlashEventSlice(t.Slashes)
	dynamicSize += t.PageResponse.EncodedSize()

	return ValidatorSlashesReturnStaticSize + dynamicSize
}

// EncodeTo encodes ValidatorSlashesReturn to ABI bytes in the provided buffer
func (value ValidatorSlashesReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ValidatorSlashesReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Slashes: (uint64,(uint256,uint8))[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeValidatorSlashEventSlice(value.Slashes, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field PageResponse: (bytes,uint64)
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = value.PageResponse.EncodeTo(buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes ValidatorSlashesReturn to ABI bytes
func (value ValidatorSlashesReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ValidatorSlashesReturn from ABI bytes in the provided buffer
func (t *ValidatorSlashesReturn) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Slashes
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Slashes")
		}
		t.Slashes, n, err = DecodeValidatorSlashEventSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode dynamic field PageResponse
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field PageResponse")
		}
		n, err = t.PageResponse.Decode(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const WithdrawDelegatorRewardsCallStaticSize = 64

// WithdrawDelegatorRewardsCall represents an ABI tuple
type WithdrawDelegatorRewardsCall struct {
	DelegatorAddress common.Address
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of WithdrawDelegatorRewardsCall
func (t WithdrawDelegatorRewardsCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return WithdrawDelegatorRewardsCallStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawDelegatorRewardsCall to ABI bytes in the provided buffer
func (value WithdrawDelegatorRewardsCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawDelegatorRewardsCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field DelegatorAddress: address
	if _, err := abi.EncodeAddress(value.DelegatorAddress, buf[0:]); err != nil {
		return 0, err
	}

	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[32+24:32+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WithdrawDelegatorRewardsCall to ABI bytes
func (value WithdrawDelegatorRewardsCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawDelegatorRewardsCall from ABI bytes in the provided buffer
func (t *WithdrawDelegatorRewardsCall) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode static field DelegatorAddress: address
	t.DelegatorAddress, _, err = abi.DecodeAddress(data[0:])
	if err != nil {
		return 0, err
	}
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[32+24 : 32+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t WithdrawDelegatorRewardsCall) GetMethodName() string {
	return "withdrawDelegatorRewards"
}

// GetMethodID returns the function name
func (t WithdrawDelegatorRewardsCall) GetMethodID() [4]byte {
	return WithdrawDelegatorRewardsSelector
}

// EncodeWithSelector encodes withdrawDelegatorRewards arguments to ABI bytes including function selector
func (t WithdrawDelegatorRewardsCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], WithdrawDelegatorRewardsSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const WithdrawDelegatorRewardsReturnStaticSize = 32

// WithdrawDelegatorRewardsReturn represents an ABI tuple
type WithdrawDelegatorRewardsReturn struct {
	Amount []cmn.Coin
}

// EncodedSize returns the total encoded size of WithdrawDelegatorRewardsReturn
func (t WithdrawDelegatorRewardsReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return WithdrawDelegatorRewardsReturnStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawDelegatorRewardsReturn to ABI bytes in the provided buffer
func (value WithdrawDelegatorRewardsReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawDelegatorRewardsReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WithdrawDelegatorRewardsReturn to ABI bytes
func (value WithdrawDelegatorRewardsReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawDelegatorRewardsReturn from ABI bytes in the provided buffer
func (t *WithdrawDelegatorRewardsReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

const WithdrawValidatorCommissionCallStaticSize = 32

// WithdrawValidatorCommissionCall represents an ABI tuple
type WithdrawValidatorCommissionCall struct {
	ValidatorAddress string
}

// EncodedSize returns the total encoded size of WithdrawValidatorCommissionCall
func (t WithdrawValidatorCommissionCall) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.ValidatorAddress)

	return WithdrawValidatorCommissionCallStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawValidatorCommissionCall to ABI bytes in the provided buffer
func (value WithdrawValidatorCommissionCall) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawValidatorCommissionCallStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field ValidatorAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.ValidatorAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WithdrawValidatorCommissionCall to ABI bytes
func (value WithdrawValidatorCommissionCall) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawValidatorCommissionCall from ABI bytes in the provided buffer
func (t *WithdrawValidatorCommissionCall) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field ValidatorAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field ValidatorAddress")
		}
		t.ValidatorAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// GetMethodName returns the function name
func (t WithdrawValidatorCommissionCall) GetMethodName() string {
	return "withdrawValidatorCommission"
}

// GetMethodID returns the function name
func (t WithdrawValidatorCommissionCall) GetMethodID() [4]byte {
	return WithdrawValidatorCommissionSelector
}

// EncodeWithSelector encodes withdrawValidatorCommission arguments to ABI bytes including function selector
func (t WithdrawValidatorCommissionCall) EncodeWithSelector() ([]byte, error) {
	result := make([]byte, 4+t.EncodedSize())
	copy(result[:4], WithdrawValidatorCommissionSelector[:])
	if _, err := t.EncodeTo(result[4:]); err != nil {
		return nil, err
	}
	return result, nil
}

const WithdrawValidatorCommissionReturnStaticSize = 32

// WithdrawValidatorCommissionReturn represents an ABI tuple
type WithdrawValidatorCommissionReturn struct {
	Amount []cmn.Coin
}

// EncodedSize returns the total encoded size of WithdrawValidatorCommissionReturn
func (t WithdrawValidatorCommissionReturn) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += SizeCoinSlice(t.Amount)

	return WithdrawValidatorCommissionReturnStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawValidatorCommissionReturn to ABI bytes in the provided buffer
func (value WithdrawValidatorCommissionReturn) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawValidatorCommissionReturnStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Amount: (string,uint256)[]
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = EncodeCoinSlice(value.Amount, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes WithdrawValidatorCommissionReturn to ABI bytes
func (value WithdrawValidatorCommissionReturn) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawValidatorCommissionReturn from ABI bytes in the provided buffer
func (t *WithdrawValidatorCommissionReturn) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field Amount
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Amount")
		}
		t.Amount, n, err = DecodeCoinSlice(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// Event signatures
var (
	// ClaimRewards(address,uint256)
	ClaimRewardsEventTopic = common.Hash{0x1f, 0x89, 0xf9, 0x63, 0x33, 0xd3, 0x13, 0x30, 0x00, 0xee, 0x44, 0x74, 0x73, 0x15, 0x1f, 0xa9, 0x60, 0x65, 0x43, 0x36, 0x8f, 0x02, 0x27, 0x1c, 0x9d, 0x95, 0xae, 0x14, 0xf1, 0x3b, 0xcc, 0x67}
	// DepositValidatorRewardsPool(address,address,string,uint256)
	DepositValidatorRewardsPoolEventTopic = common.Hash{0xcc, 0x9d, 0x91, 0x43, 0x47, 0xa4, 0xaf, 0xdb, 0x20, 0xb4, 0x38, 0xdc, 0xe7, 0x63, 0xe1, 0xc9, 0x5a, 0xf2, 0xba, 0xef, 0x68, 0xcc, 0xa4, 0x01, 0xdc, 0xeb, 0x00, 0x1e, 0xfd, 0x11, 0x8e, 0x94}
	// FundCommunityPool(address,string,uint256)
	FundCommunityPoolEventTopic = common.Hash{0xb5, 0xa9, 0xb7, 0x25, 0x6a, 0x6f, 0xa6, 0x94, 0xd8, 0x52, 0x86, 0xd7, 0x7a, 0xfa, 0x40, 0x35, 0x71, 0x7c, 0x1b, 0xa5, 0x33, 0x25, 0x97, 0xd2, 0xcf, 0x1e, 0x98, 0x70, 0x93, 0x2f, 0x93, 0x66}
	// SetWithdrawerAddress(address,string)
	SetWithdrawerAddressEventTopic = common.Hash{0xb5, 0x5d, 0x29, 0x54, 0x2a, 0x84, 0x4f, 0xa6, 0x4e, 0x70, 0xcb, 0xc0, 0x65, 0x56, 0x20, 0x19, 0x57, 0xfa, 0x02, 0x53, 0xfe, 0x7b, 0x54, 0x67, 0x78, 0x30, 0xb5, 0x86, 0xe2, 0x28, 0x8e, 0x1e}
	// WithdrawDelegatorReward(address,address,uint256)
	WithdrawDelegatorRewardEventTopic = common.Hash{0xcf, 0x87, 0x1d, 0x31, 0x49, 0xad, 0x67, 0x7b, 0x26, 0x8b, 0x02, 0x38, 0xa4, 0xff, 0xc6, 0xd4, 0x00, 0x8f, 0x48, 0xa1, 0x1e, 0x73, 0x46, 0x8d, 0x05, 0xff, 0x00, 0xe7, 0x5f, 0x20, 0x40, 0x35}
	// WithdrawValidatorCommission(address,uint256)
	WithdrawValidatorCommissionEventTopic = common.Hash{0x44, 0x1c, 0x6a, 0xf7, 0xe6, 0xde, 0x8d, 0x3b, 0xd6, 0x27, 0x44, 0xb5, 0x8b, 0x17, 0xe4, 0x33, 0x8a, 0xdc, 0x25, 0x9e, 0xf6, 0x7e, 0x1c, 0xe1, 0x6c, 0x3b, 0x12, 0xc9, 0xcd, 0xd6, 0xf1, 0x28}
)

// ClaimRewardsEvent represents the ClaimRewards event
type ClaimRewardsEvent struct {
	ClaimRewardsEventIndexed
	ClaimRewardsEventData
}

// NewClaimRewardsEvent constructs a new ClaimRewards event
func NewClaimRewardsEvent(
	delegatorAddress common.Address,
	amount *big.Int,
) ClaimRewardsEvent {
	return ClaimRewardsEvent{
		ClaimRewardsEventIndexed: ClaimRewardsEventIndexed{
			DelegatorAddress: delegatorAddress,
		},
		ClaimRewardsEventData: ClaimRewardsEventData{
			Amount: amount,
		},
	}
}

// GetEventName returns the event name
func (e ClaimRewardsEvent) GetEventName() string {
	return "ClaimRewards"
}

// GetEventID returns the event ID (topic)
func (e ClaimRewardsEvent) GetEventID() common.Hash {
	return ClaimRewardsEventTopic
}

// ClaimRewards represents an ABI event
type ClaimRewardsEventIndexed struct {
	DelegatorAddress common.Address
}

// EncodeTopics encodes indexed fields of ClaimRewards event to topics
func (e ClaimRewardsEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, ClaimRewardsEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of ClaimRewards event from topics, ignore hash topics
func (e *ClaimRewardsEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for ClaimRewards event: expected 2, got %d", len(topics))
	}
	if topics[0] != ClaimRewardsEventTopic {
		return fmt.Errorf("invalid event topic for ClaimRewards event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const ClaimRewardsEventDataStaticSize = 32

// ClaimRewardsEventData represents an ABI tuple
type ClaimRewardsEventData struct {
	Amount *big.Int
}

// EncodedSize returns the total encoded size of ClaimRewardsEventData
func (t ClaimRewardsEventData) EncodedSize() int {
	dynamicSize := 0

	return ClaimRewardsEventDataStaticSize + dynamicSize
}

// EncodeTo encodes ClaimRewardsEventData to ABI bytes in the provided buffer
func (value ClaimRewardsEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := ClaimRewardsEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes ClaimRewardsEventData to ABI bytes
func (value ClaimRewardsEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes ClaimRewardsEventData from ABI bytes in the provided buffer
func (t *ClaimRewardsEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// DepositValidatorRewardsPoolEvent represents the DepositValidatorRewardsPool event
type DepositValidatorRewardsPoolEvent struct {
	DepositValidatorRewardsPoolEventIndexed
	DepositValidatorRewardsPoolEventData
}

// NewDepositValidatorRewardsPoolEvent constructs a new DepositValidatorRewardsPool event
func NewDepositValidatorRewardsPoolEvent(
	depositor common.Address,
	validatorAddress common.Address,
	denom string,
	amount *big.Int,
) DepositValidatorRewardsPoolEvent {
	return DepositValidatorRewardsPoolEvent{
		DepositValidatorRewardsPoolEventIndexed: DepositValidatorRewardsPoolEventIndexed{
			Depositor:        depositor,
			ValidatorAddress: validatorAddress,
		},
		DepositValidatorRewardsPoolEventData: DepositValidatorRewardsPoolEventData{
			Denom:  denom,
			Amount: amount,
		},
	}
}

// GetEventName returns the event name
func (e DepositValidatorRewardsPoolEvent) GetEventName() string {
	return "DepositValidatorRewardsPool"
}

// GetEventID returns the event ID (topic)
func (e DepositValidatorRewardsPoolEvent) GetEventID() common.Hash {
	return DepositValidatorRewardsPoolEventTopic
}

// DepositValidatorRewardsPool represents an ABI event
type DepositValidatorRewardsPoolEventIndexed struct {
	Depositor        common.Address
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of DepositValidatorRewardsPool event to topics
func (e DepositValidatorRewardsPoolEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, DepositValidatorRewardsPoolEventTopic)
	{
		// Depositor
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Depositor, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of DepositValidatorRewardsPool event from topics, ignore hash topics
func (e *DepositValidatorRewardsPoolEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for DepositValidatorRewardsPool event: expected 3, got %d", len(topics))
	}
	if topics[0] != DepositValidatorRewardsPoolEventTopic {
		return fmt.Errorf("invalid event topic for DepositValidatorRewardsPool event")
	}
	var err error
	e.Depositor, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const DepositValidatorRewardsPoolEventDataStaticSize = 64

// DepositValidatorRewardsPoolEventData represents an ABI tuple
type DepositValidatorRewardsPoolEventData struct {
	Denom  string
	Amount *big.Int
}

// EncodedSize returns the total encoded size of DepositValidatorRewardsPoolEventData
func (t DepositValidatorRewardsPoolEventData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Denom)

	return DepositValidatorRewardsPoolEventDataStaticSize + dynamicSize
}

// EncodeTo encodes DepositValidatorRewardsPoolEventData to ABI bytes in the provided buffer
func (value DepositValidatorRewardsPoolEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := DepositValidatorRewardsPoolEventDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Denom: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Denom, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes DepositValidatorRewardsPoolEventData to ABI bytes
func (value DepositValidatorRewardsPoolEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes DepositValidatorRewardsPoolEventData from ABI bytes in the provided buffer
func (t *DepositValidatorRewardsPoolEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Denom
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Denom")
		}
		t.Denom, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// FundCommunityPoolEvent represents the FundCommunityPool event
type FundCommunityPoolEvent struct {
	FundCommunityPoolEventIndexed
	FundCommunityPoolEventData
}

// NewFundCommunityPoolEvent constructs a new FundCommunityPool event
func NewFundCommunityPoolEvent(
	depositor common.Address,
	denom string,
	amount *big.Int,
) FundCommunityPoolEvent {
	return FundCommunityPoolEvent{
		FundCommunityPoolEventIndexed: FundCommunityPoolEventIndexed{
			Depositor: depositor,
		},
		FundCommunityPoolEventData: FundCommunityPoolEventData{
			Denom:  denom,
			Amount: amount,
		},
	}
}

// GetEventName returns the event name
func (e FundCommunityPoolEvent) GetEventName() string {
	return "FundCommunityPool"
}

// GetEventID returns the event ID (topic)
func (e FundCommunityPoolEvent) GetEventID() common.Hash {
	return FundCommunityPoolEventTopic
}

// FundCommunityPool represents an ABI event
type FundCommunityPoolEventIndexed struct {
	Depositor common.Address
}

// EncodeTopics encodes indexed fields of FundCommunityPool event to topics
func (e FundCommunityPoolEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, FundCommunityPoolEventTopic)
	{
		// Depositor
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Depositor, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of FundCommunityPool event from topics, ignore hash topics
func (e *FundCommunityPoolEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for FundCommunityPool event: expected 2, got %d", len(topics))
	}
	if topics[0] != FundCommunityPoolEventTopic {
		return fmt.Errorf("invalid event topic for FundCommunityPool event")
	}
	var err error
	e.Depositor, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const FundCommunityPoolEventDataStaticSize = 64

// FundCommunityPoolEventData represents an ABI tuple
type FundCommunityPoolEventData struct {
	Denom  string
	Amount *big.Int
}

// EncodedSize returns the total encoded size of FundCommunityPoolEventData
func (t FundCommunityPoolEventData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.Denom)

	return FundCommunityPoolEventDataStaticSize + dynamicSize
}

// EncodeTo encodes FundCommunityPoolEventData to ABI bytes in the provided buffer
func (value FundCommunityPoolEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := FundCommunityPoolEventDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field Denom: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.Denom, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[32:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes FundCommunityPoolEventData to ABI bytes
func (value FundCommunityPoolEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes FundCommunityPoolEventData from ABI bytes in the provided buffer
func (t *FundCommunityPoolEventData) Decode(data []byte) (int, error) {
	if len(data) < 64 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 64
	// Decode dynamic field Denom
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field Denom")
		}
		t.Denom, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[32:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// SetWithdrawerAddressEvent represents the SetWithdrawerAddress event
type SetWithdrawerAddressEvent struct {
	SetWithdrawerAddressEventIndexed
	SetWithdrawerAddressEventData
}

// NewSetWithdrawerAddressEvent constructs a new SetWithdrawerAddress event
func NewSetWithdrawerAddressEvent(
	caller common.Address,
	withdrawerAddress string,
) SetWithdrawerAddressEvent {
	return SetWithdrawerAddressEvent{
		SetWithdrawerAddressEventIndexed: SetWithdrawerAddressEventIndexed{
			Caller: caller,
		},
		SetWithdrawerAddressEventData: SetWithdrawerAddressEventData{
			WithdrawerAddress: withdrawerAddress,
		},
	}
}

// GetEventName returns the event name
func (e SetWithdrawerAddressEvent) GetEventName() string {
	return "SetWithdrawerAddress"
}

// GetEventID returns the event ID (topic)
func (e SetWithdrawerAddressEvent) GetEventID() common.Hash {
	return SetWithdrawerAddressEventTopic
}

// SetWithdrawerAddress represents an ABI event
type SetWithdrawerAddressEventIndexed struct {
	Caller common.Address
}

// EncodeTopics encodes indexed fields of SetWithdrawerAddress event to topics
func (e SetWithdrawerAddressEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, SetWithdrawerAddressEventTopic)
	{
		// Caller
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.Caller, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of SetWithdrawerAddress event from topics, ignore hash topics
func (e *SetWithdrawerAddressEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for SetWithdrawerAddress event: expected 2, got %d", len(topics))
	}
	if topics[0] != SetWithdrawerAddressEventTopic {
		return fmt.Errorf("invalid event topic for SetWithdrawerAddress event")
	}
	var err error
	e.Caller, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const SetWithdrawerAddressEventDataStaticSize = 32

// SetWithdrawerAddressEventData represents an ABI tuple
type SetWithdrawerAddressEventData struct {
	WithdrawerAddress string
}

// EncodedSize returns the total encoded size of SetWithdrawerAddressEventData
func (t SetWithdrawerAddressEventData) EncodedSize() int {
	dynamicSize := 0
	dynamicSize += abi.SizeString(t.WithdrawerAddress)

	return SetWithdrawerAddressEventDataStaticSize + dynamicSize
}

// EncodeTo encodes SetWithdrawerAddressEventData to ABI bytes in the provided buffer
func (value SetWithdrawerAddressEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := SetWithdrawerAddressEventDataStaticSize // Start dynamic data after static section
	var (
		err error
		n   int
	)
	// Field WithdrawerAddress: string
	// Encode offset pointer
	binary.BigEndian.PutUint64(buf[0+24:0+32], uint64(dynamicOffset))
	// Encode dynamic data
	n, err = abi.EncodeString(value.WithdrawerAddress, buf[dynamicOffset:])
	if err != nil {
		return 0, err
	}
	dynamicOffset += n

	return dynamicOffset, nil
}

// Encode encodes SetWithdrawerAddressEventData to ABI bytes
func (value SetWithdrawerAddressEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes SetWithdrawerAddressEventData from ABI bytes in the provided buffer
func (t *SetWithdrawerAddressEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
		n   int
	)
	dynamicOffset := 32
	// Decode dynamic field WithdrawerAddress
	{
		offset := int(binary.BigEndian.Uint64(data[0+24 : 0+32]))
		if offset != dynamicOffset {
			return 0, errors.New("invalid offset for dynamic field WithdrawerAddress")
		}
		t.WithdrawerAddress, n, err = abi.DecodeString(data[dynamicOffset:])
		if err != nil {
			return 0, err
		}
		dynamicOffset += n
	}
	return dynamicOffset, nil
}

// WithdrawDelegatorRewardEvent represents the WithdrawDelegatorReward event
type WithdrawDelegatorRewardEvent struct {
	WithdrawDelegatorRewardEventIndexed
	WithdrawDelegatorRewardEventData
}

// NewWithdrawDelegatorRewardEvent constructs a new WithdrawDelegatorReward event
func NewWithdrawDelegatorRewardEvent(
	delegatorAddress common.Address,
	validatorAddress common.Address,
	amount *big.Int,
) WithdrawDelegatorRewardEvent {
	return WithdrawDelegatorRewardEvent{
		WithdrawDelegatorRewardEventIndexed: WithdrawDelegatorRewardEventIndexed{
			DelegatorAddress: delegatorAddress,
			ValidatorAddress: validatorAddress,
		},
		WithdrawDelegatorRewardEventData: WithdrawDelegatorRewardEventData{
			Amount: amount,
		},
	}
}

// GetEventName returns the event name
func (e WithdrawDelegatorRewardEvent) GetEventName() string {
	return "WithdrawDelegatorReward"
}

// GetEventID returns the event ID (topic)
func (e WithdrawDelegatorRewardEvent) GetEventID() common.Hash {
	return WithdrawDelegatorRewardEventTopic
}

// WithdrawDelegatorReward represents an ABI event
type WithdrawDelegatorRewardEventIndexed struct {
	DelegatorAddress common.Address
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of WithdrawDelegatorReward event to topics
func (e WithdrawDelegatorRewardEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 3)
	topics = append(topics, WithdrawDelegatorRewardEventTopic)
	{
		// DelegatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.DelegatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of WithdrawDelegatorReward event from topics, ignore hash topics
func (e *WithdrawDelegatorRewardEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 3 {
		return fmt.Errorf("invalid number of topics for WithdrawDelegatorReward event: expected 3, got %d", len(topics))
	}
	if topics[0] != WithdrawDelegatorRewardEventTopic {
		return fmt.Errorf("invalid event topic for WithdrawDelegatorReward event")
	}
	var err error
	e.DelegatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[2][:])
	if err != nil {
		return err
	}
	return nil
}

const WithdrawDelegatorRewardEventDataStaticSize = 32

// WithdrawDelegatorRewardEventData represents an ABI tuple
type WithdrawDelegatorRewardEventData struct {
	Amount *big.Int
}

// EncodedSize returns the total encoded size of WithdrawDelegatorRewardEventData
func (t WithdrawDelegatorRewardEventData) EncodedSize() int {
	dynamicSize := 0

	return WithdrawDelegatorRewardEventDataStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawDelegatorRewardEventData to ABI bytes in the provided buffer
func (value WithdrawDelegatorRewardEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawDelegatorRewardEventDataStaticSize // Start dynamic data after static section
	// Field Amount: uint256
	if _, err := abi.EncodeUint256(value.Amount, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes WithdrawDelegatorRewardEventData to ABI bytes
func (value WithdrawDelegatorRewardEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawDelegatorRewardEventData from ABI bytes in the provided buffer
func (t *WithdrawDelegatorRewardEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Amount: uint256
	t.Amount, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}

// WithdrawValidatorCommissionEvent represents the WithdrawValidatorCommission event
type WithdrawValidatorCommissionEvent struct {
	WithdrawValidatorCommissionEventIndexed
	WithdrawValidatorCommissionEventData
}

// NewWithdrawValidatorCommissionEvent constructs a new WithdrawValidatorCommission event
func NewWithdrawValidatorCommissionEvent(
	validatorAddress common.Address,
	commission *big.Int,
) WithdrawValidatorCommissionEvent {
	return WithdrawValidatorCommissionEvent{
		WithdrawValidatorCommissionEventIndexed: WithdrawValidatorCommissionEventIndexed{
			ValidatorAddress: validatorAddress,
		},
		WithdrawValidatorCommissionEventData: WithdrawValidatorCommissionEventData{
			Commission: commission,
		},
	}
}

// GetEventName returns the event name
func (e WithdrawValidatorCommissionEvent) GetEventName() string {
	return "WithdrawValidatorCommission"
}

// GetEventID returns the event ID (topic)
func (e WithdrawValidatorCommissionEvent) GetEventID() common.Hash {
	return WithdrawValidatorCommissionEventTopic
}

// WithdrawValidatorCommission represents an ABI event
type WithdrawValidatorCommissionEventIndexed struct {
	ValidatorAddress common.Address
}

// EncodeTopics encodes indexed fields of WithdrawValidatorCommission event to topics
func (e WithdrawValidatorCommissionEventIndexed) EncodeTopics() ([]common.Hash, error) {
	topics := make([]common.Hash, 0, 2)
	topics = append(topics, WithdrawValidatorCommissionEventTopic)
	{
		// ValidatorAddress
		var hash common.Hash
		if _, err := abi.EncodeAddress(e.ValidatorAddress, hash[:]); err != nil {
			return nil, err
		}
		topics = append(topics, hash)
	}
	return topics, nil
}

// DecodeTopics decodes indexed fields of WithdrawValidatorCommission event from topics, ignore hash topics
func (e *WithdrawValidatorCommissionEventIndexed) DecodeTopics(topics []common.Hash) error {
	if len(topics) != 2 {
		return fmt.Errorf("invalid number of topics for WithdrawValidatorCommission event: expected 2, got %d", len(topics))
	}
	if topics[0] != WithdrawValidatorCommissionEventTopic {
		return fmt.Errorf("invalid event topic for WithdrawValidatorCommission event")
	}
	var err error
	e.ValidatorAddress, _, err = abi.DecodeAddress(topics[1][:])
	if err != nil {
		return err
	}
	return nil
}

const WithdrawValidatorCommissionEventDataStaticSize = 32

// WithdrawValidatorCommissionEventData represents an ABI tuple
type WithdrawValidatorCommissionEventData struct {
	Commission *big.Int
}

// EncodedSize returns the total encoded size of WithdrawValidatorCommissionEventData
func (t WithdrawValidatorCommissionEventData) EncodedSize() int {
	dynamicSize := 0

	return WithdrawValidatorCommissionEventDataStaticSize + dynamicSize
}

// EncodeTo encodes WithdrawValidatorCommissionEventData to ABI bytes in the provided buffer
func (value WithdrawValidatorCommissionEventData) EncodeTo(buf []byte) (int, error) {
	// Encode tuple fields
	dynamicOffset := WithdrawValidatorCommissionEventDataStaticSize // Start dynamic data after static section
	// Field Commission: uint256
	if _, err := abi.EncodeUint256(value.Commission, buf[0:]); err != nil {
		return 0, err
	}

	return dynamicOffset, nil
}

// Encode encodes WithdrawValidatorCommissionEventData to ABI bytes
func (value WithdrawValidatorCommissionEventData) Encode() ([]byte, error) {
	buf := make([]byte, value.EncodedSize())
	if _, err := value.EncodeTo(buf); err != nil {
		return nil, err
	}
	return buf, nil
}

// Decode decodes WithdrawValidatorCommissionEventData from ABI bytes in the provided buffer
func (t *WithdrawValidatorCommissionEventData) Decode(data []byte) (int, error) {
	if len(data) < 32 {
		return 0, io.ErrUnexpectedEOF
	}
	var (
		err error
	)
	dynamicOffset := 32
	// Decode static field Commission: uint256
	t.Commission, _, err = abi.DecodeUint256(data[0:])
	if err != nil {
		return 0, err
	}
	return dynamicOffset, nil
}
